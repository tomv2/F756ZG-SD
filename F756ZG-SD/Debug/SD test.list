
SD test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009278  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006d0  08009448  08009448  00019448  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009b18  08009b18  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08009b18  08009b18  00019b18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009b20  08009b20  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009b20  08009b20  00019b20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009b24  08009b24  00019b24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08009b28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002a84  20000074  08009b9c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002af8  08009b9c  00022af8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013db8  00000000  00000000  000200e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002e57  00000000  00000000  00033e9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001088  00000000  00000000  00036cf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000cb0  00000000  00000000  00037d80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028713  00000000  00000000  00038a30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018248  00000000  00000000  00061143  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000eeaf7  00000000  00000000  0007938b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004a34  00000000  00000000  00167e84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  0016c8b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009430 	.word	0x08009430

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	08009430 	.word	0x08009430

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_dmul>:
 80002c0:	b570      	push	{r4, r5, r6, lr}
 80002c2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80002c6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80002ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002ce:	bf1d      	ittte	ne
 80002d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002d4:	ea94 0f0c 	teqne	r4, ip
 80002d8:	ea95 0f0c 	teqne	r5, ip
 80002dc:	f000 f8de 	bleq	800049c <__aeabi_dmul+0x1dc>
 80002e0:	442c      	add	r4, r5
 80002e2:	ea81 0603 	eor.w	r6, r1, r3
 80002e6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ea:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ee:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002f2:	bf18      	it	ne
 80002f4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000300:	d038      	beq.n	8000374 <__aeabi_dmul+0xb4>
 8000302:	fba0 ce02 	umull	ip, lr, r0, r2
 8000306:	f04f 0500 	mov.w	r5, #0
 800030a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800030e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000312:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000316:	f04f 0600 	mov.w	r6, #0
 800031a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800031e:	f09c 0f00 	teq	ip, #0
 8000322:	bf18      	it	ne
 8000324:	f04e 0e01 	orrne.w	lr, lr, #1
 8000328:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800032c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000330:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000334:	d204      	bcs.n	8000340 <__aeabi_dmul+0x80>
 8000336:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800033a:	416d      	adcs	r5, r5
 800033c:	eb46 0606 	adc.w	r6, r6, r6
 8000340:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000344:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000348:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800034c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000350:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000354:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000358:	bf88      	it	hi
 800035a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800035e:	d81e      	bhi.n	800039e <__aeabi_dmul+0xde>
 8000360:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000364:	bf08      	it	eq
 8000366:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800036a:	f150 0000 	adcs.w	r0, r0, #0
 800036e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000372:	bd70      	pop	{r4, r5, r6, pc}
 8000374:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000378:	ea46 0101 	orr.w	r1, r6, r1
 800037c:	ea40 0002 	orr.w	r0, r0, r2
 8000380:	ea81 0103 	eor.w	r1, r1, r3
 8000384:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000388:	bfc2      	ittt	gt
 800038a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800038e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000392:	bd70      	popgt	{r4, r5, r6, pc}
 8000394:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000398:	f04f 0e00 	mov.w	lr, #0
 800039c:	3c01      	subs	r4, #1
 800039e:	f300 80ab 	bgt.w	80004f8 <__aeabi_dmul+0x238>
 80003a2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80003a6:	bfde      	ittt	le
 80003a8:	2000      	movle	r0, #0
 80003aa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd70      	pople	{r4, r5, r6, pc}
 80003b0:	f1c4 0400 	rsb	r4, r4, #0
 80003b4:	3c20      	subs	r4, #32
 80003b6:	da35      	bge.n	8000424 <__aeabi_dmul+0x164>
 80003b8:	340c      	adds	r4, #12
 80003ba:	dc1b      	bgt.n	80003f4 <__aeabi_dmul+0x134>
 80003bc:	f104 0414 	add.w	r4, r4, #20
 80003c0:	f1c4 0520 	rsb	r5, r4, #32
 80003c4:	fa00 f305 	lsl.w	r3, r0, r5
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f205 	lsl.w	r2, r1, r5
 80003d0:	ea40 0002 	orr.w	r0, r0, r2
 80003d4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003e0:	fa21 f604 	lsr.w	r6, r1, r4
 80003e4:	eb42 0106 	adc.w	r1, r2, r6
 80003e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f1c4 040c 	rsb	r4, r4, #12
 80003f8:	f1c4 0520 	rsb	r5, r4, #32
 80003fc:	fa00 f304 	lsl.w	r3, r0, r4
 8000400:	fa20 f005 	lsr.w	r0, r0, r5
 8000404:	fa01 f204 	lsl.w	r2, r1, r4
 8000408:	ea40 0002 	orr.w	r0, r0, r2
 800040c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000410:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000414:	f141 0100 	adc.w	r1, r1, #0
 8000418:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800041c:	bf08      	it	eq
 800041e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000422:	bd70      	pop	{r4, r5, r6, pc}
 8000424:	f1c4 0520 	rsb	r5, r4, #32
 8000428:	fa00 f205 	lsl.w	r2, r0, r5
 800042c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000430:	fa20 f304 	lsr.w	r3, r0, r4
 8000434:	fa01 f205 	lsl.w	r2, r1, r5
 8000438:	ea43 0302 	orr.w	r3, r3, r2
 800043c:	fa21 f004 	lsr.w	r0, r1, r4
 8000440:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000444:	fa21 f204 	lsr.w	r2, r1, r4
 8000448:	ea20 0002 	bic.w	r0, r0, r2
 800044c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000450:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000454:	bf08      	it	eq
 8000456:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800045a:	bd70      	pop	{r4, r5, r6, pc}
 800045c:	f094 0f00 	teq	r4, #0
 8000460:	d10f      	bne.n	8000482 <__aeabi_dmul+0x1c2>
 8000462:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000466:	0040      	lsls	r0, r0, #1
 8000468:	eb41 0101 	adc.w	r1, r1, r1
 800046c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000470:	bf08      	it	eq
 8000472:	3c01      	subeq	r4, #1
 8000474:	d0f7      	beq.n	8000466 <__aeabi_dmul+0x1a6>
 8000476:	ea41 0106 	orr.w	r1, r1, r6
 800047a:	f095 0f00 	teq	r5, #0
 800047e:	bf18      	it	ne
 8000480:	4770      	bxne	lr
 8000482:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000486:	0052      	lsls	r2, r2, #1
 8000488:	eb43 0303 	adc.w	r3, r3, r3
 800048c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000490:	bf08      	it	eq
 8000492:	3d01      	subeq	r5, #1
 8000494:	d0f7      	beq.n	8000486 <__aeabi_dmul+0x1c6>
 8000496:	ea43 0306 	orr.w	r3, r3, r6
 800049a:	4770      	bx	lr
 800049c:	ea94 0f0c 	teq	r4, ip
 80004a0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80004a4:	bf18      	it	ne
 80004a6:	ea95 0f0c 	teqne	r5, ip
 80004aa:	d00c      	beq.n	80004c6 <__aeabi_dmul+0x206>
 80004ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004b0:	bf18      	it	ne
 80004b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004b6:	d1d1      	bne.n	800045c <__aeabi_dmul+0x19c>
 80004b8:	ea81 0103 	eor.w	r1, r1, r3
 80004bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004c0:	f04f 0000 	mov.w	r0, #0
 80004c4:	bd70      	pop	{r4, r5, r6, pc}
 80004c6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004ca:	bf06      	itte	eq
 80004cc:	4610      	moveq	r0, r2
 80004ce:	4619      	moveq	r1, r3
 80004d0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004d4:	d019      	beq.n	800050a <__aeabi_dmul+0x24a>
 80004d6:	ea94 0f0c 	teq	r4, ip
 80004da:	d102      	bne.n	80004e2 <__aeabi_dmul+0x222>
 80004dc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004e0:	d113      	bne.n	800050a <__aeabi_dmul+0x24a>
 80004e2:	ea95 0f0c 	teq	r5, ip
 80004e6:	d105      	bne.n	80004f4 <__aeabi_dmul+0x234>
 80004e8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ec:	bf1c      	itt	ne
 80004ee:	4610      	movne	r0, r2
 80004f0:	4619      	movne	r1, r3
 80004f2:	d10a      	bne.n	800050a <__aeabi_dmul+0x24a>
 80004f4:	ea81 0103 	eor.w	r1, r1, r3
 80004f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004fc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd70      	pop	{r4, r5, r6, pc}
 800050a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800050e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000512:	bd70      	pop	{r4, r5, r6, pc}

08000514 <__aeabi_drsub>:
 8000514:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000518:	e002      	b.n	8000520 <__adddf3>
 800051a:	bf00      	nop

0800051c <__aeabi_dsub>:
 800051c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000520 <__adddf3>:
 8000520:	b530      	push	{r4, r5, lr}
 8000522:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000526:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800052a:	ea94 0f05 	teq	r4, r5
 800052e:	bf08      	it	eq
 8000530:	ea90 0f02 	teqeq	r0, r2
 8000534:	bf1f      	itttt	ne
 8000536:	ea54 0c00 	orrsne.w	ip, r4, r0
 800053a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800053e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000542:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000546:	f000 80e2 	beq.w	800070e <__adddf3+0x1ee>
 800054a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800054e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000552:	bfb8      	it	lt
 8000554:	426d      	neglt	r5, r5
 8000556:	dd0c      	ble.n	8000572 <__adddf3+0x52>
 8000558:	442c      	add	r4, r5
 800055a:	ea80 0202 	eor.w	r2, r0, r2
 800055e:	ea81 0303 	eor.w	r3, r1, r3
 8000562:	ea82 0000 	eor.w	r0, r2, r0
 8000566:	ea83 0101 	eor.w	r1, r3, r1
 800056a:	ea80 0202 	eor.w	r2, r0, r2
 800056e:	ea81 0303 	eor.w	r3, r1, r3
 8000572:	2d36      	cmp	r5, #54	; 0x36
 8000574:	bf88      	it	hi
 8000576:	bd30      	pophi	{r4, r5, pc}
 8000578:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800057c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000580:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000584:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000588:	d002      	beq.n	8000590 <__adddf3+0x70>
 800058a:	4240      	negs	r0, r0
 800058c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000590:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000594:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000598:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800059c:	d002      	beq.n	80005a4 <__adddf3+0x84>
 800059e:	4252      	negs	r2, r2
 80005a0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80005a4:	ea94 0f05 	teq	r4, r5
 80005a8:	f000 80a7 	beq.w	80006fa <__adddf3+0x1da>
 80005ac:	f1a4 0401 	sub.w	r4, r4, #1
 80005b0:	f1d5 0e20 	rsbs	lr, r5, #32
 80005b4:	db0d      	blt.n	80005d2 <__adddf3+0xb2>
 80005b6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005ba:	fa22 f205 	lsr.w	r2, r2, r5
 80005be:	1880      	adds	r0, r0, r2
 80005c0:	f141 0100 	adc.w	r1, r1, #0
 80005c4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005c8:	1880      	adds	r0, r0, r2
 80005ca:	fa43 f305 	asr.w	r3, r3, r5
 80005ce:	4159      	adcs	r1, r3
 80005d0:	e00e      	b.n	80005f0 <__adddf3+0xd0>
 80005d2:	f1a5 0520 	sub.w	r5, r5, #32
 80005d6:	f10e 0e20 	add.w	lr, lr, #32
 80005da:	2a01      	cmp	r2, #1
 80005dc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005e0:	bf28      	it	cs
 80005e2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005e6:	fa43 f305 	asr.w	r3, r3, r5
 80005ea:	18c0      	adds	r0, r0, r3
 80005ec:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	d507      	bpl.n	8000606 <__adddf3+0xe6>
 80005f6:	f04f 0e00 	mov.w	lr, #0
 80005fa:	f1dc 0c00 	rsbs	ip, ip, #0
 80005fe:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000602:	eb6e 0101 	sbc.w	r1, lr, r1
 8000606:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800060a:	d31b      	bcc.n	8000644 <__adddf3+0x124>
 800060c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000610:	d30c      	bcc.n	800062c <__adddf3+0x10c>
 8000612:	0849      	lsrs	r1, r1, #1
 8000614:	ea5f 0030 	movs.w	r0, r0, rrx
 8000618:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800061c:	f104 0401 	add.w	r4, r4, #1
 8000620:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000624:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000628:	f080 809a 	bcs.w	8000760 <__adddf3+0x240>
 800062c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000630:	bf08      	it	eq
 8000632:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000636:	f150 0000 	adcs.w	r0, r0, #0
 800063a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800063e:	ea41 0105 	orr.w	r1, r1, r5
 8000642:	bd30      	pop	{r4, r5, pc}
 8000644:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000648:	4140      	adcs	r0, r0
 800064a:	eb41 0101 	adc.w	r1, r1, r1
 800064e:	3c01      	subs	r4, #1
 8000650:	bf28      	it	cs
 8000652:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000656:	d2e9      	bcs.n	800062c <__adddf3+0x10c>
 8000658:	f091 0f00 	teq	r1, #0
 800065c:	bf04      	itt	eq
 800065e:	4601      	moveq	r1, r0
 8000660:	2000      	moveq	r0, #0
 8000662:	fab1 f381 	clz	r3, r1
 8000666:	bf08      	it	eq
 8000668:	3320      	addeq	r3, #32
 800066a:	f1a3 030b 	sub.w	r3, r3, #11
 800066e:	f1b3 0220 	subs.w	r2, r3, #32
 8000672:	da0c      	bge.n	800068e <__adddf3+0x16e>
 8000674:	320c      	adds	r2, #12
 8000676:	dd08      	ble.n	800068a <__adddf3+0x16a>
 8000678:	f102 0c14 	add.w	ip, r2, #20
 800067c:	f1c2 020c 	rsb	r2, r2, #12
 8000680:	fa01 f00c 	lsl.w	r0, r1, ip
 8000684:	fa21 f102 	lsr.w	r1, r1, r2
 8000688:	e00c      	b.n	80006a4 <__adddf3+0x184>
 800068a:	f102 0214 	add.w	r2, r2, #20
 800068e:	bfd8      	it	le
 8000690:	f1c2 0c20 	rsble	ip, r2, #32
 8000694:	fa01 f102 	lsl.w	r1, r1, r2
 8000698:	fa20 fc0c 	lsr.w	ip, r0, ip
 800069c:	bfdc      	itt	le
 800069e:	ea41 010c 	orrle.w	r1, r1, ip
 80006a2:	4090      	lslle	r0, r2
 80006a4:	1ae4      	subs	r4, r4, r3
 80006a6:	bfa2      	ittt	ge
 80006a8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80006ac:	4329      	orrge	r1, r5
 80006ae:	bd30      	popge	{r4, r5, pc}
 80006b0:	ea6f 0404 	mvn.w	r4, r4
 80006b4:	3c1f      	subs	r4, #31
 80006b6:	da1c      	bge.n	80006f2 <__adddf3+0x1d2>
 80006b8:	340c      	adds	r4, #12
 80006ba:	dc0e      	bgt.n	80006da <__adddf3+0x1ba>
 80006bc:	f104 0414 	add.w	r4, r4, #20
 80006c0:	f1c4 0220 	rsb	r2, r4, #32
 80006c4:	fa20 f004 	lsr.w	r0, r0, r4
 80006c8:	fa01 f302 	lsl.w	r3, r1, r2
 80006cc:	ea40 0003 	orr.w	r0, r0, r3
 80006d0:	fa21 f304 	lsr.w	r3, r1, r4
 80006d4:	ea45 0103 	orr.w	r1, r5, r3
 80006d8:	bd30      	pop	{r4, r5, pc}
 80006da:	f1c4 040c 	rsb	r4, r4, #12
 80006de:	f1c4 0220 	rsb	r2, r4, #32
 80006e2:	fa20 f002 	lsr.w	r0, r0, r2
 80006e6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ea:	ea40 0003 	orr.w	r0, r0, r3
 80006ee:	4629      	mov	r1, r5
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	fa21 f004 	lsr.w	r0, r1, r4
 80006f6:	4629      	mov	r1, r5
 80006f8:	bd30      	pop	{r4, r5, pc}
 80006fa:	f094 0f00 	teq	r4, #0
 80006fe:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000702:	bf06      	itte	eq
 8000704:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000708:	3401      	addeq	r4, #1
 800070a:	3d01      	subne	r5, #1
 800070c:	e74e      	b.n	80005ac <__adddf3+0x8c>
 800070e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000712:	bf18      	it	ne
 8000714:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000718:	d029      	beq.n	800076e <__adddf3+0x24e>
 800071a:	ea94 0f05 	teq	r4, r5
 800071e:	bf08      	it	eq
 8000720:	ea90 0f02 	teqeq	r0, r2
 8000724:	d005      	beq.n	8000732 <__adddf3+0x212>
 8000726:	ea54 0c00 	orrs.w	ip, r4, r0
 800072a:	bf04      	itt	eq
 800072c:	4619      	moveq	r1, r3
 800072e:	4610      	moveq	r0, r2
 8000730:	bd30      	pop	{r4, r5, pc}
 8000732:	ea91 0f03 	teq	r1, r3
 8000736:	bf1e      	ittt	ne
 8000738:	2100      	movne	r1, #0
 800073a:	2000      	movne	r0, #0
 800073c:	bd30      	popne	{r4, r5, pc}
 800073e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000742:	d105      	bne.n	8000750 <__adddf3+0x230>
 8000744:	0040      	lsls	r0, r0, #1
 8000746:	4149      	adcs	r1, r1
 8000748:	bf28      	it	cs
 800074a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800074e:	bd30      	pop	{r4, r5, pc}
 8000750:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000754:	bf3c      	itt	cc
 8000756:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800075a:	bd30      	popcc	{r4, r5, pc}
 800075c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000760:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000764:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd30      	pop	{r4, r5, pc}
 800076e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000772:	bf1a      	itte	ne
 8000774:	4619      	movne	r1, r3
 8000776:	4610      	movne	r0, r2
 8000778:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800077c:	bf1c      	itt	ne
 800077e:	460b      	movne	r3, r1
 8000780:	4602      	movne	r2, r0
 8000782:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000786:	bf06      	itte	eq
 8000788:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800078c:	ea91 0f03 	teqeq	r1, r3
 8000790:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000794:	bd30      	pop	{r4, r5, pc}
 8000796:	bf00      	nop

08000798 <__aeabi_ui2d>:
 8000798:	f090 0f00 	teq	r0, #0
 800079c:	bf04      	itt	eq
 800079e:	2100      	moveq	r1, #0
 80007a0:	4770      	bxeq	lr
 80007a2:	b530      	push	{r4, r5, lr}
 80007a4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007a8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007ac:	f04f 0500 	mov.w	r5, #0
 80007b0:	f04f 0100 	mov.w	r1, #0
 80007b4:	e750      	b.n	8000658 <__adddf3+0x138>
 80007b6:	bf00      	nop

080007b8 <__aeabi_i2d>:
 80007b8:	f090 0f00 	teq	r0, #0
 80007bc:	bf04      	itt	eq
 80007be:	2100      	moveq	r1, #0
 80007c0:	4770      	bxeq	lr
 80007c2:	b530      	push	{r4, r5, lr}
 80007c4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007c8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007cc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007d0:	bf48      	it	mi
 80007d2:	4240      	negmi	r0, r0
 80007d4:	f04f 0100 	mov.w	r1, #0
 80007d8:	e73e      	b.n	8000658 <__adddf3+0x138>
 80007da:	bf00      	nop

080007dc <__aeabi_f2d>:
 80007dc:	0042      	lsls	r2, r0, #1
 80007de:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007e2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007e6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ea:	bf1f      	itttt	ne
 80007ec:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007f0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007f4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007f8:	4770      	bxne	lr
 80007fa:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007fe:	bf08      	it	eq
 8000800:	4770      	bxeq	lr
 8000802:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000806:	bf04      	itt	eq
 8000808:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800080c:	4770      	bxeq	lr
 800080e:	b530      	push	{r4, r5, lr}
 8000810:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000814:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000818:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800081c:	e71c      	b.n	8000658 <__adddf3+0x138>
 800081e:	bf00      	nop

08000820 <__aeabi_ul2d>:
 8000820:	ea50 0201 	orrs.w	r2, r0, r1
 8000824:	bf08      	it	eq
 8000826:	4770      	bxeq	lr
 8000828:	b530      	push	{r4, r5, lr}
 800082a:	f04f 0500 	mov.w	r5, #0
 800082e:	e00a      	b.n	8000846 <__aeabi_l2d+0x16>

08000830 <__aeabi_l2d>:
 8000830:	ea50 0201 	orrs.w	r2, r0, r1
 8000834:	bf08      	it	eq
 8000836:	4770      	bxeq	lr
 8000838:	b530      	push	{r4, r5, lr}
 800083a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800083e:	d502      	bpl.n	8000846 <__aeabi_l2d+0x16>
 8000840:	4240      	negs	r0, r0
 8000842:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000846:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800084a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800084e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000852:	f43f aed8 	beq.w	8000606 <__adddf3+0xe6>
 8000856:	f04f 0203 	mov.w	r2, #3
 800085a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800085e:	bf18      	it	ne
 8000860:	3203      	addne	r2, #3
 8000862:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000866:	bf18      	it	ne
 8000868:	3203      	addne	r2, #3
 800086a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800086e:	f1c2 0320 	rsb	r3, r2, #32
 8000872:	fa00 fc03 	lsl.w	ip, r0, r3
 8000876:	fa20 f002 	lsr.w	r0, r0, r2
 800087a:	fa01 fe03 	lsl.w	lr, r1, r3
 800087e:	ea40 000e 	orr.w	r0, r0, lr
 8000882:	fa21 f102 	lsr.w	r1, r1, r2
 8000886:	4414      	add	r4, r2
 8000888:	e6bd      	b.n	8000606 <__adddf3+0xe6>
 800088a:	bf00      	nop

0800088c <__aeabi_d2uiz>:
 800088c:	004a      	lsls	r2, r1, #1
 800088e:	d211      	bcs.n	80008b4 <__aeabi_d2uiz+0x28>
 8000890:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000894:	d211      	bcs.n	80008ba <__aeabi_d2uiz+0x2e>
 8000896:	d50d      	bpl.n	80008b4 <__aeabi_d2uiz+0x28>
 8000898:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800089c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008a0:	d40e      	bmi.n	80008c0 <__aeabi_d2uiz+0x34>
 80008a2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80008aa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80008ae:	fa23 f002 	lsr.w	r0, r3, r2
 80008b2:	4770      	bx	lr
 80008b4:	f04f 0000 	mov.w	r0, #0
 80008b8:	4770      	bx	lr
 80008ba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80008be:	d102      	bne.n	80008c6 <__aeabi_d2uiz+0x3a>
 80008c0:	f04f 30ff 	mov.w	r0, #4294967295
 80008c4:	4770      	bx	lr
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	4770      	bx	lr

080008cc <__aeabi_uldivmod>:
 80008cc:	b953      	cbnz	r3, 80008e4 <__aeabi_uldivmod+0x18>
 80008ce:	b94a      	cbnz	r2, 80008e4 <__aeabi_uldivmod+0x18>
 80008d0:	2900      	cmp	r1, #0
 80008d2:	bf08      	it	eq
 80008d4:	2800      	cmpeq	r0, #0
 80008d6:	bf1c      	itt	ne
 80008d8:	f04f 31ff 	movne.w	r1, #4294967295
 80008dc:	f04f 30ff 	movne.w	r0, #4294967295
 80008e0:	f000 b970 	b.w	8000bc4 <__aeabi_idiv0>
 80008e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008ec:	f000 f806 	bl	80008fc <__udivmoddi4>
 80008f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008f8:	b004      	add	sp, #16
 80008fa:	4770      	bx	lr

080008fc <__udivmoddi4>:
 80008fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000900:	9e08      	ldr	r6, [sp, #32]
 8000902:	460d      	mov	r5, r1
 8000904:	4604      	mov	r4, r0
 8000906:	460f      	mov	r7, r1
 8000908:	2b00      	cmp	r3, #0
 800090a:	d14a      	bne.n	80009a2 <__udivmoddi4+0xa6>
 800090c:	428a      	cmp	r2, r1
 800090e:	4694      	mov	ip, r2
 8000910:	d965      	bls.n	80009de <__udivmoddi4+0xe2>
 8000912:	fab2 f382 	clz	r3, r2
 8000916:	b143      	cbz	r3, 800092a <__udivmoddi4+0x2e>
 8000918:	fa02 fc03 	lsl.w	ip, r2, r3
 800091c:	f1c3 0220 	rsb	r2, r3, #32
 8000920:	409f      	lsls	r7, r3
 8000922:	fa20 f202 	lsr.w	r2, r0, r2
 8000926:	4317      	orrs	r7, r2
 8000928:	409c      	lsls	r4, r3
 800092a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800092e:	fa1f f58c 	uxth.w	r5, ip
 8000932:	fbb7 f1fe 	udiv	r1, r7, lr
 8000936:	0c22      	lsrs	r2, r4, #16
 8000938:	fb0e 7711 	mls	r7, lr, r1, r7
 800093c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000940:	fb01 f005 	mul.w	r0, r1, r5
 8000944:	4290      	cmp	r0, r2
 8000946:	d90a      	bls.n	800095e <__udivmoddi4+0x62>
 8000948:	eb1c 0202 	adds.w	r2, ip, r2
 800094c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000950:	f080 811c 	bcs.w	8000b8c <__udivmoddi4+0x290>
 8000954:	4290      	cmp	r0, r2
 8000956:	f240 8119 	bls.w	8000b8c <__udivmoddi4+0x290>
 800095a:	3902      	subs	r1, #2
 800095c:	4462      	add	r2, ip
 800095e:	1a12      	subs	r2, r2, r0
 8000960:	b2a4      	uxth	r4, r4
 8000962:	fbb2 f0fe 	udiv	r0, r2, lr
 8000966:	fb0e 2210 	mls	r2, lr, r0, r2
 800096a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800096e:	fb00 f505 	mul.w	r5, r0, r5
 8000972:	42a5      	cmp	r5, r4
 8000974:	d90a      	bls.n	800098c <__udivmoddi4+0x90>
 8000976:	eb1c 0404 	adds.w	r4, ip, r4
 800097a:	f100 32ff 	add.w	r2, r0, #4294967295
 800097e:	f080 8107 	bcs.w	8000b90 <__udivmoddi4+0x294>
 8000982:	42a5      	cmp	r5, r4
 8000984:	f240 8104 	bls.w	8000b90 <__udivmoddi4+0x294>
 8000988:	4464      	add	r4, ip
 800098a:	3802      	subs	r0, #2
 800098c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000990:	1b64      	subs	r4, r4, r5
 8000992:	2100      	movs	r1, #0
 8000994:	b11e      	cbz	r6, 800099e <__udivmoddi4+0xa2>
 8000996:	40dc      	lsrs	r4, r3
 8000998:	2300      	movs	r3, #0
 800099a:	e9c6 4300 	strd	r4, r3, [r6]
 800099e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009a2:	428b      	cmp	r3, r1
 80009a4:	d908      	bls.n	80009b8 <__udivmoddi4+0xbc>
 80009a6:	2e00      	cmp	r6, #0
 80009a8:	f000 80ed 	beq.w	8000b86 <__udivmoddi4+0x28a>
 80009ac:	2100      	movs	r1, #0
 80009ae:	e9c6 0500 	strd	r0, r5, [r6]
 80009b2:	4608      	mov	r0, r1
 80009b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009b8:	fab3 f183 	clz	r1, r3
 80009bc:	2900      	cmp	r1, #0
 80009be:	d149      	bne.n	8000a54 <__udivmoddi4+0x158>
 80009c0:	42ab      	cmp	r3, r5
 80009c2:	d302      	bcc.n	80009ca <__udivmoddi4+0xce>
 80009c4:	4282      	cmp	r2, r0
 80009c6:	f200 80f8 	bhi.w	8000bba <__udivmoddi4+0x2be>
 80009ca:	1a84      	subs	r4, r0, r2
 80009cc:	eb65 0203 	sbc.w	r2, r5, r3
 80009d0:	2001      	movs	r0, #1
 80009d2:	4617      	mov	r7, r2
 80009d4:	2e00      	cmp	r6, #0
 80009d6:	d0e2      	beq.n	800099e <__udivmoddi4+0xa2>
 80009d8:	e9c6 4700 	strd	r4, r7, [r6]
 80009dc:	e7df      	b.n	800099e <__udivmoddi4+0xa2>
 80009de:	b902      	cbnz	r2, 80009e2 <__udivmoddi4+0xe6>
 80009e0:	deff      	udf	#255	; 0xff
 80009e2:	fab2 f382 	clz	r3, r2
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	f040 8090 	bne.w	8000b0c <__udivmoddi4+0x210>
 80009ec:	1a8a      	subs	r2, r1, r2
 80009ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009f2:	fa1f fe8c 	uxth.w	lr, ip
 80009f6:	2101      	movs	r1, #1
 80009f8:	fbb2 f5f7 	udiv	r5, r2, r7
 80009fc:	fb07 2015 	mls	r0, r7, r5, r2
 8000a00:	0c22      	lsrs	r2, r4, #16
 8000a02:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000a06:	fb0e f005 	mul.w	r0, lr, r5
 8000a0a:	4290      	cmp	r0, r2
 8000a0c:	d908      	bls.n	8000a20 <__udivmoddi4+0x124>
 8000a0e:	eb1c 0202 	adds.w	r2, ip, r2
 8000a12:	f105 38ff 	add.w	r8, r5, #4294967295
 8000a16:	d202      	bcs.n	8000a1e <__udivmoddi4+0x122>
 8000a18:	4290      	cmp	r0, r2
 8000a1a:	f200 80cb 	bhi.w	8000bb4 <__udivmoddi4+0x2b8>
 8000a1e:	4645      	mov	r5, r8
 8000a20:	1a12      	subs	r2, r2, r0
 8000a22:	b2a4      	uxth	r4, r4
 8000a24:	fbb2 f0f7 	udiv	r0, r2, r7
 8000a28:	fb07 2210 	mls	r2, r7, r0, r2
 8000a2c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000a30:	fb0e fe00 	mul.w	lr, lr, r0
 8000a34:	45a6      	cmp	lr, r4
 8000a36:	d908      	bls.n	8000a4a <__udivmoddi4+0x14e>
 8000a38:	eb1c 0404 	adds.w	r4, ip, r4
 8000a3c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000a40:	d202      	bcs.n	8000a48 <__udivmoddi4+0x14c>
 8000a42:	45a6      	cmp	lr, r4
 8000a44:	f200 80bb 	bhi.w	8000bbe <__udivmoddi4+0x2c2>
 8000a48:	4610      	mov	r0, r2
 8000a4a:	eba4 040e 	sub.w	r4, r4, lr
 8000a4e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000a52:	e79f      	b.n	8000994 <__udivmoddi4+0x98>
 8000a54:	f1c1 0720 	rsb	r7, r1, #32
 8000a58:	408b      	lsls	r3, r1
 8000a5a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a5e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a62:	fa05 f401 	lsl.w	r4, r5, r1
 8000a66:	fa20 f307 	lsr.w	r3, r0, r7
 8000a6a:	40fd      	lsrs	r5, r7
 8000a6c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a70:	4323      	orrs	r3, r4
 8000a72:	fbb5 f8f9 	udiv	r8, r5, r9
 8000a76:	fa1f fe8c 	uxth.w	lr, ip
 8000a7a:	fb09 5518 	mls	r5, r9, r8, r5
 8000a7e:	0c1c      	lsrs	r4, r3, #16
 8000a80:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000a84:	fb08 f50e 	mul.w	r5, r8, lr
 8000a88:	42a5      	cmp	r5, r4
 8000a8a:	fa02 f201 	lsl.w	r2, r2, r1
 8000a8e:	fa00 f001 	lsl.w	r0, r0, r1
 8000a92:	d90b      	bls.n	8000aac <__udivmoddi4+0x1b0>
 8000a94:	eb1c 0404 	adds.w	r4, ip, r4
 8000a98:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a9c:	f080 8088 	bcs.w	8000bb0 <__udivmoddi4+0x2b4>
 8000aa0:	42a5      	cmp	r5, r4
 8000aa2:	f240 8085 	bls.w	8000bb0 <__udivmoddi4+0x2b4>
 8000aa6:	f1a8 0802 	sub.w	r8, r8, #2
 8000aaa:	4464      	add	r4, ip
 8000aac:	1b64      	subs	r4, r4, r5
 8000aae:	b29d      	uxth	r5, r3
 8000ab0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ab4:	fb09 4413 	mls	r4, r9, r3, r4
 8000ab8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000abc:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ac0:	45a6      	cmp	lr, r4
 8000ac2:	d908      	bls.n	8000ad6 <__udivmoddi4+0x1da>
 8000ac4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ac8:	f103 35ff 	add.w	r5, r3, #4294967295
 8000acc:	d26c      	bcs.n	8000ba8 <__udivmoddi4+0x2ac>
 8000ace:	45a6      	cmp	lr, r4
 8000ad0:	d96a      	bls.n	8000ba8 <__udivmoddi4+0x2ac>
 8000ad2:	3b02      	subs	r3, #2
 8000ad4:	4464      	add	r4, ip
 8000ad6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ada:	fba3 9502 	umull	r9, r5, r3, r2
 8000ade:	eba4 040e 	sub.w	r4, r4, lr
 8000ae2:	42ac      	cmp	r4, r5
 8000ae4:	46c8      	mov	r8, r9
 8000ae6:	46ae      	mov	lr, r5
 8000ae8:	d356      	bcc.n	8000b98 <__udivmoddi4+0x29c>
 8000aea:	d053      	beq.n	8000b94 <__udivmoddi4+0x298>
 8000aec:	b156      	cbz	r6, 8000b04 <__udivmoddi4+0x208>
 8000aee:	ebb0 0208 	subs.w	r2, r0, r8
 8000af2:	eb64 040e 	sbc.w	r4, r4, lr
 8000af6:	fa04 f707 	lsl.w	r7, r4, r7
 8000afa:	40ca      	lsrs	r2, r1
 8000afc:	40cc      	lsrs	r4, r1
 8000afe:	4317      	orrs	r7, r2
 8000b00:	e9c6 7400 	strd	r7, r4, [r6]
 8000b04:	4618      	mov	r0, r3
 8000b06:	2100      	movs	r1, #0
 8000b08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b0c:	f1c3 0120 	rsb	r1, r3, #32
 8000b10:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b14:	fa20 f201 	lsr.w	r2, r0, r1
 8000b18:	fa25 f101 	lsr.w	r1, r5, r1
 8000b1c:	409d      	lsls	r5, r3
 8000b1e:	432a      	orrs	r2, r5
 8000b20:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b24:	fa1f fe8c 	uxth.w	lr, ip
 8000b28:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b2c:	fb07 1510 	mls	r5, r7, r0, r1
 8000b30:	0c11      	lsrs	r1, r2, #16
 8000b32:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000b36:	fb00 f50e 	mul.w	r5, r0, lr
 8000b3a:	428d      	cmp	r5, r1
 8000b3c:	fa04 f403 	lsl.w	r4, r4, r3
 8000b40:	d908      	bls.n	8000b54 <__udivmoddi4+0x258>
 8000b42:	eb1c 0101 	adds.w	r1, ip, r1
 8000b46:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b4a:	d22f      	bcs.n	8000bac <__udivmoddi4+0x2b0>
 8000b4c:	428d      	cmp	r5, r1
 8000b4e:	d92d      	bls.n	8000bac <__udivmoddi4+0x2b0>
 8000b50:	3802      	subs	r0, #2
 8000b52:	4461      	add	r1, ip
 8000b54:	1b49      	subs	r1, r1, r5
 8000b56:	b292      	uxth	r2, r2
 8000b58:	fbb1 f5f7 	udiv	r5, r1, r7
 8000b5c:	fb07 1115 	mls	r1, r7, r5, r1
 8000b60:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000b64:	fb05 f10e 	mul.w	r1, r5, lr
 8000b68:	4291      	cmp	r1, r2
 8000b6a:	d908      	bls.n	8000b7e <__udivmoddi4+0x282>
 8000b6c:	eb1c 0202 	adds.w	r2, ip, r2
 8000b70:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b74:	d216      	bcs.n	8000ba4 <__udivmoddi4+0x2a8>
 8000b76:	4291      	cmp	r1, r2
 8000b78:	d914      	bls.n	8000ba4 <__udivmoddi4+0x2a8>
 8000b7a:	3d02      	subs	r5, #2
 8000b7c:	4462      	add	r2, ip
 8000b7e:	1a52      	subs	r2, r2, r1
 8000b80:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000b84:	e738      	b.n	80009f8 <__udivmoddi4+0xfc>
 8000b86:	4631      	mov	r1, r6
 8000b88:	4630      	mov	r0, r6
 8000b8a:	e708      	b.n	800099e <__udivmoddi4+0xa2>
 8000b8c:	4639      	mov	r1, r7
 8000b8e:	e6e6      	b.n	800095e <__udivmoddi4+0x62>
 8000b90:	4610      	mov	r0, r2
 8000b92:	e6fb      	b.n	800098c <__udivmoddi4+0x90>
 8000b94:	4548      	cmp	r0, r9
 8000b96:	d2a9      	bcs.n	8000aec <__udivmoddi4+0x1f0>
 8000b98:	ebb9 0802 	subs.w	r8, r9, r2
 8000b9c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ba0:	3b01      	subs	r3, #1
 8000ba2:	e7a3      	b.n	8000aec <__udivmoddi4+0x1f0>
 8000ba4:	4645      	mov	r5, r8
 8000ba6:	e7ea      	b.n	8000b7e <__udivmoddi4+0x282>
 8000ba8:	462b      	mov	r3, r5
 8000baa:	e794      	b.n	8000ad6 <__udivmoddi4+0x1da>
 8000bac:	4640      	mov	r0, r8
 8000bae:	e7d1      	b.n	8000b54 <__udivmoddi4+0x258>
 8000bb0:	46d0      	mov	r8, sl
 8000bb2:	e77b      	b.n	8000aac <__udivmoddi4+0x1b0>
 8000bb4:	3d02      	subs	r5, #2
 8000bb6:	4462      	add	r2, ip
 8000bb8:	e732      	b.n	8000a20 <__udivmoddi4+0x124>
 8000bba:	4608      	mov	r0, r1
 8000bbc:	e70a      	b.n	80009d4 <__udivmoddi4+0xd8>
 8000bbe:	4464      	add	r4, ip
 8000bc0:	3802      	subs	r0, #2
 8000bc2:	e742      	b.n	8000a4a <__udivmoddi4+0x14e>

08000bc4 <__aeabi_idiv0>:
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000bcc:	2200      	movs	r2, #0
 8000bce:	2140      	movs	r1, #64	; 0x40
 8000bd0:	4803      	ldr	r0, [pc, #12]	; (8000be0 <SELECT+0x18>)
 8000bd2:	f001 fd3b 	bl	800264c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000bd6:	2001      	movs	r0, #1
 8000bd8:	f001 fa76 	bl	80020c8 <HAL_Delay>
}
 8000bdc:	bf00      	nop
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	40020c00 	.word	0x40020c00

08000be4 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8000be8:	2201      	movs	r2, #1
 8000bea:	2140      	movs	r1, #64	; 0x40
 8000bec:	4803      	ldr	r0, [pc, #12]	; (8000bfc <DESELECT+0x18>)
 8000bee:	f001 fd2d 	bl	800264c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000bf2:	2001      	movs	r0, #1
 8000bf4:	f001 fa68 	bl	80020c8 <HAL_Delay>
}
 8000bf8:	bf00      	nop
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	40020c00 	.word	0x40020c00

08000c00 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	4603      	mov	r3, r0
 8000c08:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000c0a:	bf00      	nop
 8000c0c:	4b08      	ldr	r3, [pc, #32]	; (8000c30 <SPI_TxByte+0x30>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	689b      	ldr	r3, [r3, #8]
 8000c12:	f003 0302 	and.w	r3, r3, #2
 8000c16:	2b02      	cmp	r3, #2
 8000c18:	d1f8      	bne.n	8000c0c <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8000c1a:	1df9      	adds	r1, r7, #7
 8000c1c:	2364      	movs	r3, #100	; 0x64
 8000c1e:	2201      	movs	r2, #1
 8000c20:	4803      	ldr	r0, [pc, #12]	; (8000c30 <SPI_TxByte+0x30>)
 8000c22:	f002 ffea 	bl	8003bfa <HAL_SPI_Transmit>
}
 8000c26:	bf00      	nop
 8000c28:	3708      	adds	r7, #8
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	20000098 	.word	0x20000098

08000c34 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
 8000c3c:	460b      	mov	r3, r1
 8000c3e:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000c40:	bf00      	nop
 8000c42:	4b08      	ldr	r3, [pc, #32]	; (8000c64 <SPI_TxBuffer+0x30>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	689b      	ldr	r3, [r3, #8]
 8000c48:	f003 0302 	and.w	r3, r3, #2
 8000c4c:	2b02      	cmp	r3, #2
 8000c4e:	d1f8      	bne.n	8000c42 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000c50:	887a      	ldrh	r2, [r7, #2]
 8000c52:	2364      	movs	r3, #100	; 0x64
 8000c54:	6879      	ldr	r1, [r7, #4]
 8000c56:	4803      	ldr	r0, [pc, #12]	; (8000c64 <SPI_TxBuffer+0x30>)
 8000c58:	f002 ffcf 	bl	8003bfa <HAL_SPI_Transmit>
}
 8000c5c:	bf00      	nop
 8000c5e:	3708      	adds	r7, #8
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	20000098 	.word	0x20000098

08000c68 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b084      	sub	sp, #16
 8000c6c:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8000c6e:	23ff      	movs	r3, #255	; 0xff
 8000c70:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000c72:	bf00      	nop
 8000c74:	4b09      	ldr	r3, [pc, #36]	; (8000c9c <SPI_RxByte+0x34>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	689b      	ldr	r3, [r3, #8]
 8000c7a:	f003 0302 	and.w	r3, r3, #2
 8000c7e:	2b02      	cmp	r3, #2
 8000c80:	d1f8      	bne.n	8000c74 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000c82:	1dba      	adds	r2, r7, #6
 8000c84:	1df9      	adds	r1, r7, #7
 8000c86:	2364      	movs	r3, #100	; 0x64
 8000c88:	9300      	str	r3, [sp, #0]
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	4803      	ldr	r0, [pc, #12]	; (8000c9c <SPI_RxByte+0x34>)
 8000c8e:	f003 f922 	bl	8003ed6 <HAL_SPI_TransmitReceive>

	return data;
 8000c92:	79bb      	ldrb	r3, [r7, #6]
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	3708      	adds	r7, #8
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	20000098 	.word	0x20000098

08000ca0 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8000ca8:	f7ff ffde 	bl	8000c68 <SPI_RxByte>
 8000cac:	4603      	mov	r3, r0
 8000cae:	461a      	mov	r2, r3
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	701a      	strb	r2, [r3, #0]
}
 8000cb4:	bf00      	nop
 8000cb6:	3708      	adds	r7, #8
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}

08000cbc <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8000cc2:	4b0a      	ldr	r3, [pc, #40]	; (8000cec <SD_ReadyWait+0x30>)
 8000cc4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000cc8:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8000cca:	f7ff ffcd 	bl	8000c68 <SPI_RxByte>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8000cd2:	79fb      	ldrb	r3, [r7, #7]
 8000cd4:	2bff      	cmp	r3, #255	; 0xff
 8000cd6:	d003      	beq.n	8000ce0 <SD_ReadyWait+0x24>
 8000cd8:	4b04      	ldr	r3, [pc, #16]	; (8000cec <SD_ReadyWait+0x30>)
 8000cda:	881b      	ldrh	r3, [r3, #0]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d1f4      	bne.n	8000cca <SD_ReadyWait+0xe>

	return res;
 8000ce0:	79fb      	ldrb	r3, [r7, #7]
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	3708      	adds	r7, #8
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	20000092 	.word	0x20000092

08000cf0 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b084      	sub	sp, #16
 8000cf4:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8000cf6:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000cfa:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8000cfc:	f7ff ff72 	bl	8000be4 <DESELECT>
	for(int i = 0; i < 10; i++)
 8000d00:	2300      	movs	r3, #0
 8000d02:	60bb      	str	r3, [r7, #8]
 8000d04:	e005      	b.n	8000d12 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8000d06:	20ff      	movs	r0, #255	; 0xff
 8000d08:	f7ff ff7a 	bl	8000c00 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8000d0c:	68bb      	ldr	r3, [r7, #8]
 8000d0e:	3301      	adds	r3, #1
 8000d10:	60bb      	str	r3, [r7, #8]
 8000d12:	68bb      	ldr	r3, [r7, #8]
 8000d14:	2b09      	cmp	r3, #9
 8000d16:	ddf6      	ble.n	8000d06 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8000d18:	f7ff ff56 	bl	8000bc8 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8000d1c:	2340      	movs	r3, #64	; 0x40
 8000d1e:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8000d20:	2300      	movs	r3, #0
 8000d22:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8000d24:	2300      	movs	r3, #0
 8000d26:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8000d30:	2395      	movs	r3, #149	; 0x95
 8000d32:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8000d34:	463b      	mov	r3, r7
 8000d36:	2106      	movs	r1, #6
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f7ff ff7b 	bl	8000c34 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8000d3e:	e002      	b.n	8000d46 <SD_PowerOn+0x56>
	{
		cnt--;
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	3b01      	subs	r3, #1
 8000d44:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8000d46:	f7ff ff8f 	bl	8000c68 <SPI_RxByte>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b01      	cmp	r3, #1
 8000d4e:	d002      	beq.n	8000d56 <SD_PowerOn+0x66>
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d1f4      	bne.n	8000d40 <SD_PowerOn+0x50>
	}

	DESELECT();
 8000d56:	f7ff ff45 	bl	8000be4 <DESELECT>
	SPI_TxByte(0XFF);
 8000d5a:	20ff      	movs	r0, #255	; 0xff
 8000d5c:	f7ff ff50 	bl	8000c00 <SPI_TxByte>

	PowerFlag = 1;
 8000d60:	4b03      	ldr	r3, [pc, #12]	; (8000d70 <SD_PowerOn+0x80>)
 8000d62:	2201      	movs	r2, #1
 8000d64:	701a      	strb	r2, [r3, #0]
}
 8000d66:	bf00      	nop
 8000d68:	3710      	adds	r7, #16
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	20000095 	.word	0x20000095

08000d74 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8000d78:	4b03      	ldr	r3, [pc, #12]	; (8000d88 <SD_PowerOff+0x14>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	701a      	strb	r2, [r3, #0]
}
 8000d7e:	bf00      	nop
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr
 8000d88:	20000095 	.word	0x20000095

08000d8c <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
	return PowerFlag;
 8000d90:	4b03      	ldr	r3, [pc, #12]	; (8000da0 <SD_CheckPower+0x14>)
 8000d92:	781b      	ldrb	r3, [r3, #0]
}
 8000d94:	4618      	mov	r0, r3
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	20000095 	.word	0x20000095

08000da4 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b084      	sub	sp, #16
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
 8000dac:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8000dae:	4b13      	ldr	r3, [pc, #76]	; (8000dfc <SD_RxDataBlock+0x58>)
 8000db0:	22c8      	movs	r2, #200	; 0xc8
 8000db2:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8000db4:	f7ff ff58 	bl	8000c68 <SPI_RxByte>
 8000db8:	4603      	mov	r3, r0
 8000dba:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8000dbc:	7bfb      	ldrb	r3, [r7, #15]
 8000dbe:	2bff      	cmp	r3, #255	; 0xff
 8000dc0:	d103      	bne.n	8000dca <SD_RxDataBlock+0x26>
 8000dc2:	4b0e      	ldr	r3, [pc, #56]	; (8000dfc <SD_RxDataBlock+0x58>)
 8000dc4:	881b      	ldrh	r3, [r3, #0]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d1f4      	bne.n	8000db4 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8000dca:	7bfb      	ldrb	r3, [r7, #15]
 8000dcc:	2bfe      	cmp	r3, #254	; 0xfe
 8000dce:	d001      	beq.n	8000dd4 <SD_RxDataBlock+0x30>
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	e00f      	b.n	8000df4 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	1c5a      	adds	r2, r3, #1
 8000dd8:	607a      	str	r2, [r7, #4]
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f7ff ff60 	bl	8000ca0 <SPI_RxBytePtr>
	} while(len--);
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	1e5a      	subs	r2, r3, #1
 8000de4:	603a      	str	r2, [r7, #0]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d1f4      	bne.n	8000dd4 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 8000dea:	f7ff ff3d 	bl	8000c68 <SPI_RxByte>
	SPI_RxByte();
 8000dee:	f7ff ff3b 	bl	8000c68 <SPI_RxByte>

	return TRUE;
 8000df2:	2301      	movs	r3, #1
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	3710      	adds	r7, #16
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	20000090 	.word	0x20000090

08000e00 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b084      	sub	sp, #16
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
 8000e08:	460b      	mov	r3, r1
 8000e0a:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8000e10:	f7ff ff54 	bl	8000cbc <SD_ReadyWait>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2bff      	cmp	r3, #255	; 0xff
 8000e18:	d001      	beq.n	8000e1e <SD_TxDataBlock+0x1e>
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	e02f      	b.n	8000e7e <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8000e1e:	78fb      	ldrb	r3, [r7, #3]
 8000e20:	4618      	mov	r0, r3
 8000e22:	f7ff feed 	bl	8000c00 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8000e26:	78fb      	ldrb	r3, [r7, #3]
 8000e28:	2bfd      	cmp	r3, #253	; 0xfd
 8000e2a:	d020      	beq.n	8000e6e <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8000e2c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e30:	6878      	ldr	r0, [r7, #4]
 8000e32:	f7ff feff 	bl	8000c34 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8000e36:	f7ff ff17 	bl	8000c68 <SPI_RxByte>
		SPI_RxByte();
 8000e3a:	f7ff ff15 	bl	8000c68 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8000e3e:	e00b      	b.n	8000e58 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8000e40:	f7ff ff12 	bl	8000c68 <SPI_RxByte>
 8000e44:	4603      	mov	r3, r0
 8000e46:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8000e48:	7bfb      	ldrb	r3, [r7, #15]
 8000e4a:	f003 031f 	and.w	r3, r3, #31
 8000e4e:	2b05      	cmp	r3, #5
 8000e50:	d006      	beq.n	8000e60 <SD_TxDataBlock+0x60>
			i++;
 8000e52:	7bbb      	ldrb	r3, [r7, #14]
 8000e54:	3301      	adds	r3, #1
 8000e56:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8000e58:	7bbb      	ldrb	r3, [r7, #14]
 8000e5a:	2b40      	cmp	r3, #64	; 0x40
 8000e5c:	d9f0      	bls.n	8000e40 <SD_TxDataBlock+0x40>
 8000e5e:	e000      	b.n	8000e62 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8000e60:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8000e62:	bf00      	nop
 8000e64:	f7ff ff00 	bl	8000c68 <SPI_RxByte>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d0fa      	beq.n	8000e64 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8000e6e:	7bfb      	ldrb	r3, [r7, #15]
 8000e70:	f003 031f 	and.w	r3, r3, #31
 8000e74:	2b05      	cmp	r3, #5
 8000e76:	d101      	bne.n	8000e7c <SD_TxDataBlock+0x7c>
 8000e78:	2301      	movs	r3, #1
 8000e7a:	e000      	b.n	8000e7e <SD_TxDataBlock+0x7e>

	return FALSE;
 8000e7c:	2300      	movs	r3, #0
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3710      	adds	r7, #16
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}

08000e86 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8000e86:	b580      	push	{r7, lr}
 8000e88:	b084      	sub	sp, #16
 8000e8a:	af00      	add	r7, sp, #0
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	6039      	str	r1, [r7, #0]
 8000e90:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8000e92:	f7ff ff13 	bl	8000cbc <SD_ReadyWait>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2bff      	cmp	r3, #255	; 0xff
 8000e9a:	d001      	beq.n	8000ea0 <SD_SendCmd+0x1a>
 8000e9c:	23ff      	movs	r3, #255	; 0xff
 8000e9e:	e042      	b.n	8000f26 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8000ea0:	79fb      	ldrb	r3, [r7, #7]
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f7ff feac 	bl	8000c00 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	0e1b      	lsrs	r3, r3, #24
 8000eac:	b2db      	uxtb	r3, r3
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f7ff fea6 	bl	8000c00 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	0c1b      	lsrs	r3, r3, #16
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f7ff fea0 	bl	8000c00 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	0a1b      	lsrs	r3, r3, #8
 8000ec4:	b2db      	uxtb	r3, r3
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f7ff fe9a 	bl	8000c00 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	b2db      	uxtb	r3, r3
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f7ff fe95 	bl	8000c00 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8000ed6:	79fb      	ldrb	r3, [r7, #7]
 8000ed8:	2b40      	cmp	r3, #64	; 0x40
 8000eda:	d102      	bne.n	8000ee2 <SD_SendCmd+0x5c>
 8000edc:	2395      	movs	r3, #149	; 0x95
 8000ede:	73fb      	strb	r3, [r7, #15]
 8000ee0:	e007      	b.n	8000ef2 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8000ee2:	79fb      	ldrb	r3, [r7, #7]
 8000ee4:	2b48      	cmp	r3, #72	; 0x48
 8000ee6:	d102      	bne.n	8000eee <SD_SendCmd+0x68>
 8000ee8:	2387      	movs	r3, #135	; 0x87
 8000eea:	73fb      	strb	r3, [r7, #15]
 8000eec:	e001      	b.n	8000ef2 <SD_SendCmd+0x6c>
	else crc = 1;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8000ef2:	7bfb      	ldrb	r3, [r7, #15]
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f7ff fe83 	bl	8000c00 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8000efa:	79fb      	ldrb	r3, [r7, #7]
 8000efc:	2b4c      	cmp	r3, #76	; 0x4c
 8000efe:	d101      	bne.n	8000f04 <SD_SendCmd+0x7e>
 8000f00:	f7ff feb2 	bl	8000c68 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8000f04:	230a      	movs	r3, #10
 8000f06:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8000f08:	f7ff feae 	bl	8000c68 <SPI_RxByte>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8000f10:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	da05      	bge.n	8000f24 <SD_SendCmd+0x9e>
 8000f18:	7bbb      	ldrb	r3, [r7, #14]
 8000f1a:	3b01      	subs	r3, #1
 8000f1c:	73bb      	strb	r3, [r7, #14]
 8000f1e:	7bbb      	ldrb	r3, [r7, #14]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d1f1      	bne.n	8000f08 <SD_SendCmd+0x82>

	return res;
 8000f24:	7b7b      	ldrb	r3, [r7, #13]
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	3710      	adds	r7, #16
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
	...

08000f30 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8000f30:	b590      	push	{r4, r7, lr}
 8000f32:	b085      	sub	sp, #20
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	4603      	mov	r3, r0
 8000f38:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8000f3a:	79fb      	ldrb	r3, [r7, #7]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <SD_disk_initialize+0x14>
 8000f40:	2301      	movs	r3, #1
 8000f42:	e0d1      	b.n	80010e8 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8000f44:	4b6a      	ldr	r3, [pc, #424]	; (80010f0 <SD_disk_initialize+0x1c0>)
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	b2db      	uxtb	r3, r3
 8000f4a:	f003 0302 	and.w	r3, r3, #2
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d003      	beq.n	8000f5a <SD_disk_initialize+0x2a>
 8000f52:	4b67      	ldr	r3, [pc, #412]	; (80010f0 <SD_disk_initialize+0x1c0>)
 8000f54:	781b      	ldrb	r3, [r3, #0]
 8000f56:	b2db      	uxtb	r3, r3
 8000f58:	e0c6      	b.n	80010e8 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 8000f5a:	f7ff fec9 	bl	8000cf0 <SD_PowerOn>

	/* slave select */
	SELECT();
 8000f5e:	f7ff fe33 	bl	8000bc8 <SELECT>

	/* check disk type */
	type = 0;
 8000f62:	2300      	movs	r3, #0
 8000f64:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8000f66:	2100      	movs	r1, #0
 8000f68:	2040      	movs	r0, #64	; 0x40
 8000f6a:	f7ff ff8c 	bl	8000e86 <SD_SendCmd>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b01      	cmp	r3, #1
 8000f72:	f040 80a1 	bne.w	80010b8 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8000f76:	4b5f      	ldr	r3, [pc, #380]	; (80010f4 <SD_disk_initialize+0x1c4>)
 8000f78:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f7c:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8000f7e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8000f82:	2048      	movs	r0, #72	; 0x48
 8000f84:	f7ff ff7f 	bl	8000e86 <SD_SendCmd>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b01      	cmp	r3, #1
 8000f8c:	d155      	bne.n	800103a <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8000f8e:	2300      	movs	r3, #0
 8000f90:	73fb      	strb	r3, [r7, #15]
 8000f92:	e00c      	b.n	8000fae <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8000f94:	7bfc      	ldrb	r4, [r7, #15]
 8000f96:	f7ff fe67 	bl	8000c68 <SPI_RxByte>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	461a      	mov	r2, r3
 8000f9e:	f104 0310 	add.w	r3, r4, #16
 8000fa2:	443b      	add	r3, r7
 8000fa4:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8000fa8:	7bfb      	ldrb	r3, [r7, #15]
 8000faa:	3301      	adds	r3, #1
 8000fac:	73fb      	strb	r3, [r7, #15]
 8000fae:	7bfb      	ldrb	r3, [r7, #15]
 8000fb0:	2b03      	cmp	r3, #3
 8000fb2:	d9ef      	bls.n	8000f94 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8000fb4:	7abb      	ldrb	r3, [r7, #10]
 8000fb6:	2b01      	cmp	r3, #1
 8000fb8:	d17e      	bne.n	80010b8 <SD_disk_initialize+0x188>
 8000fba:	7afb      	ldrb	r3, [r7, #11]
 8000fbc:	2baa      	cmp	r3, #170	; 0xaa
 8000fbe:	d17b      	bne.n	80010b8 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	2077      	movs	r0, #119	; 0x77
 8000fc4:	f7ff ff5f 	bl	8000e86 <SD_SendCmd>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b01      	cmp	r3, #1
 8000fcc:	d807      	bhi.n	8000fde <SD_disk_initialize+0xae>
 8000fce:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000fd2:	2069      	movs	r0, #105	; 0x69
 8000fd4:	f7ff ff57 	bl	8000e86 <SD_SendCmd>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d004      	beq.n	8000fe8 <SD_disk_initialize+0xb8>
				} while (Timer1);
 8000fde:	4b45      	ldr	r3, [pc, #276]	; (80010f4 <SD_disk_initialize+0x1c4>)
 8000fe0:	881b      	ldrh	r3, [r3, #0]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d1ec      	bne.n	8000fc0 <SD_disk_initialize+0x90>
 8000fe6:	e000      	b.n	8000fea <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000fe8:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8000fea:	4b42      	ldr	r3, [pc, #264]	; (80010f4 <SD_disk_initialize+0x1c4>)
 8000fec:	881b      	ldrh	r3, [r3, #0]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d062      	beq.n	80010b8 <SD_disk_initialize+0x188>
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	207a      	movs	r0, #122	; 0x7a
 8000ff6:	f7ff ff46 	bl	8000e86 <SD_SendCmd>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d15b      	bne.n	80010b8 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8001000:	2300      	movs	r3, #0
 8001002:	73fb      	strb	r3, [r7, #15]
 8001004:	e00c      	b.n	8001020 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 8001006:	7bfc      	ldrb	r4, [r7, #15]
 8001008:	f7ff fe2e 	bl	8000c68 <SPI_RxByte>
 800100c:	4603      	mov	r3, r0
 800100e:	461a      	mov	r2, r3
 8001010:	f104 0310 	add.w	r3, r4, #16
 8001014:	443b      	add	r3, r7
 8001016:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 800101a:	7bfb      	ldrb	r3, [r7, #15]
 800101c:	3301      	adds	r3, #1
 800101e:	73fb      	strb	r3, [r7, #15]
 8001020:	7bfb      	ldrb	r3, [r7, #15]
 8001022:	2b03      	cmp	r3, #3
 8001024:	d9ef      	bls.n	8001006 <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8001026:	7a3b      	ldrb	r3, [r7, #8]
 8001028:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <SD_disk_initialize+0x104>
 8001030:	230c      	movs	r3, #12
 8001032:	e000      	b.n	8001036 <SD_disk_initialize+0x106>
 8001034:	2304      	movs	r3, #4
 8001036:	73bb      	strb	r3, [r7, #14]
 8001038:	e03e      	b.n	80010b8 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 800103a:	2100      	movs	r1, #0
 800103c:	2077      	movs	r0, #119	; 0x77
 800103e:	f7ff ff22 	bl	8000e86 <SD_SendCmd>
 8001042:	4603      	mov	r3, r0
 8001044:	2b01      	cmp	r3, #1
 8001046:	d808      	bhi.n	800105a <SD_disk_initialize+0x12a>
 8001048:	2100      	movs	r1, #0
 800104a:	2069      	movs	r0, #105	; 0x69
 800104c:	f7ff ff1b 	bl	8000e86 <SD_SendCmd>
 8001050:	4603      	mov	r3, r0
 8001052:	2b01      	cmp	r3, #1
 8001054:	d801      	bhi.n	800105a <SD_disk_initialize+0x12a>
 8001056:	2302      	movs	r3, #2
 8001058:	e000      	b.n	800105c <SD_disk_initialize+0x12c>
 800105a:	2301      	movs	r3, #1
 800105c:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 800105e:	7bbb      	ldrb	r3, [r7, #14]
 8001060:	2b02      	cmp	r3, #2
 8001062:	d10e      	bne.n	8001082 <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8001064:	2100      	movs	r1, #0
 8001066:	2077      	movs	r0, #119	; 0x77
 8001068:	f7ff ff0d 	bl	8000e86 <SD_SendCmd>
 800106c:	4603      	mov	r3, r0
 800106e:	2b01      	cmp	r3, #1
 8001070:	d80e      	bhi.n	8001090 <SD_disk_initialize+0x160>
 8001072:	2100      	movs	r1, #0
 8001074:	2069      	movs	r0, #105	; 0x69
 8001076:	f7ff ff06 	bl	8000e86 <SD_SendCmd>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d107      	bne.n	8001090 <SD_disk_initialize+0x160>
 8001080:	e00c      	b.n	800109c <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001082:	2100      	movs	r1, #0
 8001084:	2041      	movs	r0, #65	; 0x41
 8001086:	f7ff fefe 	bl	8000e86 <SD_SendCmd>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d004      	beq.n	800109a <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 8001090:	4b18      	ldr	r3, [pc, #96]	; (80010f4 <SD_disk_initialize+0x1c4>)
 8001092:	881b      	ldrh	r3, [r3, #0]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d1e2      	bne.n	800105e <SD_disk_initialize+0x12e>
 8001098:	e000      	b.n	800109c <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800109a:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 800109c:	4b15      	ldr	r3, [pc, #84]	; (80010f4 <SD_disk_initialize+0x1c4>)
 800109e:	881b      	ldrh	r3, [r3, #0]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d007      	beq.n	80010b4 <SD_disk_initialize+0x184>
 80010a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010a8:	2050      	movs	r0, #80	; 0x50
 80010aa:	f7ff feec 	bl	8000e86 <SD_SendCmd>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <SD_disk_initialize+0x188>
 80010b4:	2300      	movs	r3, #0
 80010b6:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 80010b8:	4a0f      	ldr	r2, [pc, #60]	; (80010f8 <SD_disk_initialize+0x1c8>)
 80010ba:	7bbb      	ldrb	r3, [r7, #14]
 80010bc:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 80010be:	f7ff fd91 	bl	8000be4 <DESELECT>
	SPI_RxByte();
 80010c2:	f7ff fdd1 	bl	8000c68 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 80010c6:	7bbb      	ldrb	r3, [r7, #14]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d008      	beq.n	80010de <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 80010cc:	4b08      	ldr	r3, [pc, #32]	; (80010f0 <SD_disk_initialize+0x1c0>)
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	f023 0301 	bic.w	r3, r3, #1
 80010d6:	b2da      	uxtb	r2, r3
 80010d8:	4b05      	ldr	r3, [pc, #20]	; (80010f0 <SD_disk_initialize+0x1c0>)
 80010da:	701a      	strb	r2, [r3, #0]
 80010dc:	e001      	b.n	80010e2 <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 80010de:	f7ff fe49 	bl	8000d74 <SD_PowerOff>
	}

	return Stat;
 80010e2:	4b03      	ldr	r3, [pc, #12]	; (80010f0 <SD_disk_initialize+0x1c0>)
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	b2db      	uxtb	r3, r3
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	3714      	adds	r7, #20
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd90      	pop	{r4, r7, pc}
 80010f0:	20000000 	.word	0x20000000
 80010f4:	20000090 	.word	0x20000090
 80010f8:	20000094 	.word	0x20000094

080010fc <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
 8001102:	4603      	mov	r3, r0
 8001104:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8001106:	79fb      	ldrb	r3, [r7, #7]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <SD_disk_status+0x14>
 800110c:	2301      	movs	r3, #1
 800110e:	e002      	b.n	8001116 <SD_disk_status+0x1a>
	return Stat;
 8001110:	4b04      	ldr	r3, [pc, #16]	; (8001124 <SD_disk_status+0x28>)
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	b2db      	uxtb	r3, r3
}
 8001116:	4618      	mov	r0, r3
 8001118:	370c      	adds	r7, #12
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	20000000 	.word	0x20000000

08001128 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b084      	sub	sp, #16
 800112c:	af00      	add	r7, sp, #0
 800112e:	60b9      	str	r1, [r7, #8]
 8001130:	607a      	str	r2, [r7, #4]
 8001132:	603b      	str	r3, [r7, #0]
 8001134:	4603      	mov	r3, r0
 8001136:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001138:	7bfb      	ldrb	r3, [r7, #15]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d102      	bne.n	8001144 <SD_disk_read+0x1c>
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d101      	bne.n	8001148 <SD_disk_read+0x20>
 8001144:	2304      	movs	r3, #4
 8001146:	e051      	b.n	80011ec <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001148:	4b2a      	ldr	r3, [pc, #168]	; (80011f4 <SD_disk_read+0xcc>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	b2db      	uxtb	r3, r3
 800114e:	f003 0301 	and.w	r3, r3, #1
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <SD_disk_read+0x32>
 8001156:	2303      	movs	r3, #3
 8001158:	e048      	b.n	80011ec <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 800115a:	4b27      	ldr	r3, [pc, #156]	; (80011f8 <SD_disk_read+0xd0>)
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	f003 0304 	and.w	r3, r3, #4
 8001162:	2b00      	cmp	r3, #0
 8001164:	d102      	bne.n	800116c <SD_disk_read+0x44>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	025b      	lsls	r3, r3, #9
 800116a:	607b      	str	r3, [r7, #4]

	SELECT();
 800116c:	f7ff fd2c 	bl	8000bc8 <SELECT>

	if (count == 1)
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	2b01      	cmp	r3, #1
 8001174:	d111      	bne.n	800119a <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8001176:	6879      	ldr	r1, [r7, #4]
 8001178:	2051      	movs	r0, #81	; 0x51
 800117a:	f7ff fe84 	bl	8000e86 <SD_SendCmd>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d129      	bne.n	80011d8 <SD_disk_read+0xb0>
 8001184:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001188:	68b8      	ldr	r0, [r7, #8]
 800118a:	f7ff fe0b 	bl	8000da4 <SD_RxDataBlock>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d021      	beq.n	80011d8 <SD_disk_read+0xb0>
 8001194:	2300      	movs	r3, #0
 8001196:	603b      	str	r3, [r7, #0]
 8001198:	e01e      	b.n	80011d8 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 800119a:	6879      	ldr	r1, [r7, #4]
 800119c:	2052      	movs	r0, #82	; 0x52
 800119e:	f7ff fe72 	bl	8000e86 <SD_SendCmd>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d117      	bne.n	80011d8 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 80011a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011ac:	68b8      	ldr	r0, [r7, #8]
 80011ae:	f7ff fdf9 	bl	8000da4 <SD_RxDataBlock>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d00a      	beq.n	80011ce <SD_disk_read+0xa6>
				buff += 512;
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80011be:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	3b01      	subs	r3, #1
 80011c4:	603b      	str	r3, [r7, #0]
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d1ed      	bne.n	80011a8 <SD_disk_read+0x80>
 80011cc:	e000      	b.n	80011d0 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 80011ce:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 80011d0:	2100      	movs	r1, #0
 80011d2:	204c      	movs	r0, #76	; 0x4c
 80011d4:	f7ff fe57 	bl	8000e86 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 80011d8:	f7ff fd04 	bl	8000be4 <DESELECT>
	SPI_RxByte();
 80011dc:	f7ff fd44 	bl	8000c68 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	bf14      	ite	ne
 80011e6:	2301      	movne	r3, #1
 80011e8:	2300      	moveq	r3, #0
 80011ea:	b2db      	uxtb	r3, r3
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	3710      	adds	r7, #16
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	20000000 	.word	0x20000000
 80011f8:	20000094 	.word	0x20000094

080011fc <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b084      	sub	sp, #16
 8001200:	af00      	add	r7, sp, #0
 8001202:	60b9      	str	r1, [r7, #8]
 8001204:	607a      	str	r2, [r7, #4]
 8001206:	603b      	str	r3, [r7, #0]
 8001208:	4603      	mov	r3, r0
 800120a:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 800120c:	7bfb      	ldrb	r3, [r7, #15]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d102      	bne.n	8001218 <SD_disk_write+0x1c>
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d101      	bne.n	800121c <SD_disk_write+0x20>
 8001218:	2304      	movs	r3, #4
 800121a:	e06b      	b.n	80012f4 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 800121c:	4b37      	ldr	r3, [pc, #220]	; (80012fc <SD_disk_write+0x100>)
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	b2db      	uxtb	r3, r3
 8001222:	f003 0301 	and.w	r3, r3, #1
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <SD_disk_write+0x32>
 800122a:	2303      	movs	r3, #3
 800122c:	e062      	b.n	80012f4 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 800122e:	4b33      	ldr	r3, [pc, #204]	; (80012fc <SD_disk_write+0x100>)
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	b2db      	uxtb	r3, r3
 8001234:	f003 0304 	and.w	r3, r3, #4
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <SD_disk_write+0x44>
 800123c:	2302      	movs	r3, #2
 800123e:	e059      	b.n	80012f4 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8001240:	4b2f      	ldr	r3, [pc, #188]	; (8001300 <SD_disk_write+0x104>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	f003 0304 	and.w	r3, r3, #4
 8001248:	2b00      	cmp	r3, #0
 800124a:	d102      	bne.n	8001252 <SD_disk_write+0x56>
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	025b      	lsls	r3, r3, #9
 8001250:	607b      	str	r3, [r7, #4]

	SELECT();
 8001252:	f7ff fcb9 	bl	8000bc8 <SELECT>

	if (count == 1)
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	2b01      	cmp	r3, #1
 800125a:	d110      	bne.n	800127e <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 800125c:	6879      	ldr	r1, [r7, #4]
 800125e:	2058      	movs	r0, #88	; 0x58
 8001260:	f7ff fe11 	bl	8000e86 <SD_SendCmd>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d13a      	bne.n	80012e0 <SD_disk_write+0xe4>
 800126a:	21fe      	movs	r1, #254	; 0xfe
 800126c:	68b8      	ldr	r0, [r7, #8]
 800126e:	f7ff fdc7 	bl	8000e00 <SD_TxDataBlock>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d033      	beq.n	80012e0 <SD_disk_write+0xe4>
			count = 0;
 8001278:	2300      	movs	r3, #0
 800127a:	603b      	str	r3, [r7, #0]
 800127c:	e030      	b.n	80012e0 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 800127e:	4b20      	ldr	r3, [pc, #128]	; (8001300 <SD_disk_write+0x104>)
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	f003 0302 	and.w	r3, r3, #2
 8001286:	2b00      	cmp	r3, #0
 8001288:	d007      	beq.n	800129a <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 800128a:	2100      	movs	r1, #0
 800128c:	2077      	movs	r0, #119	; 0x77
 800128e:	f7ff fdfa 	bl	8000e86 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8001292:	6839      	ldr	r1, [r7, #0]
 8001294:	2057      	movs	r0, #87	; 0x57
 8001296:	f7ff fdf6 	bl	8000e86 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 800129a:	6879      	ldr	r1, [r7, #4]
 800129c:	2059      	movs	r0, #89	; 0x59
 800129e:	f7ff fdf2 	bl	8000e86 <SD_SendCmd>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d11b      	bne.n	80012e0 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 80012a8:	21fc      	movs	r1, #252	; 0xfc
 80012aa:	68b8      	ldr	r0, [r7, #8]
 80012ac:	f7ff fda8 	bl	8000e00 <SD_TxDataBlock>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d00a      	beq.n	80012cc <SD_disk_write+0xd0>
				buff += 512;
 80012b6:	68bb      	ldr	r3, [r7, #8]
 80012b8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80012bc:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	3b01      	subs	r3, #1
 80012c2:	603b      	str	r3, [r7, #0]
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d1ee      	bne.n	80012a8 <SD_disk_write+0xac>
 80012ca:	e000      	b.n	80012ce <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 80012cc:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 80012ce:	21fd      	movs	r1, #253	; 0xfd
 80012d0:	2000      	movs	r0, #0
 80012d2:	f7ff fd95 	bl	8000e00 <SD_TxDataBlock>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d101      	bne.n	80012e0 <SD_disk_write+0xe4>
			{
				count = 1;
 80012dc:	2301      	movs	r3, #1
 80012de:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 80012e0:	f7ff fc80 	bl	8000be4 <DESELECT>
	SPI_RxByte();
 80012e4:	f7ff fcc0 	bl	8000c68 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	bf14      	ite	ne
 80012ee:	2301      	movne	r3, #1
 80012f0:	2300      	moveq	r3, #0
 80012f2:	b2db      	uxtb	r3, r3
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	3710      	adds	r7, #16
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	20000000 	.word	0x20000000
 8001300:	20000094 	.word	0x20000094

08001304 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8001304:	b590      	push	{r4, r7, lr}
 8001306:	b08b      	sub	sp, #44	; 0x2c
 8001308:	af00      	add	r7, sp, #0
 800130a:	4603      	mov	r3, r0
 800130c:	603a      	str	r2, [r7, #0]
 800130e:	71fb      	strb	r3, [r7, #7]
 8001310:	460b      	mov	r3, r1
 8001312:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8001318:	79fb      	ldrb	r3, [r7, #7]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <SD_disk_ioctl+0x1e>
 800131e:	2304      	movs	r3, #4
 8001320:	e115      	b.n	800154e <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 8001322:	2301      	movs	r3, #1
 8001324:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8001328:	79bb      	ldrb	r3, [r7, #6]
 800132a:	2b05      	cmp	r3, #5
 800132c:	d124      	bne.n	8001378 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 800132e:	6a3b      	ldr	r3, [r7, #32]
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	2b02      	cmp	r3, #2
 8001334:	d012      	beq.n	800135c <SD_disk_ioctl+0x58>
 8001336:	2b02      	cmp	r3, #2
 8001338:	dc1a      	bgt.n	8001370 <SD_disk_ioctl+0x6c>
 800133a:	2b00      	cmp	r3, #0
 800133c:	d002      	beq.n	8001344 <SD_disk_ioctl+0x40>
 800133e:	2b01      	cmp	r3, #1
 8001340:	d006      	beq.n	8001350 <SD_disk_ioctl+0x4c>
 8001342:	e015      	b.n	8001370 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8001344:	f7ff fd16 	bl	8000d74 <SD_PowerOff>
			res = RES_OK;
 8001348:	2300      	movs	r3, #0
 800134a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800134e:	e0fc      	b.n	800154a <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 8001350:	f7ff fcce 	bl	8000cf0 <SD_PowerOn>
			res = RES_OK;
 8001354:	2300      	movs	r3, #0
 8001356:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800135a:	e0f6      	b.n	800154a <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 800135c:	6a3b      	ldr	r3, [r7, #32]
 800135e:	1c5c      	adds	r4, r3, #1
 8001360:	f7ff fd14 	bl	8000d8c <SD_CheckPower>
 8001364:	4603      	mov	r3, r0
 8001366:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8001368:	2300      	movs	r3, #0
 800136a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800136e:	e0ec      	b.n	800154a <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 8001370:	2304      	movs	r3, #4
 8001372:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001376:	e0e8      	b.n	800154a <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001378:	4b77      	ldr	r3, [pc, #476]	; (8001558 <SD_disk_ioctl+0x254>)
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	b2db      	uxtb	r3, r3
 800137e:	f003 0301 	and.w	r3, r3, #1
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <SD_disk_ioctl+0x86>
 8001386:	2303      	movs	r3, #3
 8001388:	e0e1      	b.n	800154e <SD_disk_ioctl+0x24a>

		SELECT();
 800138a:	f7ff fc1d 	bl	8000bc8 <SELECT>

		switch (ctrl)
 800138e:	79bb      	ldrb	r3, [r7, #6]
 8001390:	2b0d      	cmp	r3, #13
 8001392:	f200 80cb 	bhi.w	800152c <SD_disk_ioctl+0x228>
 8001396:	a201      	add	r2, pc, #4	; (adr r2, 800139c <SD_disk_ioctl+0x98>)
 8001398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800139c:	08001497 	.word	0x08001497
 80013a0:	080013d5 	.word	0x080013d5
 80013a4:	08001487 	.word	0x08001487
 80013a8:	0800152d 	.word	0x0800152d
 80013ac:	0800152d 	.word	0x0800152d
 80013b0:	0800152d 	.word	0x0800152d
 80013b4:	0800152d 	.word	0x0800152d
 80013b8:	0800152d 	.word	0x0800152d
 80013bc:	0800152d 	.word	0x0800152d
 80013c0:	0800152d 	.word	0x0800152d
 80013c4:	0800152d 	.word	0x0800152d
 80013c8:	080014a9 	.word	0x080014a9
 80013cc:	080014cd 	.word	0x080014cd
 80013d0:	080014f1 	.word	0x080014f1
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 80013d4:	2100      	movs	r1, #0
 80013d6:	2049      	movs	r0, #73	; 0x49
 80013d8:	f7ff fd55 	bl	8000e86 <SD_SendCmd>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	f040 80a8 	bne.w	8001534 <SD_disk_ioctl+0x230>
 80013e4:	f107 030c 	add.w	r3, r7, #12
 80013e8:	2110      	movs	r1, #16
 80013ea:	4618      	mov	r0, r3
 80013ec:	f7ff fcda 	bl	8000da4 <SD_RxDataBlock>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	f000 809e 	beq.w	8001534 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 80013f8:	7b3b      	ldrb	r3, [r7, #12]
 80013fa:	099b      	lsrs	r3, r3, #6
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	2b01      	cmp	r3, #1
 8001400:	d10e      	bne.n	8001420 <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8001402:	7d7b      	ldrb	r3, [r7, #21]
 8001404:	b29a      	uxth	r2, r3
 8001406:	7d3b      	ldrb	r3, [r7, #20]
 8001408:	b29b      	uxth	r3, r3
 800140a:	021b      	lsls	r3, r3, #8
 800140c:	b29b      	uxth	r3, r3
 800140e:	4413      	add	r3, r2
 8001410:	b29b      	uxth	r3, r3
 8001412:	3301      	adds	r3, #1
 8001414:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8001416:	8bfb      	ldrh	r3, [r7, #30]
 8001418:	029a      	lsls	r2, r3, #10
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	601a      	str	r2, [r3, #0]
 800141e:	e02e      	b.n	800147e <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001420:	7c7b      	ldrb	r3, [r7, #17]
 8001422:	f003 030f 	and.w	r3, r3, #15
 8001426:	b2da      	uxtb	r2, r3
 8001428:	7dbb      	ldrb	r3, [r7, #22]
 800142a:	09db      	lsrs	r3, r3, #7
 800142c:	b2db      	uxtb	r3, r3
 800142e:	4413      	add	r3, r2
 8001430:	b2da      	uxtb	r2, r3
 8001432:	7d7b      	ldrb	r3, [r7, #21]
 8001434:	005b      	lsls	r3, r3, #1
 8001436:	b2db      	uxtb	r3, r3
 8001438:	f003 0306 	and.w	r3, r3, #6
 800143c:	b2db      	uxtb	r3, r3
 800143e:	4413      	add	r3, r2
 8001440:	b2db      	uxtb	r3, r3
 8001442:	3302      	adds	r3, #2
 8001444:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001448:	7d3b      	ldrb	r3, [r7, #20]
 800144a:	099b      	lsrs	r3, r3, #6
 800144c:	b2db      	uxtb	r3, r3
 800144e:	b29a      	uxth	r2, r3
 8001450:	7cfb      	ldrb	r3, [r7, #19]
 8001452:	b29b      	uxth	r3, r3
 8001454:	009b      	lsls	r3, r3, #2
 8001456:	b29b      	uxth	r3, r3
 8001458:	4413      	add	r3, r2
 800145a:	b29a      	uxth	r2, r3
 800145c:	7cbb      	ldrb	r3, [r7, #18]
 800145e:	029b      	lsls	r3, r3, #10
 8001460:	b29b      	uxth	r3, r3
 8001462:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001466:	b29b      	uxth	r3, r3
 8001468:	4413      	add	r3, r2
 800146a:	b29b      	uxth	r3, r3
 800146c:	3301      	adds	r3, #1
 800146e:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8001470:	8bfa      	ldrh	r2, [r7, #30]
 8001472:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001476:	3b09      	subs	r3, #9
 8001478:	409a      	lsls	r2, r3
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 800147e:	2300      	movs	r3, #0
 8001480:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8001484:	e056      	b.n	8001534 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	f44f 7200 	mov.w	r2, #512	; 0x200
 800148c:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 800148e:	2300      	movs	r3, #0
 8001490:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001494:	e055      	b.n	8001542 <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8001496:	f7ff fc11 	bl	8000cbc <SD_ReadyWait>
 800149a:	4603      	mov	r3, r0
 800149c:	2bff      	cmp	r3, #255	; 0xff
 800149e:	d14b      	bne.n	8001538 <SD_disk_ioctl+0x234>
 80014a0:	2300      	movs	r3, #0
 80014a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80014a6:	e047      	b.n	8001538 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80014a8:	2100      	movs	r1, #0
 80014aa:	2049      	movs	r0, #73	; 0x49
 80014ac:	f7ff fceb 	bl	8000e86 <SD_SendCmd>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d142      	bne.n	800153c <SD_disk_ioctl+0x238>
 80014b6:	2110      	movs	r1, #16
 80014b8:	6a38      	ldr	r0, [r7, #32]
 80014ba:	f7ff fc73 	bl	8000da4 <SD_RxDataBlock>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d03b      	beq.n	800153c <SD_disk_ioctl+0x238>
 80014c4:	2300      	movs	r3, #0
 80014c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80014ca:	e037      	b.n	800153c <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80014cc:	2100      	movs	r1, #0
 80014ce:	204a      	movs	r0, #74	; 0x4a
 80014d0:	f7ff fcd9 	bl	8000e86 <SD_SendCmd>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d132      	bne.n	8001540 <SD_disk_ioctl+0x23c>
 80014da:	2110      	movs	r1, #16
 80014dc:	6a38      	ldr	r0, [r7, #32]
 80014de:	f7ff fc61 	bl	8000da4 <SD_RxDataBlock>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d02b      	beq.n	8001540 <SD_disk_ioctl+0x23c>
 80014e8:	2300      	movs	r3, #0
 80014ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80014ee:	e027      	b.n	8001540 <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 80014f0:	2100      	movs	r1, #0
 80014f2:	207a      	movs	r0, #122	; 0x7a
 80014f4:	f7ff fcc7 	bl	8000e86 <SD_SendCmd>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d116      	bne.n	800152c <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 80014fe:	2300      	movs	r3, #0
 8001500:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001504:	e00b      	b.n	800151e <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 8001506:	6a3c      	ldr	r4, [r7, #32]
 8001508:	1c63      	adds	r3, r4, #1
 800150a:	623b      	str	r3, [r7, #32]
 800150c:	f7ff fbac 	bl	8000c68 <SPI_RxByte>
 8001510:	4603      	mov	r3, r0
 8001512:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8001514:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001518:	3301      	adds	r3, #1
 800151a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800151e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001522:	2b03      	cmp	r3, #3
 8001524:	d9ef      	bls.n	8001506 <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 8001526:	2300      	movs	r3, #0
 8001528:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 800152c:	2304      	movs	r3, #4
 800152e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001532:	e006      	b.n	8001542 <SD_disk_ioctl+0x23e>
			break;
 8001534:	bf00      	nop
 8001536:	e004      	b.n	8001542 <SD_disk_ioctl+0x23e>
			break;
 8001538:	bf00      	nop
 800153a:	e002      	b.n	8001542 <SD_disk_ioctl+0x23e>
			break;
 800153c:	bf00      	nop
 800153e:	e000      	b.n	8001542 <SD_disk_ioctl+0x23e>
			break;
 8001540:	bf00      	nop
		}

		DESELECT();
 8001542:	f7ff fb4f 	bl	8000be4 <DESELECT>
		SPI_RxByte();
 8001546:	f7ff fb8f 	bl	8000c68 <SPI_RxByte>
	}

	return res;
 800154a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800154e:	4618      	mov	r0, r3
 8001550:	372c      	adds	r7, #44	; 0x2c
 8001552:	46bd      	mov	sp, r7
 8001554:	bd90      	pop	{r4, r7, pc}
 8001556:	bf00      	nop
 8001558:	20000000 	.word	0x20000000

0800155c <transmit_uart.0>:
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  void transmit_uart (char *string){
 800155c:	b580      	push	{r7, lr}
 800155e:	b084      	sub	sp, #16
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
 8001564:	f8c7 c000 	str.w	ip, [r7]
  	uint8_t len = strlen(string);
 8001568:	6878      	ldr	r0, [r7, #4]
 800156a:	f7fe fe51 	bl	8000210 <strlen>
 800156e:	4603      	mov	r3, r0
 8001570:	73fb      	strb	r3, [r7, #15]
  	HAL_UART_Transmit(&huart3, (uint8_t*) string, len, 200);
 8001572:	7bfb      	ldrb	r3, [r7, #15]
 8001574:	b29a      	uxth	r2, r3
 8001576:	23c8      	movs	r3, #200	; 0xc8
 8001578:	6879      	ldr	r1, [r7, #4]
 800157a:	4803      	ldr	r0, [pc, #12]	; (8001588 <transmit_uart.0+0x2c>)
 800157c:	f003 f894 	bl	80046a8 <HAL_UART_Transmit>
  }
 8001580:	bf00      	nop
 8001582:	3710      	adds	r7, #16
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	200021dc 	.word	0x200021dc

0800158c <main>:
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b09e      	sub	sp, #120	; 0x78
 8001590:	af00      	add	r7, sp, #0
int main(void)
 8001592:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001596:	673b      	str	r3, [r7, #112]	; 0x70
  HAL_Init();
 8001598:	f000 fd39 	bl	800200e <HAL_Init>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800159c:	f000 f980 	bl	80018a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015a0:	f000 fa82 	bl	8001aa8 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80015a4:	f000 fa22 	bl	80019ec <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80015a8:	f000 fa50 	bl	8001a4c <MX_USB_OTG_FS_PCD_Init>
  MX_SPI1_Init();
 80015ac:	f000 f9e0 	bl	8001970 <MX_SPI1_Init>
  MX_FATFS_Init();
 80015b0:	f003 fff6 	bl	80055a0 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  /* Waiting for the Micro SD module to initialize */
  HAL_Delay(500);
 80015b4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80015b8:	f000 fd86 	bl	80020c8 <HAL_Delay>

  fres = f_mount(&fs, "", 0);
 80015bc:	2200      	movs	r2, #0
 80015be:	499d      	ldr	r1, [pc, #628]	; (8001834 <main+0x2a8>)
 80015c0:	489d      	ldr	r0, [pc, #628]	; (8001838 <main+0x2ac>)
 80015c2:	f006 fa35 	bl	8007a30 <f_mount>
 80015c6:	4603      	mov	r3, r0
 80015c8:	461a      	mov	r2, r3
 80015ca:	4b9c      	ldr	r3, [pc, #624]	; (800183c <main+0x2b0>)
 80015cc:	701a      	strb	r2, [r3, #0]
  if (fres == FR_OK) {
 80015ce:	4b9b      	ldr	r3, [pc, #620]	; (800183c <main+0x2b0>)
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d106      	bne.n	80015e4 <main+0x58>
	  transmit_uart("Micro SD card is mounted successfully!\n");
 80015d6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80015da:	469c      	mov	ip, r3
 80015dc:	4898      	ldr	r0, [pc, #608]	; (8001840 <main+0x2b4>)
 80015de:	f7ff ffbd 	bl	800155c <transmit_uart.0>
 80015e2:	e009      	b.n	80015f8 <main+0x6c>
  } else if (fres != FR_OK) {
 80015e4:	4b95      	ldr	r3, [pc, #596]	; (800183c <main+0x2b0>)
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d005      	beq.n	80015f8 <main+0x6c>
	  transmit_uart("Micro SD card's mount error!\n");
 80015ec:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80015f0:	469c      	mov	ip, r3
 80015f2:	4894      	ldr	r0, [pc, #592]	; (8001844 <main+0x2b8>)
 80015f4:	f7ff ffb2 	bl	800155c <transmit_uart.0>
  }

// FA_OPEN_APPEND opens file if it exists and if not then creates it,
// the pointer is set at the end of the file for appending
  fres = f_open(&fil, "log-file.txt", FA_OPEN_APPEND | FA_WRITE | FA_READ);
 80015f8:	2233      	movs	r2, #51	; 0x33
 80015fa:	4993      	ldr	r1, [pc, #588]	; (8001848 <main+0x2bc>)
 80015fc:	4893      	ldr	r0, [pc, #588]	; (800184c <main+0x2c0>)
 80015fe:	f006 fa5d 	bl	8007abc <f_open>
 8001602:	4603      	mov	r3, r0
 8001604:	461a      	mov	r2, r3
 8001606:	4b8d      	ldr	r3, [pc, #564]	; (800183c <main+0x2b0>)
 8001608:	701a      	strb	r2, [r3, #0]
  if (fres == FR_OK) {
 800160a:	4b8c      	ldr	r3, [pc, #560]	; (800183c <main+0x2b0>)
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d106      	bne.n	8001620 <main+0x94>
	  transmit_uart("File opened for reading and checking the free space.\n");
 8001612:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001616:	469c      	mov	ip, r3
 8001618:	488d      	ldr	r0, [pc, #564]	; (8001850 <main+0x2c4>)
 800161a:	f7ff ff9f 	bl	800155c <transmit_uart.0>
 800161e:	e009      	b.n	8001634 <main+0xa8>
  } else if (fres != FR_OK) {
 8001620:	4b86      	ldr	r3, [pc, #536]	; (800183c <main+0x2b0>)
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d005      	beq.n	8001634 <main+0xa8>
	  transmit_uart("File was not opened for reading and checking the free space!\n");
 8001628:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800162c:	469c      	mov	ip, r3
 800162e:	4889      	ldr	r0, [pc, #548]	; (8001854 <main+0x2c8>)
 8001630:	f7ff ff94 	bl	800155c <transmit_uart.0>
  }

  fres = f_getfree("", &fre_clust, &pfs);
 8001634:	4a88      	ldr	r2, [pc, #544]	; (8001858 <main+0x2cc>)
 8001636:	4989      	ldr	r1, [pc, #548]	; (800185c <main+0x2d0>)
 8001638:	487e      	ldr	r0, [pc, #504]	; (8001834 <main+0x2a8>)
 800163a:	f006 ffa6 	bl	800858a <f_getfree>
 800163e:	4603      	mov	r3, r0
 8001640:	461a      	mov	r2, r3
 8001642:	4b7e      	ldr	r3, [pc, #504]	; (800183c <main+0x2b0>)
 8001644:	701a      	strb	r2, [r3, #0]
  totalSpace = (uint32_t) ((pfs->n_fatent - 2) * pfs->csize * 0.5);
 8001646:	4b84      	ldr	r3, [pc, #528]	; (8001858 <main+0x2cc>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	69db      	ldr	r3, [r3, #28]
 800164c:	3b02      	subs	r3, #2
 800164e:	4a82      	ldr	r2, [pc, #520]	; (8001858 <main+0x2cc>)
 8001650:	6812      	ldr	r2, [r2, #0]
 8001652:	8952      	ldrh	r2, [r2, #10]
 8001654:	fb02 f303 	mul.w	r3, r2, r3
 8001658:	4618      	mov	r0, r3
 800165a:	f7ff f89d 	bl	8000798 <__aeabi_ui2d>
 800165e:	f04f 0200 	mov.w	r2, #0
 8001662:	4b7f      	ldr	r3, [pc, #508]	; (8001860 <main+0x2d4>)
 8001664:	f7fe fe2c 	bl	80002c0 <__aeabi_dmul>
 8001668:	4602      	mov	r2, r0
 800166a:	460b      	mov	r3, r1
 800166c:	4610      	mov	r0, r2
 800166e:	4619      	mov	r1, r3
 8001670:	f7ff f90c 	bl	800088c <__aeabi_d2uiz>
 8001674:	4603      	mov	r3, r0
 8001676:	4a7b      	ldr	r2, [pc, #492]	; (8001864 <main+0x2d8>)
 8001678:	6013      	str	r3, [r2, #0]
  freeSpace = (uint32_t) (fre_clust * pfs->csize * 0.5);
 800167a:	4b77      	ldr	r3, [pc, #476]	; (8001858 <main+0x2cc>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	895b      	ldrh	r3, [r3, #10]
 8001680:	461a      	mov	r2, r3
 8001682:	4b76      	ldr	r3, [pc, #472]	; (800185c <main+0x2d0>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	fb02 f303 	mul.w	r3, r2, r3
 800168a:	4618      	mov	r0, r3
 800168c:	f7ff f884 	bl	8000798 <__aeabi_ui2d>
 8001690:	f04f 0200 	mov.w	r2, #0
 8001694:	4b72      	ldr	r3, [pc, #456]	; (8001860 <main+0x2d4>)
 8001696:	f7fe fe13 	bl	80002c0 <__aeabi_dmul>
 800169a:	4602      	mov	r2, r0
 800169c:	460b      	mov	r3, r1
 800169e:	4610      	mov	r0, r2
 80016a0:	4619      	mov	r1, r3
 80016a2:	f7ff f8f3 	bl	800088c <__aeabi_d2uiz>
 80016a6:	4603      	mov	r3, r0
 80016a8:	4a6f      	ldr	r2, [pc, #444]	; (8001868 <main+0x2dc>)
 80016aa:	6013      	str	r3, [r2, #0]
  char mSz[12];
  sprintf(mSz, "%lu", freeSpace);
 80016ac:	4b6e      	ldr	r3, [pc, #440]	; (8001868 <main+0x2dc>)
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80016b4:	496d      	ldr	r1, [pc, #436]	; (800186c <main+0x2e0>)
 80016b6:	4618      	mov	r0, r3
 80016b8:	f007 fa16 	bl	8008ae8 <siprintf>
  if (fres == FR_OK) {
 80016bc:	4b5f      	ldr	r3, [pc, #380]	; (800183c <main+0x2b0>)
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d114      	bne.n	80016ee <main+0x162>
	  transmit_uart("The free space is: ");
 80016c4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80016c8:	469c      	mov	ip, r3
 80016ca:	4869      	ldr	r0, [pc, #420]	; (8001870 <main+0x2e4>)
 80016cc:	f7ff ff46 	bl	800155c <transmit_uart.0>
      transmit_uart(mSz);
 80016d0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80016d4:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80016d8:	4694      	mov	ip, r2
 80016da:	4618      	mov	r0, r3
 80016dc:	f7ff ff3e 	bl	800155c <transmit_uart.0>
      transmit_uart("\n");
 80016e0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80016e4:	469c      	mov	ip, r3
 80016e6:	4863      	ldr	r0, [pc, #396]	; (8001874 <main+0x2e8>)
 80016e8:	f7ff ff38 	bl	800155c <transmit_uart.0>
 80016ec:	e009      	b.n	8001702 <main+0x176>
  } else if (fres != FR_OK) {
 80016ee:	4b53      	ldr	r3, [pc, #332]	; (800183c <main+0x2b0>)
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d005      	beq.n	8001702 <main+0x176>
	  transmit_uart("The free space could not be determined!\n");
 80016f6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80016fa:	469c      	mov	ip, r3
 80016fc:	485e      	ldr	r0, [pc, #376]	; (8001878 <main+0x2ec>)
 80016fe:	f7ff ff2d 	bl	800155c <transmit_uart.0>
  }

  for (uint8_t i = 0; i < 10; i++) {
 8001702:	2300      	movs	r3, #0
 8001704:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8001708:	e008      	b.n	800171c <main+0x190>
	  f_puts("This text is written in the file.\n", &fil);
 800170a:	4950      	ldr	r1, [pc, #320]	; (800184c <main+0x2c0>)
 800170c:	485b      	ldr	r0, [pc, #364]	; (800187c <main+0x2f0>)
 800170e:	f007 f8a5 	bl	800885c <f_puts>
  for (uint8_t i = 0; i < 10; i++) {
 8001712:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001716:	3301      	adds	r3, #1
 8001718:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800171c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001720:	2b09      	cmp	r3, #9
 8001722:	d9f2      	bls.n	800170a <main+0x17e>
  }

  fres = f_close(&fil);
 8001724:	4849      	ldr	r0, [pc, #292]	; (800184c <main+0x2c0>)
 8001726:	f006 ff06 	bl	8008536 <f_close>
 800172a:	4603      	mov	r3, r0
 800172c:	461a      	mov	r2, r3
 800172e:	4b43      	ldr	r3, [pc, #268]	; (800183c <main+0x2b0>)
 8001730:	701a      	strb	r2, [r3, #0]
  if (fres == FR_OK) {
 8001732:	4b42      	ldr	r3, [pc, #264]	; (800183c <main+0x2b0>)
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d106      	bne.n	8001748 <main+0x1bc>
	  transmit_uart("The file is closed.\n");
 800173a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800173e:	469c      	mov	ip, r3
 8001740:	484f      	ldr	r0, [pc, #316]	; (8001880 <main+0x2f4>)
 8001742:	f7ff ff0b 	bl	800155c <transmit_uart.0>
 8001746:	e009      	b.n	800175c <main+0x1d0>
  } else if (fres != FR_OK) {
 8001748:	4b3c      	ldr	r3, [pc, #240]	; (800183c <main+0x2b0>)
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d005      	beq.n	800175c <main+0x1d0>
	  transmit_uart("The file was not closed.\n");
 8001750:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001754:	469c      	mov	ip, r3
 8001756:	484b      	ldr	r0, [pc, #300]	; (8001884 <main+0x2f8>)
 8001758:	f7ff ff00 	bl	800155c <transmit_uart.0>
  }

  /* Open file to read */
  fres = f_open(&fil, "log-file.txt", FA_READ);
 800175c:	2201      	movs	r2, #1
 800175e:	493a      	ldr	r1, [pc, #232]	; (8001848 <main+0x2bc>)
 8001760:	483a      	ldr	r0, [pc, #232]	; (800184c <main+0x2c0>)
 8001762:	f006 f9ab 	bl	8007abc <f_open>
 8001766:	4603      	mov	r3, r0
 8001768:	461a      	mov	r2, r3
 800176a:	4b34      	ldr	r3, [pc, #208]	; (800183c <main+0x2b0>)
 800176c:	701a      	strb	r2, [r3, #0]
  if (fres == FR_OK) {
 800176e:	4b33      	ldr	r3, [pc, #204]	; (800183c <main+0x2b0>)
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d106      	bne.n	8001784 <main+0x1f8>
	  transmit_uart("File opened for reading.\n");
 8001776:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800177a:	469c      	mov	ip, r3
 800177c:	4842      	ldr	r0, [pc, #264]	; (8001888 <main+0x2fc>)
 800177e:	f7ff feed 	bl	800155c <transmit_uart.0>
 8001782:	e017      	b.n	80017b4 <main+0x228>
  } else if (fres != FR_OK) {
 8001784:	4b2d      	ldr	r3, [pc, #180]	; (800183c <main+0x2b0>)
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d013      	beq.n	80017b4 <main+0x228>
	  transmit_uart("File was not opened for reading!\n");
 800178c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001790:	469c      	mov	ip, r3
 8001792:	483e      	ldr	r0, [pc, #248]	; (800188c <main+0x300>)
 8001794:	f7ff fee2 	bl	800155c <transmit_uart.0>
  }

  while (f_gets(buffer, sizeof(buffer), &fil)) {
 8001798:	e00c      	b.n	80017b4 <main+0x228>
	  char mRd[100];
	  sprintf(mRd, "%s", buffer);
 800179a:	463b      	mov	r3, r7
 800179c:	4a3c      	ldr	r2, [pc, #240]	; (8001890 <main+0x304>)
 800179e:	493d      	ldr	r1, [pc, #244]	; (8001894 <main+0x308>)
 80017a0:	4618      	mov	r0, r3
 80017a2:	f007 f9a1 	bl	8008ae8 <siprintf>
	  transmit_uart(mRd);
 80017a6:	463b      	mov	r3, r7
 80017a8:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80017ac:	4694      	mov	ip, r2
 80017ae:	4618      	mov	r0, r3
 80017b0:	f7ff fed4 	bl	800155c <transmit_uart.0>
  while (f_gets(buffer, sizeof(buffer), &fil)) {
 80017b4:	4a25      	ldr	r2, [pc, #148]	; (800184c <main+0x2c0>)
 80017b6:	2164      	movs	r1, #100	; 0x64
 80017b8:	4835      	ldr	r0, [pc, #212]	; (8001890 <main+0x304>)
 80017ba:	f006 ff9b 	bl	80086f4 <f_gets>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d1ea      	bne.n	800179a <main+0x20e>
  }
  /* Close file */
  fres = f_close(&fil);
 80017c4:	4821      	ldr	r0, [pc, #132]	; (800184c <main+0x2c0>)
 80017c6:	f006 feb6 	bl	8008536 <f_close>
 80017ca:	4603      	mov	r3, r0
 80017cc:	461a      	mov	r2, r3
 80017ce:	4b1b      	ldr	r3, [pc, #108]	; (800183c <main+0x2b0>)
 80017d0:	701a      	strb	r2, [r3, #0]
  if (fres == FR_OK) {
 80017d2:	4b1a      	ldr	r3, [pc, #104]	; (800183c <main+0x2b0>)
 80017d4:	781b      	ldrb	r3, [r3, #0]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d106      	bne.n	80017e8 <main+0x25c>
	  transmit_uart("The file is closed.\n");
 80017da:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80017de:	469c      	mov	ip, r3
 80017e0:	4827      	ldr	r0, [pc, #156]	; (8001880 <main+0x2f4>)
 80017e2:	f7ff febb 	bl	800155c <transmit_uart.0>
 80017e6:	e009      	b.n	80017fc <main+0x270>
  } else if (fres != FR_OK) {
 80017e8:	4b14      	ldr	r3, [pc, #80]	; (800183c <main+0x2b0>)
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d005      	beq.n	80017fc <main+0x270>
	  transmit_uart("The file was not closed.\n");
 80017f0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80017f4:	469c      	mov	ip, r3
 80017f6:	4823      	ldr	r0, [pc, #140]	; (8001884 <main+0x2f8>)
 80017f8:	f7ff feb0 	bl	800155c <transmit_uart.0>
  }

  f_mount(NULL, "", 1);
 80017fc:	2201      	movs	r2, #1
 80017fe:	490d      	ldr	r1, [pc, #52]	; (8001834 <main+0x2a8>)
 8001800:	2000      	movs	r0, #0
 8001802:	f006 f915 	bl	8007a30 <f_mount>
  if (fres == FR_OK) {
 8001806:	4b0d      	ldr	r3, [pc, #52]	; (800183c <main+0x2b0>)
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d106      	bne.n	800181c <main+0x290>
	  transmit_uart("The Micro SD card is unmounted!\n");
 800180e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001812:	469c      	mov	ip, r3
 8001814:	4820      	ldr	r0, [pc, #128]	; (8001898 <main+0x30c>)
 8001816:	f7ff fea1 	bl	800155c <transmit_uart.0>
 800181a:	e009      	b.n	8001830 <main+0x2a4>
  } else if (fres != FR_OK) {
 800181c:	4b07      	ldr	r3, [pc, #28]	; (800183c <main+0x2b0>)
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d005      	beq.n	8001830 <main+0x2a4>
	  transmit_uart("The Micro SD was not unmounted!");
 8001824:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001828:	469c      	mov	ip, r3
 800182a:	481c      	ldr	r0, [pc, #112]	; (800189c <main+0x310>)
 800182c:	f7ff fe96 	bl	800155c <transmit_uart.0>
  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001830:	e7fe      	b.n	8001830 <main+0x2a4>
 8001832:	bf00      	nop
 8001834:	08009448 	.word	0x08009448
 8001838:	200000fc 	.word	0x200000fc
 800183c:	20002168 	.word	0x20002168
 8001840:	0800944c 	.word	0x0800944c
 8001844:	08009474 	.word	0x08009474
 8001848:	08009494 	.word	0x08009494
 800184c:	20001138 	.word	0x20001138
 8001850:	080094a4 	.word	0x080094a4
 8001854:	080094dc 	.word	0x080094dc
 8001858:	20001134 	.word	0x20001134
 800185c:	2000216c 	.word	0x2000216c
 8001860:	3fe00000 	.word	0x3fe00000
 8001864:	20002170 	.word	0x20002170
 8001868:	20002174 	.word	0x20002174
 800186c:	0800951c 	.word	0x0800951c
 8001870:	08009520 	.word	0x08009520
 8001874:	08009534 	.word	0x08009534
 8001878:	08009538 	.word	0x08009538
 800187c:	08009564 	.word	0x08009564
 8001880:	08009588 	.word	0x08009588
 8001884:	080095a0 	.word	0x080095a0
 8001888:	080095bc 	.word	0x080095bc
 800188c:	080095d8 	.word	0x080095d8
 8001890:	20002178 	.word	0x20002178
 8001894:	080095fc 	.word	0x080095fc
 8001898:	08009600 	.word	0x08009600
 800189c:	08009624 	.word	0x08009624

080018a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b094      	sub	sp, #80	; 0x50
 80018a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018a6:	f107 0320 	add.w	r3, r7, #32
 80018aa:	2230      	movs	r2, #48	; 0x30
 80018ac:	2100      	movs	r1, #0
 80018ae:	4618      	mov	r0, r3
 80018b0:	f007 f93a 	bl	8008b28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018b4:	f107 030c 	add.w	r3, r7, #12
 80018b8:	2200      	movs	r2, #0
 80018ba:	601a      	str	r2, [r3, #0]
 80018bc:	605a      	str	r2, [r3, #4]
 80018be:	609a      	str	r2, [r3, #8]
 80018c0:	60da      	str	r2, [r3, #12]
 80018c2:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80018c4:	f001 f824 	bl	8002910 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80018c8:	4b27      	ldr	r3, [pc, #156]	; (8001968 <SystemClock_Config+0xc8>)
 80018ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018cc:	4a26      	ldr	r2, [pc, #152]	; (8001968 <SystemClock_Config+0xc8>)
 80018ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018d2:	6413      	str	r3, [r2, #64]	; 0x40
 80018d4:	4b24      	ldr	r3, [pc, #144]	; (8001968 <SystemClock_Config+0xc8>)
 80018d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018dc:	60bb      	str	r3, [r7, #8]
 80018de:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80018e0:	4b22      	ldr	r3, [pc, #136]	; (800196c <SystemClock_Config+0xcc>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80018e8:	4a20      	ldr	r2, [pc, #128]	; (800196c <SystemClock_Config+0xcc>)
 80018ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018ee:	6013      	str	r3, [r2, #0]
 80018f0:	4b1e      	ldr	r3, [pc, #120]	; (800196c <SystemClock_Config+0xcc>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80018f8:	607b      	str	r3, [r7, #4]
 80018fa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80018fc:	2301      	movs	r3, #1
 80018fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001900:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001904:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001906:	2302      	movs	r3, #2
 8001908:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800190a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800190e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001910:	2304      	movs	r3, #4
 8001912:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001914:	2348      	movs	r3, #72	; 0x48
 8001916:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001918:	2302      	movs	r3, #2
 800191a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800191c:	2303      	movs	r3, #3
 800191e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001920:	f107 0320 	add.w	r3, r7, #32
 8001924:	4618      	mov	r0, r3
 8001926:	f001 f803 	bl	8002930 <HAL_RCC_OscConfig>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d001      	beq.n	8001934 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001930:	f000 f970 	bl	8001c14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001934:	230f      	movs	r3, #15
 8001936:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001938:	2302      	movs	r3, #2
 800193a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800193c:	2300      	movs	r3, #0
 800193e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001940:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001944:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001946:	2300      	movs	r3, #0
 8001948:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800194a:	f107 030c 	add.w	r3, r7, #12
 800194e:	2102      	movs	r1, #2
 8001950:	4618      	mov	r0, r3
 8001952:	f001 fa91 	bl	8002e78 <HAL_RCC_ClockConfig>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d001      	beq.n	8001960 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800195c:	f000 f95a 	bl	8001c14 <Error_Handler>
  }
}
 8001960:	bf00      	nop
 8001962:	3750      	adds	r7, #80	; 0x50
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	40023800 	.word	0x40023800
 800196c:	40007000 	.word	0x40007000

08001970 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001974:	4b1b      	ldr	r3, [pc, #108]	; (80019e4 <MX_SPI1_Init+0x74>)
 8001976:	4a1c      	ldr	r2, [pc, #112]	; (80019e8 <MX_SPI1_Init+0x78>)
 8001978:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800197a:	4b1a      	ldr	r3, [pc, #104]	; (80019e4 <MX_SPI1_Init+0x74>)
 800197c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001980:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001982:	4b18      	ldr	r3, [pc, #96]	; (80019e4 <MX_SPI1_Init+0x74>)
 8001984:	2200      	movs	r2, #0
 8001986:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001988:	4b16      	ldr	r3, [pc, #88]	; (80019e4 <MX_SPI1_Init+0x74>)
 800198a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800198e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001990:	4b14      	ldr	r3, [pc, #80]	; (80019e4 <MX_SPI1_Init+0x74>)
 8001992:	2200      	movs	r2, #0
 8001994:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001996:	4b13      	ldr	r3, [pc, #76]	; (80019e4 <MX_SPI1_Init+0x74>)
 8001998:	2200      	movs	r2, #0
 800199a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800199c:	4b11      	ldr	r3, [pc, #68]	; (80019e4 <MX_SPI1_Init+0x74>)
 800199e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019a2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80019a4:	4b0f      	ldr	r3, [pc, #60]	; (80019e4 <MX_SPI1_Init+0x74>)
 80019a6:	2210      	movs	r2, #16
 80019a8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80019aa:	4b0e      	ldr	r3, [pc, #56]	; (80019e4 <MX_SPI1_Init+0x74>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80019b0:	4b0c      	ldr	r3, [pc, #48]	; (80019e4 <MX_SPI1_Init+0x74>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019b6:	4b0b      	ldr	r3, [pc, #44]	; (80019e4 <MX_SPI1_Init+0x74>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80019bc:	4b09      	ldr	r3, [pc, #36]	; (80019e4 <MX_SPI1_Init+0x74>)
 80019be:	2207      	movs	r2, #7
 80019c0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80019c2:	4b08      	ldr	r3, [pc, #32]	; (80019e4 <MX_SPI1_Init+0x74>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80019c8:	4b06      	ldr	r3, [pc, #24]	; (80019e4 <MX_SPI1_Init+0x74>)
 80019ca:	2208      	movs	r2, #8
 80019cc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80019ce:	4805      	ldr	r0, [pc, #20]	; (80019e4 <MX_SPI1_Init+0x74>)
 80019d0:	f002 f868 	bl	8003aa4 <HAL_SPI_Init>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d001      	beq.n	80019de <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80019da:	f000 f91b 	bl	8001c14 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80019de:	bf00      	nop
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	20000098 	.word	0x20000098
 80019e8:	40013000 	.word	0x40013000

080019ec <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80019f0:	4b14      	ldr	r3, [pc, #80]	; (8001a44 <MX_USART3_UART_Init+0x58>)
 80019f2:	4a15      	ldr	r2, [pc, #84]	; (8001a48 <MX_USART3_UART_Init+0x5c>)
 80019f4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80019f6:	4b13      	ldr	r3, [pc, #76]	; (8001a44 <MX_USART3_UART_Init+0x58>)
 80019f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019fc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80019fe:	4b11      	ldr	r3, [pc, #68]	; (8001a44 <MX_USART3_UART_Init+0x58>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001a04:	4b0f      	ldr	r3, [pc, #60]	; (8001a44 <MX_USART3_UART_Init+0x58>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001a0a:	4b0e      	ldr	r3, [pc, #56]	; (8001a44 <MX_USART3_UART_Init+0x58>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001a10:	4b0c      	ldr	r3, [pc, #48]	; (8001a44 <MX_USART3_UART_Init+0x58>)
 8001a12:	220c      	movs	r2, #12
 8001a14:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a16:	4b0b      	ldr	r3, [pc, #44]	; (8001a44 <MX_USART3_UART_Init+0x58>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a1c:	4b09      	ldr	r3, [pc, #36]	; (8001a44 <MX_USART3_UART_Init+0x58>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a22:	4b08      	ldr	r3, [pc, #32]	; (8001a44 <MX_USART3_UART_Init+0x58>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a28:	4b06      	ldr	r3, [pc, #24]	; (8001a44 <MX_USART3_UART_Init+0x58>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001a2e:	4805      	ldr	r0, [pc, #20]	; (8001a44 <MX_USART3_UART_Init+0x58>)
 8001a30:	f002 fdec 	bl	800460c <HAL_UART_Init>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d001      	beq.n	8001a3e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001a3a:	f000 f8eb 	bl	8001c14 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001a3e:	bf00      	nop
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	200021dc 	.word	0x200021dc
 8001a48:	40004800 	.word	0x40004800

08001a4c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001a50:	4b14      	ldr	r3, [pc, #80]	; (8001aa4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a52:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001a56:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001a58:	4b12      	ldr	r3, [pc, #72]	; (8001aa4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a5a:	2206      	movs	r2, #6
 8001a5c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001a5e:	4b11      	ldr	r3, [pc, #68]	; (8001aa4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a60:	2202      	movs	r2, #2
 8001a62:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001a64:	4b0f      	ldr	r3, [pc, #60]	; (8001aa4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001a6a:	4b0e      	ldr	r3, [pc, #56]	; (8001aa4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a6c:	2202      	movs	r2, #2
 8001a6e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001a70:	4b0c      	ldr	r3, [pc, #48]	; (8001aa4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a72:	2201      	movs	r2, #1
 8001a74:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001a76:	4b0b      	ldr	r3, [pc, #44]	; (8001aa4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001a7c:	4b09      	ldr	r3, [pc, #36]	; (8001aa4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001a82:	4b08      	ldr	r3, [pc, #32]	; (8001aa4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a84:	2201      	movs	r2, #1
 8001a86:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001a88:	4b06      	ldr	r3, [pc, #24]	; (8001aa4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001a8e:	4805      	ldr	r0, [pc, #20]	; (8001aa4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a90:	f000 fdf5 	bl	800267e <HAL_PCD_Init>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d001      	beq.n	8001a9e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001a9a:	f000 f8bb 	bl	8001c14 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001a9e:	bf00      	nop
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	20002264 	.word	0x20002264

08001aa8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b08c      	sub	sp, #48	; 0x30
 8001aac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aae:	f107 031c 	add.w	r3, r7, #28
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	601a      	str	r2, [r3, #0]
 8001ab6:	605a      	str	r2, [r3, #4]
 8001ab8:	609a      	str	r2, [r3, #8]
 8001aba:	60da      	str	r2, [r3, #12]
 8001abc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001abe:	4b50      	ldr	r3, [pc, #320]	; (8001c00 <MX_GPIO_Init+0x158>)
 8001ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac2:	4a4f      	ldr	r2, [pc, #316]	; (8001c00 <MX_GPIO_Init+0x158>)
 8001ac4:	f043 0304 	orr.w	r3, r3, #4
 8001ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aca:	4b4d      	ldr	r3, [pc, #308]	; (8001c00 <MX_GPIO_Init+0x158>)
 8001acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ace:	f003 0304 	and.w	r3, r3, #4
 8001ad2:	61bb      	str	r3, [r7, #24]
 8001ad4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ad6:	4b4a      	ldr	r3, [pc, #296]	; (8001c00 <MX_GPIO_Init+0x158>)
 8001ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ada:	4a49      	ldr	r2, [pc, #292]	; (8001c00 <MX_GPIO_Init+0x158>)
 8001adc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ae2:	4b47      	ldr	r3, [pc, #284]	; (8001c00 <MX_GPIO_Init+0x158>)
 8001ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001aea:	617b      	str	r3, [r7, #20]
 8001aec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aee:	4b44      	ldr	r3, [pc, #272]	; (8001c00 <MX_GPIO_Init+0x158>)
 8001af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af2:	4a43      	ldr	r2, [pc, #268]	; (8001c00 <MX_GPIO_Init+0x158>)
 8001af4:	f043 0301 	orr.w	r3, r3, #1
 8001af8:	6313      	str	r3, [r2, #48]	; 0x30
 8001afa:	4b41      	ldr	r3, [pc, #260]	; (8001c00 <MX_GPIO_Init+0x158>)
 8001afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afe:	f003 0301 	and.w	r3, r3, #1
 8001b02:	613b      	str	r3, [r7, #16]
 8001b04:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b06:	4b3e      	ldr	r3, [pc, #248]	; (8001c00 <MX_GPIO_Init+0x158>)
 8001b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0a:	4a3d      	ldr	r2, [pc, #244]	; (8001c00 <MX_GPIO_Init+0x158>)
 8001b0c:	f043 0302 	orr.w	r3, r3, #2
 8001b10:	6313      	str	r3, [r2, #48]	; 0x30
 8001b12:	4b3b      	ldr	r3, [pc, #236]	; (8001c00 <MX_GPIO_Init+0x158>)
 8001b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b16:	f003 0302 	and.w	r3, r3, #2
 8001b1a:	60fb      	str	r3, [r7, #12]
 8001b1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b1e:	4b38      	ldr	r3, [pc, #224]	; (8001c00 <MX_GPIO_Init+0x158>)
 8001b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b22:	4a37      	ldr	r2, [pc, #220]	; (8001c00 <MX_GPIO_Init+0x158>)
 8001b24:	f043 0308 	orr.w	r3, r3, #8
 8001b28:	6313      	str	r3, [r2, #48]	; 0x30
 8001b2a:	4b35      	ldr	r3, [pc, #212]	; (8001c00 <MX_GPIO_Init+0x158>)
 8001b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2e:	f003 0308 	and.w	r3, r3, #8
 8001b32:	60bb      	str	r3, [r7, #8]
 8001b34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b36:	4b32      	ldr	r3, [pc, #200]	; (8001c00 <MX_GPIO_Init+0x158>)
 8001b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3a:	4a31      	ldr	r2, [pc, #196]	; (8001c00 <MX_GPIO_Init+0x158>)
 8001b3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b40:	6313      	str	r3, [r2, #48]	; 0x30
 8001b42:	4b2f      	ldr	r3, [pc, #188]	; (8001c00 <MX_GPIO_Init+0x158>)
 8001b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b4a:	607b      	str	r3, [r7, #4]
 8001b4c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001b4e:	2200      	movs	r2, #0
 8001b50:	f244 0181 	movw	r1, #16513	; 0x4081
 8001b54:	482b      	ldr	r0, [pc, #172]	; (8001c04 <MX_GPIO_Init+0x15c>)
 8001b56:	f000 fd79 	bl	800264c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	2140      	movs	r1, #64	; 0x40
 8001b5e:	482a      	ldr	r0, [pc, #168]	; (8001c08 <MX_GPIO_Init+0x160>)
 8001b60:	f000 fd74 	bl	800264c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_SET);
 8001b64:	2201      	movs	r2, #1
 8001b66:	2140      	movs	r1, #64	; 0x40
 8001b68:	4828      	ldr	r0, [pc, #160]	; (8001c0c <MX_GPIO_Init+0x164>)
 8001b6a:	f000 fd6f 	bl	800264c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001b6e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b74:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001b78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001b7e:	f107 031c 	add.w	r3, r7, #28
 8001b82:	4619      	mov	r1, r3
 8001b84:	4822      	ldr	r0, [pc, #136]	; (8001c10 <MX_GPIO_Init+0x168>)
 8001b86:	f000 fbb5 	bl	80022f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001b8a:	f244 0381 	movw	r3, #16513	; 0x4081
 8001b8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b90:	2301      	movs	r3, #1
 8001b92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b94:	2300      	movs	r3, #0
 8001b96:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b9c:	f107 031c 	add.w	r3, r7, #28
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	4818      	ldr	r0, [pc, #96]	; (8001c04 <MX_GPIO_Init+0x15c>)
 8001ba4:	f000 fba6 	bl	80022f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001ba8:	2340      	movs	r3, #64	; 0x40
 8001baa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bac:	2301      	movs	r3, #1
 8001bae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001bb8:	f107 031c 	add.w	r3, r7, #28
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	4812      	ldr	r0, [pc, #72]	; (8001c08 <MX_GPIO_Init+0x160>)
 8001bc0:	f000 fb98 	bl	80022f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001bc4:	2380      	movs	r3, #128	; 0x80
 8001bc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001bd0:	f107 031c 	add.w	r3, r7, #28
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	480c      	ldr	r0, [pc, #48]	; (8001c08 <MX_GPIO_Init+0x160>)
 8001bd8:	f000 fb8c 	bl	80022f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001bdc:	2340      	movs	r3, #64	; 0x40
 8001bde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001be0:	2301      	movs	r3, #1
 8001be2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be4:	2300      	movs	r3, #0
 8001be6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001be8:	2300      	movs	r3, #0
 8001bea:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bec:	f107 031c 	add.w	r3, r7, #28
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	4806      	ldr	r0, [pc, #24]	; (8001c0c <MX_GPIO_Init+0x164>)
 8001bf4:	f000 fb7e 	bl	80022f4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001bf8:	bf00      	nop
 8001bfa:	3730      	adds	r7, #48	; 0x30
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	40023800 	.word	0x40023800
 8001c04:	40020400 	.word	0x40020400
 8001c08:	40021800 	.word	0x40021800
 8001c0c:	40020c00 	.word	0x40020c00
 8001c10:	40020800 	.word	0x40020800

08001c14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c18:	b672      	cpsid	i
}
 8001c1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c1c:	e7fe      	b.n	8001c1c <Error_Handler+0x8>
	...

08001c20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001c26:	4b0f      	ldr	r3, [pc, #60]	; (8001c64 <HAL_MspInit+0x44>)
 8001c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2a:	4a0e      	ldr	r2, [pc, #56]	; (8001c64 <HAL_MspInit+0x44>)
 8001c2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c30:	6413      	str	r3, [r2, #64]	; 0x40
 8001c32:	4b0c      	ldr	r3, [pc, #48]	; (8001c64 <HAL_MspInit+0x44>)
 8001c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c3a:	607b      	str	r3, [r7, #4]
 8001c3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c3e:	4b09      	ldr	r3, [pc, #36]	; (8001c64 <HAL_MspInit+0x44>)
 8001c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c42:	4a08      	ldr	r2, [pc, #32]	; (8001c64 <HAL_MspInit+0x44>)
 8001c44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c48:	6453      	str	r3, [r2, #68]	; 0x44
 8001c4a:	4b06      	ldr	r3, [pc, #24]	; (8001c64 <HAL_MspInit+0x44>)
 8001c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c52:	603b      	str	r3, [r7, #0]
 8001c54:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c56:	bf00      	nop
 8001c58:	370c      	adds	r7, #12
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop
 8001c64:	40023800 	.word	0x40023800

08001c68 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b08a      	sub	sp, #40	; 0x28
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c70:	f107 0314 	add.w	r3, r7, #20
 8001c74:	2200      	movs	r2, #0
 8001c76:	601a      	str	r2, [r3, #0]
 8001c78:	605a      	str	r2, [r3, #4]
 8001c7a:	609a      	str	r2, [r3, #8]
 8001c7c:	60da      	str	r2, [r3, #12]
 8001c7e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a17      	ldr	r2, [pc, #92]	; (8001ce4 <HAL_SPI_MspInit+0x7c>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d127      	bne.n	8001cda <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c8a:	4b17      	ldr	r3, [pc, #92]	; (8001ce8 <HAL_SPI_MspInit+0x80>)
 8001c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c8e:	4a16      	ldr	r2, [pc, #88]	; (8001ce8 <HAL_SPI_MspInit+0x80>)
 8001c90:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c94:	6453      	str	r3, [r2, #68]	; 0x44
 8001c96:	4b14      	ldr	r3, [pc, #80]	; (8001ce8 <HAL_SPI_MspInit+0x80>)
 8001c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c9a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c9e:	613b      	str	r3, [r7, #16]
 8001ca0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ca2:	4b11      	ldr	r3, [pc, #68]	; (8001ce8 <HAL_SPI_MspInit+0x80>)
 8001ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca6:	4a10      	ldr	r2, [pc, #64]	; (8001ce8 <HAL_SPI_MspInit+0x80>)
 8001ca8:	f043 0301 	orr.w	r3, r3, #1
 8001cac:	6313      	str	r3, [r2, #48]	; 0x30
 8001cae:	4b0e      	ldr	r3, [pc, #56]	; (8001ce8 <HAL_SPI_MspInit+0x80>)
 8001cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb2:	f003 0301 	and.w	r3, r3, #1
 8001cb6:	60fb      	str	r3, [r7, #12]
 8001cb8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001cba:	23e0      	movs	r3, #224	; 0xe0
 8001cbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cbe:	2302      	movs	r3, #2
 8001cc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001cca:	2305      	movs	r3, #5
 8001ccc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cce:	f107 0314 	add.w	r3, r7, #20
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	4805      	ldr	r0, [pc, #20]	; (8001cec <HAL_SPI_MspInit+0x84>)
 8001cd6:	f000 fb0d 	bl	80022f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001cda:	bf00      	nop
 8001cdc:	3728      	adds	r7, #40	; 0x28
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	40013000 	.word	0x40013000
 8001ce8:	40023800 	.word	0x40023800
 8001cec:	40020000 	.word	0x40020000

08001cf0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b0aa      	sub	sp, #168	; 0xa8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cf8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	601a      	str	r2, [r3, #0]
 8001d00:	605a      	str	r2, [r3, #4]
 8001d02:	609a      	str	r2, [r3, #8]
 8001d04:	60da      	str	r2, [r3, #12]
 8001d06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d08:	f107 0310 	add.w	r3, r7, #16
 8001d0c:	2284      	movs	r2, #132	; 0x84
 8001d0e:	2100      	movs	r1, #0
 8001d10:	4618      	mov	r0, r3
 8001d12:	f006 ff09 	bl	8008b28 <memset>
  if(huart->Instance==USART3)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a22      	ldr	r2, [pc, #136]	; (8001da4 <HAL_UART_MspInit+0xb4>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d13c      	bne.n	8001d9a <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001d20:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d24:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001d26:	2300      	movs	r3, #0
 8001d28:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d2a:	f107 0310 	add.w	r3, r7, #16
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f001 fac8 	bl	80032c4 <HAL_RCCEx_PeriphCLKConfig>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d001      	beq.n	8001d3e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001d3a:	f7ff ff6b 	bl	8001c14 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001d3e:	4b1a      	ldr	r3, [pc, #104]	; (8001da8 <HAL_UART_MspInit+0xb8>)
 8001d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d42:	4a19      	ldr	r2, [pc, #100]	; (8001da8 <HAL_UART_MspInit+0xb8>)
 8001d44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d48:	6413      	str	r3, [r2, #64]	; 0x40
 8001d4a:	4b17      	ldr	r3, [pc, #92]	; (8001da8 <HAL_UART_MspInit+0xb8>)
 8001d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d52:	60fb      	str	r3, [r7, #12]
 8001d54:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d56:	4b14      	ldr	r3, [pc, #80]	; (8001da8 <HAL_UART_MspInit+0xb8>)
 8001d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5a:	4a13      	ldr	r2, [pc, #76]	; (8001da8 <HAL_UART_MspInit+0xb8>)
 8001d5c:	f043 0308 	orr.w	r3, r3, #8
 8001d60:	6313      	str	r3, [r2, #48]	; 0x30
 8001d62:	4b11      	ldr	r3, [pc, #68]	; (8001da8 <HAL_UART_MspInit+0xb8>)
 8001d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d66:	f003 0308 	and.w	r3, r3, #8
 8001d6a:	60bb      	str	r3, [r7, #8]
 8001d6c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001d6e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001d72:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d76:	2302      	movs	r3, #2
 8001d78:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d82:	2303      	movs	r3, #3
 8001d84:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001d88:	2307      	movs	r3, #7
 8001d8a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d8e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001d92:	4619      	mov	r1, r3
 8001d94:	4805      	ldr	r0, [pc, #20]	; (8001dac <HAL_UART_MspInit+0xbc>)
 8001d96:	f000 faad 	bl	80022f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001d9a:	bf00      	nop
 8001d9c:	37a8      	adds	r7, #168	; 0xa8
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	40004800 	.word	0x40004800
 8001da8:	40023800 	.word	0x40023800
 8001dac:	40020c00 	.word	0x40020c00

08001db0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b0ac      	sub	sp, #176	; 0xb0
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001db8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	601a      	str	r2, [r3, #0]
 8001dc0:	605a      	str	r2, [r3, #4]
 8001dc2:	609a      	str	r2, [r3, #8]
 8001dc4:	60da      	str	r2, [r3, #12]
 8001dc6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001dc8:	f107 0318 	add.w	r3, r7, #24
 8001dcc:	2284      	movs	r2, #132	; 0x84
 8001dce:	2100      	movs	r1, #0
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f006 fea9 	bl	8008b28 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001dde:	d159      	bne.n	8001e94 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001de0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001de4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001de6:	2300      	movs	r3, #0
 8001de8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001dec:	f107 0318 	add.w	r3, r7, #24
 8001df0:	4618      	mov	r0, r3
 8001df2:	f001 fa67 	bl	80032c4 <HAL_RCCEx_PeriphCLKConfig>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d001      	beq.n	8001e00 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001dfc:	f7ff ff0a 	bl	8001c14 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e00:	4b26      	ldr	r3, [pc, #152]	; (8001e9c <HAL_PCD_MspInit+0xec>)
 8001e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e04:	4a25      	ldr	r2, [pc, #148]	; (8001e9c <HAL_PCD_MspInit+0xec>)
 8001e06:	f043 0301 	orr.w	r3, r3, #1
 8001e0a:	6313      	str	r3, [r2, #48]	; 0x30
 8001e0c:	4b23      	ldr	r3, [pc, #140]	; (8001e9c <HAL_PCD_MspInit+0xec>)
 8001e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e10:	f003 0301 	and.w	r3, r3, #1
 8001e14:	617b      	str	r3, [r7, #20]
 8001e16:	697b      	ldr	r3, [r7, #20]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_DM_Pin|USB_DP_Pin;
 8001e18:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8001e1c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e20:	2302      	movs	r3, #2
 8001e22:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e26:	2300      	movs	r3, #0
 8001e28:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e2c:	2303      	movs	r3, #3
 8001e2e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001e32:	230a      	movs	r3, #10
 8001e34:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e38:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	4818      	ldr	r0, [pc, #96]	; (8001ea0 <HAL_PCD_MspInit+0xf0>)
 8001e40:	f000 fa58 	bl	80022f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001e44:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e48:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e52:	2300      	movs	r3, #0
 8001e54:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001e58:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	4810      	ldr	r0, [pc, #64]	; (8001ea0 <HAL_PCD_MspInit+0xf0>)
 8001e60:	f000 fa48 	bl	80022f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001e64:	4b0d      	ldr	r3, [pc, #52]	; (8001e9c <HAL_PCD_MspInit+0xec>)
 8001e66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e68:	4a0c      	ldr	r2, [pc, #48]	; (8001e9c <HAL_PCD_MspInit+0xec>)
 8001e6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e6e:	6353      	str	r3, [r2, #52]	; 0x34
 8001e70:	4b0a      	ldr	r3, [pc, #40]	; (8001e9c <HAL_PCD_MspInit+0xec>)
 8001e72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e78:	613b      	str	r3, [r7, #16]
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	4b07      	ldr	r3, [pc, #28]	; (8001e9c <HAL_PCD_MspInit+0xec>)
 8001e7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e80:	4a06      	ldr	r2, [pc, #24]	; (8001e9c <HAL_PCD_MspInit+0xec>)
 8001e82:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e86:	6453      	str	r3, [r2, #68]	; 0x44
 8001e88:	4b04      	ldr	r3, [pc, #16]	; (8001e9c <HAL_PCD_MspInit+0xec>)
 8001e8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e90:	60fb      	str	r3, [r7, #12]
 8001e92:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001e94:	bf00      	nop
 8001e96:	37b0      	adds	r7, #176	; 0xb0
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	40023800 	.word	0x40023800
 8001ea0:	40020000 	.word	0x40020000

08001ea4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ea8:	e7fe      	b.n	8001ea8 <NMI_Handler+0x4>

08001eaa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001eaa:	b480      	push	{r7}
 8001eac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001eae:	e7fe      	b.n	8001eae <HardFault_Handler+0x4>

08001eb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001eb4:	e7fe      	b.n	8001eb4 <MemManage_Handler+0x4>

08001eb6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001eb6:	b480      	push	{r7}
 8001eb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001eba:	e7fe      	b.n	8001eba <BusFault_Handler+0x4>

08001ebc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ec0:	e7fe      	b.n	8001ec0 <UsageFault_Handler+0x4>

08001ec2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ec2:	b480      	push	{r7}
 8001ec4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ec6:	bf00      	nop
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr

08001ed0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ed4:	bf00      	nop
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr

08001ede <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ede:	b480      	push	{r7}
 8001ee0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ee2:	bf00      	nop
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr

08001eec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

	if(Timer1 > 0)
 8001ef0:	4b0c      	ldr	r3, [pc, #48]	; (8001f24 <SysTick_Handler+0x38>)
 8001ef2:	881b      	ldrh	r3, [r3, #0]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d005      	beq.n	8001f04 <SysTick_Handler+0x18>
		Timer1--;
 8001ef8:	4b0a      	ldr	r3, [pc, #40]	; (8001f24 <SysTick_Handler+0x38>)
 8001efa:	881b      	ldrh	r3, [r3, #0]
 8001efc:	3b01      	subs	r3, #1
 8001efe:	b29a      	uxth	r2, r3
 8001f00:	4b08      	ldr	r3, [pc, #32]	; (8001f24 <SysTick_Handler+0x38>)
 8001f02:	801a      	strh	r2, [r3, #0]

	if(Timer2 > 0)
 8001f04:	4b08      	ldr	r3, [pc, #32]	; (8001f28 <SysTick_Handler+0x3c>)
 8001f06:	881b      	ldrh	r3, [r3, #0]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d005      	beq.n	8001f18 <SysTick_Handler+0x2c>
		Timer2--;
 8001f0c:	4b06      	ldr	r3, [pc, #24]	; (8001f28 <SysTick_Handler+0x3c>)
 8001f0e:	881b      	ldrh	r3, [r3, #0]
 8001f10:	3b01      	subs	r3, #1
 8001f12:	b29a      	uxth	r2, r3
 8001f14:	4b04      	ldr	r3, [pc, #16]	; (8001f28 <SysTick_Handler+0x3c>)
 8001f16:	801a      	strh	r2, [r3, #0]

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f18:	f000 f8b6 	bl	8002088 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  HAL_SYSTICK_IRQHandler();
 8001f1c:	f000 f9dd 	bl	80022da <HAL_SYSTICK_IRQHandler>

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f20:	bf00      	nop
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	20000090 	.word	0x20000090
 8001f28:	20000092 	.word	0x20000092

08001f2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b086      	sub	sp, #24
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f34:	4a14      	ldr	r2, [pc, #80]	; (8001f88 <_sbrk+0x5c>)
 8001f36:	4b15      	ldr	r3, [pc, #84]	; (8001f8c <_sbrk+0x60>)
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f40:	4b13      	ldr	r3, [pc, #76]	; (8001f90 <_sbrk+0x64>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d102      	bne.n	8001f4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f48:	4b11      	ldr	r3, [pc, #68]	; (8001f90 <_sbrk+0x64>)
 8001f4a:	4a12      	ldr	r2, [pc, #72]	; (8001f94 <_sbrk+0x68>)
 8001f4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f4e:	4b10      	ldr	r3, [pc, #64]	; (8001f90 <_sbrk+0x64>)
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	4413      	add	r3, r2
 8001f56:	693a      	ldr	r2, [r7, #16]
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d207      	bcs.n	8001f6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f5c:	f006 fdec 	bl	8008b38 <__errno>
 8001f60:	4603      	mov	r3, r0
 8001f62:	220c      	movs	r2, #12
 8001f64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f66:	f04f 33ff 	mov.w	r3, #4294967295
 8001f6a:	e009      	b.n	8001f80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f6c:	4b08      	ldr	r3, [pc, #32]	; (8001f90 <_sbrk+0x64>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f72:	4b07      	ldr	r3, [pc, #28]	; (8001f90 <_sbrk+0x64>)
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4413      	add	r3, r2
 8001f7a:	4a05      	ldr	r2, [pc, #20]	; (8001f90 <_sbrk+0x64>)
 8001f7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	3718      	adds	r7, #24
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	20050000 	.word	0x20050000
 8001f8c:	00000400 	.word	0x00000400
 8001f90:	2000276c 	.word	0x2000276c
 8001f94:	20002af8 	.word	0x20002af8

08001f98 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f9c:	4b06      	ldr	r3, [pc, #24]	; (8001fb8 <SystemInit+0x20>)
 8001f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fa2:	4a05      	ldr	r2, [pc, #20]	; (8001fb8 <SystemInit+0x20>)
 8001fa4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001fa8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001fac:	bf00      	nop
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr
 8001fb6:	bf00      	nop
 8001fb8:	e000ed00 	.word	0xe000ed00

08001fbc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001fbc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ff4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001fc0:	480d      	ldr	r0, [pc, #52]	; (8001ff8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001fc2:	490e      	ldr	r1, [pc, #56]	; (8001ffc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001fc4:	4a0e      	ldr	r2, [pc, #56]	; (8002000 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001fc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fc8:	e002      	b.n	8001fd0 <LoopCopyDataInit>

08001fca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fcc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fce:	3304      	adds	r3, #4

08001fd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fd4:	d3f9      	bcc.n	8001fca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fd6:	4a0b      	ldr	r2, [pc, #44]	; (8002004 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001fd8:	4c0b      	ldr	r4, [pc, #44]	; (8002008 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001fda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fdc:	e001      	b.n	8001fe2 <LoopFillZerobss>

08001fde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fe0:	3204      	adds	r2, #4

08001fe2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fe2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fe4:	d3fb      	bcc.n	8001fde <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001fe6:	f7ff ffd7 	bl	8001f98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001fea:	f006 fdab 	bl	8008b44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001fee:	f7ff facd 	bl	800158c <main>
  bx  lr    
 8001ff2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ff4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001ff8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ffc:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8002000:	08009b28 	.word	0x08009b28
  ldr r2, =_sbss
 8002004:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8002008:	20002af8 	.word	0x20002af8

0800200c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800200c:	e7fe      	b.n	800200c <ADC_IRQHandler>

0800200e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800200e:	b580      	push	{r7, lr}
 8002010:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002012:	2003      	movs	r0, #3
 8002014:	f000 f92e 	bl	8002274 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002018:	2000      	movs	r0, #0
 800201a:	f000 f805 	bl	8002028 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800201e:	f7ff fdff 	bl	8001c20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002022:	2300      	movs	r3, #0
}
 8002024:	4618      	mov	r0, r3
 8002026:	bd80      	pop	{r7, pc}

08002028 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002030:	4b12      	ldr	r3, [pc, #72]	; (800207c <HAL_InitTick+0x54>)
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	4b12      	ldr	r3, [pc, #72]	; (8002080 <HAL_InitTick+0x58>)
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	4619      	mov	r1, r3
 800203a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800203e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002042:	fbb2 f3f3 	udiv	r3, r2, r3
 8002046:	4618      	mov	r0, r3
 8002048:	f000 f93b 	bl	80022c2 <HAL_SYSTICK_Config>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d001      	beq.n	8002056 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e00e      	b.n	8002074 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2b0f      	cmp	r3, #15
 800205a:	d80a      	bhi.n	8002072 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800205c:	2200      	movs	r2, #0
 800205e:	6879      	ldr	r1, [r7, #4]
 8002060:	f04f 30ff 	mov.w	r0, #4294967295
 8002064:	f000 f911 	bl	800228a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002068:	4a06      	ldr	r2, [pc, #24]	; (8002084 <HAL_InitTick+0x5c>)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800206e:	2300      	movs	r3, #0
 8002070:	e000      	b.n	8002074 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
}
 8002074:	4618      	mov	r0, r3
 8002076:	3708      	adds	r7, #8
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}
 800207c:	20000004 	.word	0x20000004
 8002080:	2000000c 	.word	0x2000000c
 8002084:	20000008 	.word	0x20000008

08002088 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800208c:	4b06      	ldr	r3, [pc, #24]	; (80020a8 <HAL_IncTick+0x20>)
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	461a      	mov	r2, r3
 8002092:	4b06      	ldr	r3, [pc, #24]	; (80020ac <HAL_IncTick+0x24>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4413      	add	r3, r2
 8002098:	4a04      	ldr	r2, [pc, #16]	; (80020ac <HAL_IncTick+0x24>)
 800209a:	6013      	str	r3, [r2, #0]
}
 800209c:	bf00      	nop
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr
 80020a6:	bf00      	nop
 80020a8:	2000000c 	.word	0x2000000c
 80020ac:	20002770 	.word	0x20002770

080020b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0
  return uwTick;
 80020b4:	4b03      	ldr	r3, [pc, #12]	; (80020c4 <HAL_GetTick+0x14>)
 80020b6:	681b      	ldr	r3, [r3, #0]
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
 80020c2:	bf00      	nop
 80020c4:	20002770 	.word	0x20002770

080020c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b084      	sub	sp, #16
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020d0:	f7ff ffee 	bl	80020b0 <HAL_GetTick>
 80020d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020e0:	d005      	beq.n	80020ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020e2:	4b0a      	ldr	r3, [pc, #40]	; (800210c <HAL_Delay+0x44>)
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	461a      	mov	r2, r3
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	4413      	add	r3, r2
 80020ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80020ee:	bf00      	nop
 80020f0:	f7ff ffde 	bl	80020b0 <HAL_GetTick>
 80020f4:	4602      	mov	r2, r0
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	68fa      	ldr	r2, [r7, #12]
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d8f7      	bhi.n	80020f0 <HAL_Delay+0x28>
  {
  }
}
 8002100:	bf00      	nop
 8002102:	bf00      	nop
 8002104:	3710      	adds	r7, #16
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	2000000c 	.word	0x2000000c

08002110 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002110:	b480      	push	{r7}
 8002112:	b085      	sub	sp, #20
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	f003 0307 	and.w	r3, r3, #7
 800211e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002120:	4b0b      	ldr	r3, [pc, #44]	; (8002150 <__NVIC_SetPriorityGrouping+0x40>)
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002126:	68ba      	ldr	r2, [r7, #8]
 8002128:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800212c:	4013      	ands	r3, r2
 800212e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002138:	4b06      	ldr	r3, [pc, #24]	; (8002154 <__NVIC_SetPriorityGrouping+0x44>)
 800213a:	4313      	orrs	r3, r2
 800213c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800213e:	4a04      	ldr	r2, [pc, #16]	; (8002150 <__NVIC_SetPriorityGrouping+0x40>)
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	60d3      	str	r3, [r2, #12]
}
 8002144:	bf00      	nop
 8002146:	3714      	adds	r7, #20
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr
 8002150:	e000ed00 	.word	0xe000ed00
 8002154:	05fa0000 	.word	0x05fa0000

08002158 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800215c:	4b04      	ldr	r3, [pc, #16]	; (8002170 <__NVIC_GetPriorityGrouping+0x18>)
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	0a1b      	lsrs	r3, r3, #8
 8002162:	f003 0307 	and.w	r3, r3, #7
}
 8002166:	4618      	mov	r0, r3
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr
 8002170:	e000ed00 	.word	0xe000ed00

08002174 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002174:	b480      	push	{r7}
 8002176:	b083      	sub	sp, #12
 8002178:	af00      	add	r7, sp, #0
 800217a:	4603      	mov	r3, r0
 800217c:	6039      	str	r1, [r7, #0]
 800217e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002180:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002184:	2b00      	cmp	r3, #0
 8002186:	db0a      	blt.n	800219e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	b2da      	uxtb	r2, r3
 800218c:	490c      	ldr	r1, [pc, #48]	; (80021c0 <__NVIC_SetPriority+0x4c>)
 800218e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002192:	0112      	lsls	r2, r2, #4
 8002194:	b2d2      	uxtb	r2, r2
 8002196:	440b      	add	r3, r1
 8002198:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800219c:	e00a      	b.n	80021b4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	b2da      	uxtb	r2, r3
 80021a2:	4908      	ldr	r1, [pc, #32]	; (80021c4 <__NVIC_SetPriority+0x50>)
 80021a4:	79fb      	ldrb	r3, [r7, #7]
 80021a6:	f003 030f 	and.w	r3, r3, #15
 80021aa:	3b04      	subs	r3, #4
 80021ac:	0112      	lsls	r2, r2, #4
 80021ae:	b2d2      	uxtb	r2, r2
 80021b0:	440b      	add	r3, r1
 80021b2:	761a      	strb	r2, [r3, #24]
}
 80021b4:	bf00      	nop
 80021b6:	370c      	adds	r7, #12
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr
 80021c0:	e000e100 	.word	0xe000e100
 80021c4:	e000ed00 	.word	0xe000ed00

080021c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b089      	sub	sp, #36	; 0x24
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	60f8      	str	r0, [r7, #12]
 80021d0:	60b9      	str	r1, [r7, #8]
 80021d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	f003 0307 	and.w	r3, r3, #7
 80021da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	f1c3 0307 	rsb	r3, r3, #7
 80021e2:	2b04      	cmp	r3, #4
 80021e4:	bf28      	it	cs
 80021e6:	2304      	movcs	r3, #4
 80021e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	3304      	adds	r3, #4
 80021ee:	2b06      	cmp	r3, #6
 80021f0:	d902      	bls.n	80021f8 <NVIC_EncodePriority+0x30>
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	3b03      	subs	r3, #3
 80021f6:	e000      	b.n	80021fa <NVIC_EncodePriority+0x32>
 80021f8:	2300      	movs	r3, #0
 80021fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021fc:	f04f 32ff 	mov.w	r2, #4294967295
 8002200:	69bb      	ldr	r3, [r7, #24]
 8002202:	fa02 f303 	lsl.w	r3, r2, r3
 8002206:	43da      	mvns	r2, r3
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	401a      	ands	r2, r3
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002210:	f04f 31ff 	mov.w	r1, #4294967295
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	fa01 f303 	lsl.w	r3, r1, r3
 800221a:	43d9      	mvns	r1, r3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002220:	4313      	orrs	r3, r2
         );
}
 8002222:	4618      	mov	r0, r3
 8002224:	3724      	adds	r7, #36	; 0x24
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
	...

08002230 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	3b01      	subs	r3, #1
 800223c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002240:	d301      	bcc.n	8002246 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002242:	2301      	movs	r3, #1
 8002244:	e00f      	b.n	8002266 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002246:	4a0a      	ldr	r2, [pc, #40]	; (8002270 <SysTick_Config+0x40>)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	3b01      	subs	r3, #1
 800224c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800224e:	210f      	movs	r1, #15
 8002250:	f04f 30ff 	mov.w	r0, #4294967295
 8002254:	f7ff ff8e 	bl	8002174 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002258:	4b05      	ldr	r3, [pc, #20]	; (8002270 <SysTick_Config+0x40>)
 800225a:	2200      	movs	r2, #0
 800225c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800225e:	4b04      	ldr	r3, [pc, #16]	; (8002270 <SysTick_Config+0x40>)
 8002260:	2207      	movs	r2, #7
 8002262:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002264:	2300      	movs	r3, #0
}
 8002266:	4618      	mov	r0, r3
 8002268:	3708      	adds	r7, #8
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	e000e010 	.word	0xe000e010

08002274 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b082      	sub	sp, #8
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	f7ff ff47 	bl	8002110 <__NVIC_SetPriorityGrouping>
}
 8002282:	bf00      	nop
 8002284:	3708      	adds	r7, #8
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}

0800228a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800228a:	b580      	push	{r7, lr}
 800228c:	b086      	sub	sp, #24
 800228e:	af00      	add	r7, sp, #0
 8002290:	4603      	mov	r3, r0
 8002292:	60b9      	str	r1, [r7, #8]
 8002294:	607a      	str	r2, [r7, #4]
 8002296:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002298:	2300      	movs	r3, #0
 800229a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800229c:	f7ff ff5c 	bl	8002158 <__NVIC_GetPriorityGrouping>
 80022a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	68b9      	ldr	r1, [r7, #8]
 80022a6:	6978      	ldr	r0, [r7, #20]
 80022a8:	f7ff ff8e 	bl	80021c8 <NVIC_EncodePriority>
 80022ac:	4602      	mov	r2, r0
 80022ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022b2:	4611      	mov	r1, r2
 80022b4:	4618      	mov	r0, r3
 80022b6:	f7ff ff5d 	bl	8002174 <__NVIC_SetPriority>
}
 80022ba:	bf00      	nop
 80022bc:	3718      	adds	r7, #24
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}

080022c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022c2:	b580      	push	{r7, lr}
 80022c4:	b082      	sub	sp, #8
 80022c6:	af00      	add	r7, sp, #0
 80022c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	f7ff ffb0 	bl	8002230 <SysTick_Config>
 80022d0:	4603      	mov	r3, r0
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3708      	adds	r7, #8
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}

080022da <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80022da:	b580      	push	{r7, lr}
 80022dc:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80022de:	f000 f802 	bl	80022e6 <HAL_SYSTICK_Callback>
}
 80022e2:	bf00      	nop
 80022e4:	bd80      	pop	{r7, pc}

080022e6 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80022e6:	b480      	push	{r7}
 80022e8:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80022ea:	bf00      	nop
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr

080022f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b089      	sub	sp, #36	; 0x24
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80022fe:	2300      	movs	r3, #0
 8002300:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002302:	2300      	movs	r3, #0
 8002304:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002306:	2300      	movs	r3, #0
 8002308:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800230a:	2300      	movs	r3, #0
 800230c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800230e:	2300      	movs	r3, #0
 8002310:	61fb      	str	r3, [r7, #28]
 8002312:	e175      	b.n	8002600 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002314:	2201      	movs	r2, #1
 8002316:	69fb      	ldr	r3, [r7, #28]
 8002318:	fa02 f303 	lsl.w	r3, r2, r3
 800231c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	697a      	ldr	r2, [r7, #20]
 8002324:	4013      	ands	r3, r2
 8002326:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002328:	693a      	ldr	r2, [r7, #16]
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	429a      	cmp	r2, r3
 800232e:	f040 8164 	bne.w	80025fa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	f003 0303 	and.w	r3, r3, #3
 800233a:	2b01      	cmp	r3, #1
 800233c:	d005      	beq.n	800234a <HAL_GPIO_Init+0x56>
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	f003 0303 	and.w	r3, r3, #3
 8002346:	2b02      	cmp	r3, #2
 8002348:	d130      	bne.n	80023ac <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	005b      	lsls	r3, r3, #1
 8002354:	2203      	movs	r2, #3
 8002356:	fa02 f303 	lsl.w	r3, r2, r3
 800235a:	43db      	mvns	r3, r3
 800235c:	69ba      	ldr	r2, [r7, #24]
 800235e:	4013      	ands	r3, r2
 8002360:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	68da      	ldr	r2, [r3, #12]
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	005b      	lsls	r3, r3, #1
 800236a:	fa02 f303 	lsl.w	r3, r2, r3
 800236e:	69ba      	ldr	r2, [r7, #24]
 8002370:	4313      	orrs	r3, r2
 8002372:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	69ba      	ldr	r2, [r7, #24]
 8002378:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002380:	2201      	movs	r2, #1
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	fa02 f303 	lsl.w	r3, r2, r3
 8002388:	43db      	mvns	r3, r3
 800238a:	69ba      	ldr	r2, [r7, #24]
 800238c:	4013      	ands	r3, r2
 800238e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	091b      	lsrs	r3, r3, #4
 8002396:	f003 0201 	and.w	r2, r3, #1
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	fa02 f303 	lsl.w	r3, r2, r3
 80023a0:	69ba      	ldr	r2, [r7, #24]
 80023a2:	4313      	orrs	r3, r2
 80023a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	69ba      	ldr	r2, [r7, #24]
 80023aa:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f003 0303 	and.w	r3, r3, #3
 80023b4:	2b03      	cmp	r3, #3
 80023b6:	d017      	beq.n	80023e8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	005b      	lsls	r3, r3, #1
 80023c2:	2203      	movs	r2, #3
 80023c4:	fa02 f303 	lsl.w	r3, r2, r3
 80023c8:	43db      	mvns	r3, r3
 80023ca:	69ba      	ldr	r2, [r7, #24]
 80023cc:	4013      	ands	r3, r2
 80023ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	689a      	ldr	r2, [r3, #8]
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	005b      	lsls	r3, r3, #1
 80023d8:	fa02 f303 	lsl.w	r3, r2, r3
 80023dc:	69ba      	ldr	r2, [r7, #24]
 80023de:	4313      	orrs	r3, r2
 80023e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	69ba      	ldr	r2, [r7, #24]
 80023e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f003 0303 	and.w	r3, r3, #3
 80023f0:	2b02      	cmp	r3, #2
 80023f2:	d123      	bne.n	800243c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80023f4:	69fb      	ldr	r3, [r7, #28]
 80023f6:	08da      	lsrs	r2, r3, #3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	3208      	adds	r2, #8
 80023fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002400:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	f003 0307 	and.w	r3, r3, #7
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	220f      	movs	r2, #15
 800240c:	fa02 f303 	lsl.w	r3, r2, r3
 8002410:	43db      	mvns	r3, r3
 8002412:	69ba      	ldr	r2, [r7, #24]
 8002414:	4013      	ands	r3, r2
 8002416:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	691a      	ldr	r2, [r3, #16]
 800241c:	69fb      	ldr	r3, [r7, #28]
 800241e:	f003 0307 	and.w	r3, r3, #7
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	fa02 f303 	lsl.w	r3, r2, r3
 8002428:	69ba      	ldr	r2, [r7, #24]
 800242a:	4313      	orrs	r3, r2
 800242c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	08da      	lsrs	r2, r3, #3
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	3208      	adds	r2, #8
 8002436:	69b9      	ldr	r1, [r7, #24]
 8002438:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	005b      	lsls	r3, r3, #1
 8002446:	2203      	movs	r2, #3
 8002448:	fa02 f303 	lsl.w	r3, r2, r3
 800244c:	43db      	mvns	r3, r3
 800244e:	69ba      	ldr	r2, [r7, #24]
 8002450:	4013      	ands	r3, r2
 8002452:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f003 0203 	and.w	r2, r3, #3
 800245c:	69fb      	ldr	r3, [r7, #28]
 800245e:	005b      	lsls	r3, r3, #1
 8002460:	fa02 f303 	lsl.w	r3, r2, r3
 8002464:	69ba      	ldr	r2, [r7, #24]
 8002466:	4313      	orrs	r3, r2
 8002468:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	69ba      	ldr	r2, [r7, #24]
 800246e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002478:	2b00      	cmp	r3, #0
 800247a:	f000 80be 	beq.w	80025fa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800247e:	4b66      	ldr	r3, [pc, #408]	; (8002618 <HAL_GPIO_Init+0x324>)
 8002480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002482:	4a65      	ldr	r2, [pc, #404]	; (8002618 <HAL_GPIO_Init+0x324>)
 8002484:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002488:	6453      	str	r3, [r2, #68]	; 0x44
 800248a:	4b63      	ldr	r3, [pc, #396]	; (8002618 <HAL_GPIO_Init+0x324>)
 800248c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800248e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002492:	60fb      	str	r3, [r7, #12]
 8002494:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002496:	4a61      	ldr	r2, [pc, #388]	; (800261c <HAL_GPIO_Init+0x328>)
 8002498:	69fb      	ldr	r3, [r7, #28]
 800249a:	089b      	lsrs	r3, r3, #2
 800249c:	3302      	adds	r3, #2
 800249e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	f003 0303 	and.w	r3, r3, #3
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	220f      	movs	r2, #15
 80024ae:	fa02 f303 	lsl.w	r3, r2, r3
 80024b2:	43db      	mvns	r3, r3
 80024b4:	69ba      	ldr	r2, [r7, #24]
 80024b6:	4013      	ands	r3, r2
 80024b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	4a58      	ldr	r2, [pc, #352]	; (8002620 <HAL_GPIO_Init+0x32c>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d037      	beq.n	8002532 <HAL_GPIO_Init+0x23e>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	4a57      	ldr	r2, [pc, #348]	; (8002624 <HAL_GPIO_Init+0x330>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d031      	beq.n	800252e <HAL_GPIO_Init+0x23a>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	4a56      	ldr	r2, [pc, #344]	; (8002628 <HAL_GPIO_Init+0x334>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d02b      	beq.n	800252a <HAL_GPIO_Init+0x236>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	4a55      	ldr	r2, [pc, #340]	; (800262c <HAL_GPIO_Init+0x338>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d025      	beq.n	8002526 <HAL_GPIO_Init+0x232>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	4a54      	ldr	r2, [pc, #336]	; (8002630 <HAL_GPIO_Init+0x33c>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d01f      	beq.n	8002522 <HAL_GPIO_Init+0x22e>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4a53      	ldr	r2, [pc, #332]	; (8002634 <HAL_GPIO_Init+0x340>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d019      	beq.n	800251e <HAL_GPIO_Init+0x22a>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	4a52      	ldr	r2, [pc, #328]	; (8002638 <HAL_GPIO_Init+0x344>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d013      	beq.n	800251a <HAL_GPIO_Init+0x226>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	4a51      	ldr	r2, [pc, #324]	; (800263c <HAL_GPIO_Init+0x348>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d00d      	beq.n	8002516 <HAL_GPIO_Init+0x222>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	4a50      	ldr	r2, [pc, #320]	; (8002640 <HAL_GPIO_Init+0x34c>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d007      	beq.n	8002512 <HAL_GPIO_Init+0x21e>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	4a4f      	ldr	r2, [pc, #316]	; (8002644 <HAL_GPIO_Init+0x350>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d101      	bne.n	800250e <HAL_GPIO_Init+0x21a>
 800250a:	2309      	movs	r3, #9
 800250c:	e012      	b.n	8002534 <HAL_GPIO_Init+0x240>
 800250e:	230a      	movs	r3, #10
 8002510:	e010      	b.n	8002534 <HAL_GPIO_Init+0x240>
 8002512:	2308      	movs	r3, #8
 8002514:	e00e      	b.n	8002534 <HAL_GPIO_Init+0x240>
 8002516:	2307      	movs	r3, #7
 8002518:	e00c      	b.n	8002534 <HAL_GPIO_Init+0x240>
 800251a:	2306      	movs	r3, #6
 800251c:	e00a      	b.n	8002534 <HAL_GPIO_Init+0x240>
 800251e:	2305      	movs	r3, #5
 8002520:	e008      	b.n	8002534 <HAL_GPIO_Init+0x240>
 8002522:	2304      	movs	r3, #4
 8002524:	e006      	b.n	8002534 <HAL_GPIO_Init+0x240>
 8002526:	2303      	movs	r3, #3
 8002528:	e004      	b.n	8002534 <HAL_GPIO_Init+0x240>
 800252a:	2302      	movs	r3, #2
 800252c:	e002      	b.n	8002534 <HAL_GPIO_Init+0x240>
 800252e:	2301      	movs	r3, #1
 8002530:	e000      	b.n	8002534 <HAL_GPIO_Init+0x240>
 8002532:	2300      	movs	r3, #0
 8002534:	69fa      	ldr	r2, [r7, #28]
 8002536:	f002 0203 	and.w	r2, r2, #3
 800253a:	0092      	lsls	r2, r2, #2
 800253c:	4093      	lsls	r3, r2
 800253e:	69ba      	ldr	r2, [r7, #24]
 8002540:	4313      	orrs	r3, r2
 8002542:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002544:	4935      	ldr	r1, [pc, #212]	; (800261c <HAL_GPIO_Init+0x328>)
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	089b      	lsrs	r3, r3, #2
 800254a:	3302      	adds	r3, #2
 800254c:	69ba      	ldr	r2, [r7, #24]
 800254e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002552:	4b3d      	ldr	r3, [pc, #244]	; (8002648 <HAL_GPIO_Init+0x354>)
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	43db      	mvns	r3, r3
 800255c:	69ba      	ldr	r2, [r7, #24]
 800255e:	4013      	ands	r3, r2
 8002560:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d003      	beq.n	8002576 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800256e:	69ba      	ldr	r2, [r7, #24]
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	4313      	orrs	r3, r2
 8002574:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002576:	4a34      	ldr	r2, [pc, #208]	; (8002648 <HAL_GPIO_Init+0x354>)
 8002578:	69bb      	ldr	r3, [r7, #24]
 800257a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800257c:	4b32      	ldr	r3, [pc, #200]	; (8002648 <HAL_GPIO_Init+0x354>)
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	43db      	mvns	r3, r3
 8002586:	69ba      	ldr	r2, [r7, #24]
 8002588:	4013      	ands	r3, r2
 800258a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002594:	2b00      	cmp	r3, #0
 8002596:	d003      	beq.n	80025a0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002598:	69ba      	ldr	r2, [r7, #24]
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	4313      	orrs	r3, r2
 800259e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80025a0:	4a29      	ldr	r2, [pc, #164]	; (8002648 <HAL_GPIO_Init+0x354>)
 80025a2:	69bb      	ldr	r3, [r7, #24]
 80025a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80025a6:	4b28      	ldr	r3, [pc, #160]	; (8002648 <HAL_GPIO_Init+0x354>)
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	43db      	mvns	r3, r3
 80025b0:	69ba      	ldr	r2, [r7, #24]
 80025b2:	4013      	ands	r3, r2
 80025b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d003      	beq.n	80025ca <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80025c2:	69ba      	ldr	r2, [r7, #24]
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	4313      	orrs	r3, r2
 80025c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80025ca:	4a1f      	ldr	r2, [pc, #124]	; (8002648 <HAL_GPIO_Init+0x354>)
 80025cc:	69bb      	ldr	r3, [r7, #24]
 80025ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025d0:	4b1d      	ldr	r3, [pc, #116]	; (8002648 <HAL_GPIO_Init+0x354>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	43db      	mvns	r3, r3
 80025da:	69ba      	ldr	r2, [r7, #24]
 80025dc:	4013      	ands	r3, r2
 80025de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d003      	beq.n	80025f4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80025ec:	69ba      	ldr	r2, [r7, #24]
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	4313      	orrs	r3, r2
 80025f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025f4:	4a14      	ldr	r2, [pc, #80]	; (8002648 <HAL_GPIO_Init+0x354>)
 80025f6:	69bb      	ldr	r3, [r7, #24]
 80025f8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	3301      	adds	r3, #1
 80025fe:	61fb      	str	r3, [r7, #28]
 8002600:	69fb      	ldr	r3, [r7, #28]
 8002602:	2b0f      	cmp	r3, #15
 8002604:	f67f ae86 	bls.w	8002314 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002608:	bf00      	nop
 800260a:	bf00      	nop
 800260c:	3724      	adds	r7, #36	; 0x24
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr
 8002616:	bf00      	nop
 8002618:	40023800 	.word	0x40023800
 800261c:	40013800 	.word	0x40013800
 8002620:	40020000 	.word	0x40020000
 8002624:	40020400 	.word	0x40020400
 8002628:	40020800 	.word	0x40020800
 800262c:	40020c00 	.word	0x40020c00
 8002630:	40021000 	.word	0x40021000
 8002634:	40021400 	.word	0x40021400
 8002638:	40021800 	.word	0x40021800
 800263c:	40021c00 	.word	0x40021c00
 8002640:	40022000 	.word	0x40022000
 8002644:	40022400 	.word	0x40022400
 8002648:	40013c00 	.word	0x40013c00

0800264c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800264c:	b480      	push	{r7}
 800264e:	b083      	sub	sp, #12
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	460b      	mov	r3, r1
 8002656:	807b      	strh	r3, [r7, #2]
 8002658:	4613      	mov	r3, r2
 800265a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800265c:	787b      	ldrb	r3, [r7, #1]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d003      	beq.n	800266a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002662:	887a      	ldrh	r2, [r7, #2]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002668:	e003      	b.n	8002672 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800266a:	887b      	ldrh	r3, [r7, #2]
 800266c:	041a      	lsls	r2, r3, #16
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	619a      	str	r2, [r3, #24]
}
 8002672:	bf00      	nop
 8002674:	370c      	adds	r7, #12
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr

0800267e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800267e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002680:	b08f      	sub	sp, #60	; 0x3c
 8002682:	af0a      	add	r7, sp, #40	; 0x28
 8002684:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d101      	bne.n	8002690 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	e116      	b.n	80028be <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800269c:	b2db      	uxtb	r3, r3
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d106      	bne.n	80026b0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2200      	movs	r2, #0
 80026a6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f7ff fb80 	bl	8001db0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2203      	movs	r2, #3
 80026b4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d102      	bne.n	80026ca <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2200      	movs	r2, #0
 80026c8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4618      	mov	r0, r3
 80026d0:	f002 fcca 	bl	8005068 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	603b      	str	r3, [r7, #0]
 80026da:	687e      	ldr	r6, [r7, #4]
 80026dc:	466d      	mov	r5, sp
 80026de:	f106 0410 	add.w	r4, r6, #16
 80026e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026ea:	e894 0003 	ldmia.w	r4, {r0, r1}
 80026ee:	e885 0003 	stmia.w	r5, {r0, r1}
 80026f2:	1d33      	adds	r3, r6, #4
 80026f4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80026f6:	6838      	ldr	r0, [r7, #0]
 80026f8:	f002 fc5e 	bl	8004fb8 <USB_CoreInit>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d005      	beq.n	800270e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2202      	movs	r2, #2
 8002706:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e0d7      	b.n	80028be <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	2100      	movs	r1, #0
 8002714:	4618      	mov	r0, r3
 8002716:	f002 fcb8 	bl	800508a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800271a:	2300      	movs	r3, #0
 800271c:	73fb      	strb	r3, [r7, #15]
 800271e:	e04a      	b.n	80027b6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002720:	7bfa      	ldrb	r2, [r7, #15]
 8002722:	6879      	ldr	r1, [r7, #4]
 8002724:	4613      	mov	r3, r2
 8002726:	00db      	lsls	r3, r3, #3
 8002728:	4413      	add	r3, r2
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	440b      	add	r3, r1
 800272e:	333d      	adds	r3, #61	; 0x3d
 8002730:	2201      	movs	r2, #1
 8002732:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002734:	7bfa      	ldrb	r2, [r7, #15]
 8002736:	6879      	ldr	r1, [r7, #4]
 8002738:	4613      	mov	r3, r2
 800273a:	00db      	lsls	r3, r3, #3
 800273c:	4413      	add	r3, r2
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	440b      	add	r3, r1
 8002742:	333c      	adds	r3, #60	; 0x3c
 8002744:	7bfa      	ldrb	r2, [r7, #15]
 8002746:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002748:	7bfa      	ldrb	r2, [r7, #15]
 800274a:	7bfb      	ldrb	r3, [r7, #15]
 800274c:	b298      	uxth	r0, r3
 800274e:	6879      	ldr	r1, [r7, #4]
 8002750:	4613      	mov	r3, r2
 8002752:	00db      	lsls	r3, r3, #3
 8002754:	4413      	add	r3, r2
 8002756:	009b      	lsls	r3, r3, #2
 8002758:	440b      	add	r3, r1
 800275a:	3344      	adds	r3, #68	; 0x44
 800275c:	4602      	mov	r2, r0
 800275e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002760:	7bfa      	ldrb	r2, [r7, #15]
 8002762:	6879      	ldr	r1, [r7, #4]
 8002764:	4613      	mov	r3, r2
 8002766:	00db      	lsls	r3, r3, #3
 8002768:	4413      	add	r3, r2
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	440b      	add	r3, r1
 800276e:	3340      	adds	r3, #64	; 0x40
 8002770:	2200      	movs	r2, #0
 8002772:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002774:	7bfa      	ldrb	r2, [r7, #15]
 8002776:	6879      	ldr	r1, [r7, #4]
 8002778:	4613      	mov	r3, r2
 800277a:	00db      	lsls	r3, r3, #3
 800277c:	4413      	add	r3, r2
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	440b      	add	r3, r1
 8002782:	3348      	adds	r3, #72	; 0x48
 8002784:	2200      	movs	r2, #0
 8002786:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002788:	7bfa      	ldrb	r2, [r7, #15]
 800278a:	6879      	ldr	r1, [r7, #4]
 800278c:	4613      	mov	r3, r2
 800278e:	00db      	lsls	r3, r3, #3
 8002790:	4413      	add	r3, r2
 8002792:	009b      	lsls	r3, r3, #2
 8002794:	440b      	add	r3, r1
 8002796:	334c      	adds	r3, #76	; 0x4c
 8002798:	2200      	movs	r2, #0
 800279a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800279c:	7bfa      	ldrb	r2, [r7, #15]
 800279e:	6879      	ldr	r1, [r7, #4]
 80027a0:	4613      	mov	r3, r2
 80027a2:	00db      	lsls	r3, r3, #3
 80027a4:	4413      	add	r3, r2
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	440b      	add	r3, r1
 80027aa:	3354      	adds	r3, #84	; 0x54
 80027ac:	2200      	movs	r2, #0
 80027ae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027b0:	7bfb      	ldrb	r3, [r7, #15]
 80027b2:	3301      	adds	r3, #1
 80027b4:	73fb      	strb	r3, [r7, #15]
 80027b6:	7bfa      	ldrb	r2, [r7, #15]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	429a      	cmp	r2, r3
 80027be:	d3af      	bcc.n	8002720 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027c0:	2300      	movs	r3, #0
 80027c2:	73fb      	strb	r3, [r7, #15]
 80027c4:	e044      	b.n	8002850 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80027c6:	7bfa      	ldrb	r2, [r7, #15]
 80027c8:	6879      	ldr	r1, [r7, #4]
 80027ca:	4613      	mov	r3, r2
 80027cc:	00db      	lsls	r3, r3, #3
 80027ce:	4413      	add	r3, r2
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	440b      	add	r3, r1
 80027d4:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80027d8:	2200      	movs	r2, #0
 80027da:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80027dc:	7bfa      	ldrb	r2, [r7, #15]
 80027de:	6879      	ldr	r1, [r7, #4]
 80027e0:	4613      	mov	r3, r2
 80027e2:	00db      	lsls	r3, r3, #3
 80027e4:	4413      	add	r3, r2
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	440b      	add	r3, r1
 80027ea:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80027ee:	7bfa      	ldrb	r2, [r7, #15]
 80027f0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80027f2:	7bfa      	ldrb	r2, [r7, #15]
 80027f4:	6879      	ldr	r1, [r7, #4]
 80027f6:	4613      	mov	r3, r2
 80027f8:	00db      	lsls	r3, r3, #3
 80027fa:	4413      	add	r3, r2
 80027fc:	009b      	lsls	r3, r3, #2
 80027fe:	440b      	add	r3, r1
 8002800:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002804:	2200      	movs	r2, #0
 8002806:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002808:	7bfa      	ldrb	r2, [r7, #15]
 800280a:	6879      	ldr	r1, [r7, #4]
 800280c:	4613      	mov	r3, r2
 800280e:	00db      	lsls	r3, r3, #3
 8002810:	4413      	add	r3, r2
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	440b      	add	r3, r1
 8002816:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800281a:	2200      	movs	r2, #0
 800281c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800281e:	7bfa      	ldrb	r2, [r7, #15]
 8002820:	6879      	ldr	r1, [r7, #4]
 8002822:	4613      	mov	r3, r2
 8002824:	00db      	lsls	r3, r3, #3
 8002826:	4413      	add	r3, r2
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	440b      	add	r3, r1
 800282c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002830:	2200      	movs	r2, #0
 8002832:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002834:	7bfa      	ldrb	r2, [r7, #15]
 8002836:	6879      	ldr	r1, [r7, #4]
 8002838:	4613      	mov	r3, r2
 800283a:	00db      	lsls	r3, r3, #3
 800283c:	4413      	add	r3, r2
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	440b      	add	r3, r1
 8002842:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002846:	2200      	movs	r2, #0
 8002848:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800284a:	7bfb      	ldrb	r3, [r7, #15]
 800284c:	3301      	adds	r3, #1
 800284e:	73fb      	strb	r3, [r7, #15]
 8002850:	7bfa      	ldrb	r2, [r7, #15]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	429a      	cmp	r2, r3
 8002858:	d3b5      	bcc.n	80027c6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	603b      	str	r3, [r7, #0]
 8002860:	687e      	ldr	r6, [r7, #4]
 8002862:	466d      	mov	r5, sp
 8002864:	f106 0410 	add.w	r4, r6, #16
 8002868:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800286a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800286c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800286e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002870:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002874:	e885 0003 	stmia.w	r5, {r0, r1}
 8002878:	1d33      	adds	r3, r6, #4
 800287a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800287c:	6838      	ldr	r0, [r7, #0]
 800287e:	f002 fc51 	bl	8005124 <USB_DevInit>
 8002882:	4603      	mov	r3, r0
 8002884:	2b00      	cmp	r3, #0
 8002886:	d005      	beq.n	8002894 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2202      	movs	r2, #2
 800288c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	e014      	b.n	80028be <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2200      	movs	r2, #0
 8002898:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2201      	movs	r2, #1
 80028a0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d102      	bne.n	80028b2 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80028ac:	6878      	ldr	r0, [r7, #4]
 80028ae:	f000 f80b 	bl	80028c8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4618      	mov	r0, r3
 80028b8:	f002 fe0f 	bl	80054da <USB_DevDisconnect>

  return HAL_OK;
 80028bc:	2300      	movs	r3, #0
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3714      	adds	r7, #20
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080028c8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b085      	sub	sp, #20
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2201      	movs	r2, #1
 80028da:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2200      	movs	r2, #0
 80028e2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	699b      	ldr	r3, [r3, #24]
 80028ea:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80028f6:	4b05      	ldr	r3, [pc, #20]	; (800290c <HAL_PCDEx_ActivateLPM+0x44>)
 80028f8:	4313      	orrs	r3, r2
 80028fa:	68fa      	ldr	r2, [r7, #12]
 80028fc:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80028fe:	2300      	movs	r3, #0
}
 8002900:	4618      	mov	r0, r3
 8002902:	3714      	adds	r7, #20
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr
 800290c:	10000003 	.word	0x10000003

08002910 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002910:	b480      	push	{r7}
 8002912:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002914:	4b05      	ldr	r3, [pc, #20]	; (800292c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a04      	ldr	r2, [pc, #16]	; (800292c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800291a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800291e:	6013      	str	r3, [r2, #0]
}
 8002920:	bf00      	nop
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr
 800292a:	bf00      	nop
 800292c:	40007000 	.word	0x40007000

08002930 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b086      	sub	sp, #24
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002938:	2300      	movs	r3, #0
 800293a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d101      	bne.n	8002946 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e291      	b.n	8002e6a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0301 	and.w	r3, r3, #1
 800294e:	2b00      	cmp	r3, #0
 8002950:	f000 8087 	beq.w	8002a62 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002954:	4b96      	ldr	r3, [pc, #600]	; (8002bb0 <HAL_RCC_OscConfig+0x280>)
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	f003 030c 	and.w	r3, r3, #12
 800295c:	2b04      	cmp	r3, #4
 800295e:	d00c      	beq.n	800297a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002960:	4b93      	ldr	r3, [pc, #588]	; (8002bb0 <HAL_RCC_OscConfig+0x280>)
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	f003 030c 	and.w	r3, r3, #12
 8002968:	2b08      	cmp	r3, #8
 800296a:	d112      	bne.n	8002992 <HAL_RCC_OscConfig+0x62>
 800296c:	4b90      	ldr	r3, [pc, #576]	; (8002bb0 <HAL_RCC_OscConfig+0x280>)
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002974:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002978:	d10b      	bne.n	8002992 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800297a:	4b8d      	ldr	r3, [pc, #564]	; (8002bb0 <HAL_RCC_OscConfig+0x280>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002982:	2b00      	cmp	r3, #0
 8002984:	d06c      	beq.n	8002a60 <HAL_RCC_OscConfig+0x130>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d168      	bne.n	8002a60 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e26b      	b.n	8002e6a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800299a:	d106      	bne.n	80029aa <HAL_RCC_OscConfig+0x7a>
 800299c:	4b84      	ldr	r3, [pc, #528]	; (8002bb0 <HAL_RCC_OscConfig+0x280>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a83      	ldr	r2, [pc, #524]	; (8002bb0 <HAL_RCC_OscConfig+0x280>)
 80029a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029a6:	6013      	str	r3, [r2, #0]
 80029a8:	e02e      	b.n	8002a08 <HAL_RCC_OscConfig+0xd8>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d10c      	bne.n	80029cc <HAL_RCC_OscConfig+0x9c>
 80029b2:	4b7f      	ldr	r3, [pc, #508]	; (8002bb0 <HAL_RCC_OscConfig+0x280>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a7e      	ldr	r2, [pc, #504]	; (8002bb0 <HAL_RCC_OscConfig+0x280>)
 80029b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029bc:	6013      	str	r3, [r2, #0]
 80029be:	4b7c      	ldr	r3, [pc, #496]	; (8002bb0 <HAL_RCC_OscConfig+0x280>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a7b      	ldr	r2, [pc, #492]	; (8002bb0 <HAL_RCC_OscConfig+0x280>)
 80029c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029c8:	6013      	str	r3, [r2, #0]
 80029ca:	e01d      	b.n	8002a08 <HAL_RCC_OscConfig+0xd8>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029d4:	d10c      	bne.n	80029f0 <HAL_RCC_OscConfig+0xc0>
 80029d6:	4b76      	ldr	r3, [pc, #472]	; (8002bb0 <HAL_RCC_OscConfig+0x280>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a75      	ldr	r2, [pc, #468]	; (8002bb0 <HAL_RCC_OscConfig+0x280>)
 80029dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029e0:	6013      	str	r3, [r2, #0]
 80029e2:	4b73      	ldr	r3, [pc, #460]	; (8002bb0 <HAL_RCC_OscConfig+0x280>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a72      	ldr	r2, [pc, #456]	; (8002bb0 <HAL_RCC_OscConfig+0x280>)
 80029e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029ec:	6013      	str	r3, [r2, #0]
 80029ee:	e00b      	b.n	8002a08 <HAL_RCC_OscConfig+0xd8>
 80029f0:	4b6f      	ldr	r3, [pc, #444]	; (8002bb0 <HAL_RCC_OscConfig+0x280>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a6e      	ldr	r2, [pc, #440]	; (8002bb0 <HAL_RCC_OscConfig+0x280>)
 80029f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029fa:	6013      	str	r3, [r2, #0]
 80029fc:	4b6c      	ldr	r3, [pc, #432]	; (8002bb0 <HAL_RCC_OscConfig+0x280>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a6b      	ldr	r2, [pc, #428]	; (8002bb0 <HAL_RCC_OscConfig+0x280>)
 8002a02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d013      	beq.n	8002a38 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a10:	f7ff fb4e 	bl	80020b0 <HAL_GetTick>
 8002a14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a16:	e008      	b.n	8002a2a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a18:	f7ff fb4a 	bl	80020b0 <HAL_GetTick>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	1ad3      	subs	r3, r2, r3
 8002a22:	2b64      	cmp	r3, #100	; 0x64
 8002a24:	d901      	bls.n	8002a2a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a26:	2303      	movs	r3, #3
 8002a28:	e21f      	b.n	8002e6a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a2a:	4b61      	ldr	r3, [pc, #388]	; (8002bb0 <HAL_RCC_OscConfig+0x280>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d0f0      	beq.n	8002a18 <HAL_RCC_OscConfig+0xe8>
 8002a36:	e014      	b.n	8002a62 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a38:	f7ff fb3a 	bl	80020b0 <HAL_GetTick>
 8002a3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a3e:	e008      	b.n	8002a52 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a40:	f7ff fb36 	bl	80020b0 <HAL_GetTick>
 8002a44:	4602      	mov	r2, r0
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	2b64      	cmp	r3, #100	; 0x64
 8002a4c:	d901      	bls.n	8002a52 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e20b      	b.n	8002e6a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a52:	4b57      	ldr	r3, [pc, #348]	; (8002bb0 <HAL_RCC_OscConfig+0x280>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d1f0      	bne.n	8002a40 <HAL_RCC_OscConfig+0x110>
 8002a5e:	e000      	b.n	8002a62 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 0302 	and.w	r3, r3, #2
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d069      	beq.n	8002b42 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a6e:	4b50      	ldr	r3, [pc, #320]	; (8002bb0 <HAL_RCC_OscConfig+0x280>)
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	f003 030c 	and.w	r3, r3, #12
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d00b      	beq.n	8002a92 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a7a:	4b4d      	ldr	r3, [pc, #308]	; (8002bb0 <HAL_RCC_OscConfig+0x280>)
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	f003 030c 	and.w	r3, r3, #12
 8002a82:	2b08      	cmp	r3, #8
 8002a84:	d11c      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x190>
 8002a86:	4b4a      	ldr	r3, [pc, #296]	; (8002bb0 <HAL_RCC_OscConfig+0x280>)
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d116      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a92:	4b47      	ldr	r3, [pc, #284]	; (8002bb0 <HAL_RCC_OscConfig+0x280>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 0302 	and.w	r3, r3, #2
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d005      	beq.n	8002aaa <HAL_RCC_OscConfig+0x17a>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	68db      	ldr	r3, [r3, #12]
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d001      	beq.n	8002aaa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e1df      	b.n	8002e6a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002aaa:	4b41      	ldr	r3, [pc, #260]	; (8002bb0 <HAL_RCC_OscConfig+0x280>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	691b      	ldr	r3, [r3, #16]
 8002ab6:	00db      	lsls	r3, r3, #3
 8002ab8:	493d      	ldr	r1, [pc, #244]	; (8002bb0 <HAL_RCC_OscConfig+0x280>)
 8002aba:	4313      	orrs	r3, r2
 8002abc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002abe:	e040      	b.n	8002b42 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d023      	beq.n	8002b10 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ac8:	4b39      	ldr	r3, [pc, #228]	; (8002bb0 <HAL_RCC_OscConfig+0x280>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a38      	ldr	r2, [pc, #224]	; (8002bb0 <HAL_RCC_OscConfig+0x280>)
 8002ace:	f043 0301 	orr.w	r3, r3, #1
 8002ad2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ad4:	f7ff faec 	bl	80020b0 <HAL_GetTick>
 8002ad8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ada:	e008      	b.n	8002aee <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002adc:	f7ff fae8 	bl	80020b0 <HAL_GetTick>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	2b02      	cmp	r3, #2
 8002ae8:	d901      	bls.n	8002aee <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002aea:	2303      	movs	r3, #3
 8002aec:	e1bd      	b.n	8002e6a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002aee:	4b30      	ldr	r3, [pc, #192]	; (8002bb0 <HAL_RCC_OscConfig+0x280>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 0302 	and.w	r3, r3, #2
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d0f0      	beq.n	8002adc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002afa:	4b2d      	ldr	r3, [pc, #180]	; (8002bb0 <HAL_RCC_OscConfig+0x280>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	691b      	ldr	r3, [r3, #16]
 8002b06:	00db      	lsls	r3, r3, #3
 8002b08:	4929      	ldr	r1, [pc, #164]	; (8002bb0 <HAL_RCC_OscConfig+0x280>)
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	600b      	str	r3, [r1, #0]
 8002b0e:	e018      	b.n	8002b42 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b10:	4b27      	ldr	r3, [pc, #156]	; (8002bb0 <HAL_RCC_OscConfig+0x280>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a26      	ldr	r2, [pc, #152]	; (8002bb0 <HAL_RCC_OscConfig+0x280>)
 8002b16:	f023 0301 	bic.w	r3, r3, #1
 8002b1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b1c:	f7ff fac8 	bl	80020b0 <HAL_GetTick>
 8002b20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b22:	e008      	b.n	8002b36 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b24:	f7ff fac4 	bl	80020b0 <HAL_GetTick>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	2b02      	cmp	r3, #2
 8002b30:	d901      	bls.n	8002b36 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002b32:	2303      	movs	r3, #3
 8002b34:	e199      	b.n	8002e6a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b36:	4b1e      	ldr	r3, [pc, #120]	; (8002bb0 <HAL_RCC_OscConfig+0x280>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 0302 	and.w	r3, r3, #2
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d1f0      	bne.n	8002b24 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 0308 	and.w	r3, r3, #8
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d038      	beq.n	8002bc0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	695b      	ldr	r3, [r3, #20]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d019      	beq.n	8002b8a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b56:	4b16      	ldr	r3, [pc, #88]	; (8002bb0 <HAL_RCC_OscConfig+0x280>)
 8002b58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b5a:	4a15      	ldr	r2, [pc, #84]	; (8002bb0 <HAL_RCC_OscConfig+0x280>)
 8002b5c:	f043 0301 	orr.w	r3, r3, #1
 8002b60:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b62:	f7ff faa5 	bl	80020b0 <HAL_GetTick>
 8002b66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b68:	e008      	b.n	8002b7c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b6a:	f7ff faa1 	bl	80020b0 <HAL_GetTick>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	1ad3      	subs	r3, r2, r3
 8002b74:	2b02      	cmp	r3, #2
 8002b76:	d901      	bls.n	8002b7c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002b78:	2303      	movs	r3, #3
 8002b7a:	e176      	b.n	8002e6a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b7c:	4b0c      	ldr	r3, [pc, #48]	; (8002bb0 <HAL_RCC_OscConfig+0x280>)
 8002b7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b80:	f003 0302 	and.w	r3, r3, #2
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d0f0      	beq.n	8002b6a <HAL_RCC_OscConfig+0x23a>
 8002b88:	e01a      	b.n	8002bc0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b8a:	4b09      	ldr	r3, [pc, #36]	; (8002bb0 <HAL_RCC_OscConfig+0x280>)
 8002b8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b8e:	4a08      	ldr	r2, [pc, #32]	; (8002bb0 <HAL_RCC_OscConfig+0x280>)
 8002b90:	f023 0301 	bic.w	r3, r3, #1
 8002b94:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b96:	f7ff fa8b 	bl	80020b0 <HAL_GetTick>
 8002b9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b9c:	e00a      	b.n	8002bb4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b9e:	f7ff fa87 	bl	80020b0 <HAL_GetTick>
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	1ad3      	subs	r3, r2, r3
 8002ba8:	2b02      	cmp	r3, #2
 8002baa:	d903      	bls.n	8002bb4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002bac:	2303      	movs	r3, #3
 8002bae:	e15c      	b.n	8002e6a <HAL_RCC_OscConfig+0x53a>
 8002bb0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bb4:	4b91      	ldr	r3, [pc, #580]	; (8002dfc <HAL_RCC_OscConfig+0x4cc>)
 8002bb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bb8:	f003 0302 	and.w	r3, r3, #2
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d1ee      	bne.n	8002b9e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f003 0304 	and.w	r3, r3, #4
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	f000 80a4 	beq.w	8002d16 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bce:	4b8b      	ldr	r3, [pc, #556]	; (8002dfc <HAL_RCC_OscConfig+0x4cc>)
 8002bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d10d      	bne.n	8002bf6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bda:	4b88      	ldr	r3, [pc, #544]	; (8002dfc <HAL_RCC_OscConfig+0x4cc>)
 8002bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bde:	4a87      	ldr	r2, [pc, #540]	; (8002dfc <HAL_RCC_OscConfig+0x4cc>)
 8002be0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002be4:	6413      	str	r3, [r2, #64]	; 0x40
 8002be6:	4b85      	ldr	r3, [pc, #532]	; (8002dfc <HAL_RCC_OscConfig+0x4cc>)
 8002be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bee:	60bb      	str	r3, [r7, #8]
 8002bf0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bf6:	4b82      	ldr	r3, [pc, #520]	; (8002e00 <HAL_RCC_OscConfig+0x4d0>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d118      	bne.n	8002c34 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002c02:	4b7f      	ldr	r3, [pc, #508]	; (8002e00 <HAL_RCC_OscConfig+0x4d0>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a7e      	ldr	r2, [pc, #504]	; (8002e00 <HAL_RCC_OscConfig+0x4d0>)
 8002c08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c0e:	f7ff fa4f 	bl	80020b0 <HAL_GetTick>
 8002c12:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c14:	e008      	b.n	8002c28 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c16:	f7ff fa4b 	bl	80020b0 <HAL_GetTick>
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	1ad3      	subs	r3, r2, r3
 8002c20:	2b64      	cmp	r3, #100	; 0x64
 8002c22:	d901      	bls.n	8002c28 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002c24:	2303      	movs	r3, #3
 8002c26:	e120      	b.n	8002e6a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c28:	4b75      	ldr	r3, [pc, #468]	; (8002e00 <HAL_RCC_OscConfig+0x4d0>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d0f0      	beq.n	8002c16 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d106      	bne.n	8002c4a <HAL_RCC_OscConfig+0x31a>
 8002c3c:	4b6f      	ldr	r3, [pc, #444]	; (8002dfc <HAL_RCC_OscConfig+0x4cc>)
 8002c3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c40:	4a6e      	ldr	r2, [pc, #440]	; (8002dfc <HAL_RCC_OscConfig+0x4cc>)
 8002c42:	f043 0301 	orr.w	r3, r3, #1
 8002c46:	6713      	str	r3, [r2, #112]	; 0x70
 8002c48:	e02d      	b.n	8002ca6 <HAL_RCC_OscConfig+0x376>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d10c      	bne.n	8002c6c <HAL_RCC_OscConfig+0x33c>
 8002c52:	4b6a      	ldr	r3, [pc, #424]	; (8002dfc <HAL_RCC_OscConfig+0x4cc>)
 8002c54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c56:	4a69      	ldr	r2, [pc, #420]	; (8002dfc <HAL_RCC_OscConfig+0x4cc>)
 8002c58:	f023 0301 	bic.w	r3, r3, #1
 8002c5c:	6713      	str	r3, [r2, #112]	; 0x70
 8002c5e:	4b67      	ldr	r3, [pc, #412]	; (8002dfc <HAL_RCC_OscConfig+0x4cc>)
 8002c60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c62:	4a66      	ldr	r2, [pc, #408]	; (8002dfc <HAL_RCC_OscConfig+0x4cc>)
 8002c64:	f023 0304 	bic.w	r3, r3, #4
 8002c68:	6713      	str	r3, [r2, #112]	; 0x70
 8002c6a:	e01c      	b.n	8002ca6 <HAL_RCC_OscConfig+0x376>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	2b05      	cmp	r3, #5
 8002c72:	d10c      	bne.n	8002c8e <HAL_RCC_OscConfig+0x35e>
 8002c74:	4b61      	ldr	r3, [pc, #388]	; (8002dfc <HAL_RCC_OscConfig+0x4cc>)
 8002c76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c78:	4a60      	ldr	r2, [pc, #384]	; (8002dfc <HAL_RCC_OscConfig+0x4cc>)
 8002c7a:	f043 0304 	orr.w	r3, r3, #4
 8002c7e:	6713      	str	r3, [r2, #112]	; 0x70
 8002c80:	4b5e      	ldr	r3, [pc, #376]	; (8002dfc <HAL_RCC_OscConfig+0x4cc>)
 8002c82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c84:	4a5d      	ldr	r2, [pc, #372]	; (8002dfc <HAL_RCC_OscConfig+0x4cc>)
 8002c86:	f043 0301 	orr.w	r3, r3, #1
 8002c8a:	6713      	str	r3, [r2, #112]	; 0x70
 8002c8c:	e00b      	b.n	8002ca6 <HAL_RCC_OscConfig+0x376>
 8002c8e:	4b5b      	ldr	r3, [pc, #364]	; (8002dfc <HAL_RCC_OscConfig+0x4cc>)
 8002c90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c92:	4a5a      	ldr	r2, [pc, #360]	; (8002dfc <HAL_RCC_OscConfig+0x4cc>)
 8002c94:	f023 0301 	bic.w	r3, r3, #1
 8002c98:	6713      	str	r3, [r2, #112]	; 0x70
 8002c9a:	4b58      	ldr	r3, [pc, #352]	; (8002dfc <HAL_RCC_OscConfig+0x4cc>)
 8002c9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c9e:	4a57      	ldr	r2, [pc, #348]	; (8002dfc <HAL_RCC_OscConfig+0x4cc>)
 8002ca0:	f023 0304 	bic.w	r3, r3, #4
 8002ca4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d015      	beq.n	8002cda <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cae:	f7ff f9ff 	bl	80020b0 <HAL_GetTick>
 8002cb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cb4:	e00a      	b.n	8002ccc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cb6:	f7ff f9fb 	bl	80020b0 <HAL_GetTick>
 8002cba:	4602      	mov	r2, r0
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	1ad3      	subs	r3, r2, r3
 8002cc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d901      	bls.n	8002ccc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002cc8:	2303      	movs	r3, #3
 8002cca:	e0ce      	b.n	8002e6a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ccc:	4b4b      	ldr	r3, [pc, #300]	; (8002dfc <HAL_RCC_OscConfig+0x4cc>)
 8002cce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cd0:	f003 0302 	and.w	r3, r3, #2
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d0ee      	beq.n	8002cb6 <HAL_RCC_OscConfig+0x386>
 8002cd8:	e014      	b.n	8002d04 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cda:	f7ff f9e9 	bl	80020b0 <HAL_GetTick>
 8002cde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ce0:	e00a      	b.n	8002cf8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ce2:	f7ff f9e5 	bl	80020b0 <HAL_GetTick>
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	1ad3      	subs	r3, r2, r3
 8002cec:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d901      	bls.n	8002cf8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002cf4:	2303      	movs	r3, #3
 8002cf6:	e0b8      	b.n	8002e6a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cf8:	4b40      	ldr	r3, [pc, #256]	; (8002dfc <HAL_RCC_OscConfig+0x4cc>)
 8002cfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cfc:	f003 0302 	and.w	r3, r3, #2
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d1ee      	bne.n	8002ce2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002d04:	7dfb      	ldrb	r3, [r7, #23]
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d105      	bne.n	8002d16 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d0a:	4b3c      	ldr	r3, [pc, #240]	; (8002dfc <HAL_RCC_OscConfig+0x4cc>)
 8002d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0e:	4a3b      	ldr	r2, [pc, #236]	; (8002dfc <HAL_RCC_OscConfig+0x4cc>)
 8002d10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d14:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	699b      	ldr	r3, [r3, #24]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	f000 80a4 	beq.w	8002e68 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d20:	4b36      	ldr	r3, [pc, #216]	; (8002dfc <HAL_RCC_OscConfig+0x4cc>)
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	f003 030c 	and.w	r3, r3, #12
 8002d28:	2b08      	cmp	r3, #8
 8002d2a:	d06b      	beq.n	8002e04 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	699b      	ldr	r3, [r3, #24]
 8002d30:	2b02      	cmp	r3, #2
 8002d32:	d149      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d34:	4b31      	ldr	r3, [pc, #196]	; (8002dfc <HAL_RCC_OscConfig+0x4cc>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a30      	ldr	r2, [pc, #192]	; (8002dfc <HAL_RCC_OscConfig+0x4cc>)
 8002d3a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d40:	f7ff f9b6 	bl	80020b0 <HAL_GetTick>
 8002d44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d46:	e008      	b.n	8002d5a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d48:	f7ff f9b2 	bl	80020b0 <HAL_GetTick>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	1ad3      	subs	r3, r2, r3
 8002d52:	2b02      	cmp	r3, #2
 8002d54:	d901      	bls.n	8002d5a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002d56:	2303      	movs	r3, #3
 8002d58:	e087      	b.n	8002e6a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d5a:	4b28      	ldr	r3, [pc, #160]	; (8002dfc <HAL_RCC_OscConfig+0x4cc>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d1f0      	bne.n	8002d48 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	69da      	ldr	r2, [r3, #28]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6a1b      	ldr	r3, [r3, #32]
 8002d6e:	431a      	orrs	r2, r3
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d74:	019b      	lsls	r3, r3, #6
 8002d76:	431a      	orrs	r2, r3
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d7c:	085b      	lsrs	r3, r3, #1
 8002d7e:	3b01      	subs	r3, #1
 8002d80:	041b      	lsls	r3, r3, #16
 8002d82:	431a      	orrs	r2, r3
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d88:	061b      	lsls	r3, r3, #24
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	4a1b      	ldr	r2, [pc, #108]	; (8002dfc <HAL_RCC_OscConfig+0x4cc>)
 8002d8e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002d92:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d94:	4b19      	ldr	r3, [pc, #100]	; (8002dfc <HAL_RCC_OscConfig+0x4cc>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a18      	ldr	r2, [pc, #96]	; (8002dfc <HAL_RCC_OscConfig+0x4cc>)
 8002d9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002da0:	f7ff f986 	bl	80020b0 <HAL_GetTick>
 8002da4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002da6:	e008      	b.n	8002dba <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002da8:	f7ff f982 	bl	80020b0 <HAL_GetTick>
 8002dac:	4602      	mov	r2, r0
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	2b02      	cmp	r3, #2
 8002db4:	d901      	bls.n	8002dba <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002db6:	2303      	movs	r3, #3
 8002db8:	e057      	b.n	8002e6a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dba:	4b10      	ldr	r3, [pc, #64]	; (8002dfc <HAL_RCC_OscConfig+0x4cc>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d0f0      	beq.n	8002da8 <HAL_RCC_OscConfig+0x478>
 8002dc6:	e04f      	b.n	8002e68 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dc8:	4b0c      	ldr	r3, [pc, #48]	; (8002dfc <HAL_RCC_OscConfig+0x4cc>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a0b      	ldr	r2, [pc, #44]	; (8002dfc <HAL_RCC_OscConfig+0x4cc>)
 8002dce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002dd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dd4:	f7ff f96c 	bl	80020b0 <HAL_GetTick>
 8002dd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dda:	e008      	b.n	8002dee <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ddc:	f7ff f968 	bl	80020b0 <HAL_GetTick>
 8002de0:	4602      	mov	r2, r0
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	2b02      	cmp	r3, #2
 8002de8:	d901      	bls.n	8002dee <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002dea:	2303      	movs	r3, #3
 8002dec:	e03d      	b.n	8002e6a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dee:	4b03      	ldr	r3, [pc, #12]	; (8002dfc <HAL_RCC_OscConfig+0x4cc>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d1f0      	bne.n	8002ddc <HAL_RCC_OscConfig+0x4ac>
 8002dfa:	e035      	b.n	8002e68 <HAL_RCC_OscConfig+0x538>
 8002dfc:	40023800 	.word	0x40023800
 8002e00:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002e04:	4b1b      	ldr	r3, [pc, #108]	; (8002e74 <HAL_RCC_OscConfig+0x544>)
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	699b      	ldr	r3, [r3, #24]
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	d028      	beq.n	8002e64 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d121      	bne.n	8002e64 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	d11a      	bne.n	8002e64 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e2e:	68fa      	ldr	r2, [r7, #12]
 8002e30:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002e34:	4013      	ands	r3, r2
 8002e36:	687a      	ldr	r2, [r7, #4]
 8002e38:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002e3a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d111      	bne.n	8002e64 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e4a:	085b      	lsrs	r3, r3, #1
 8002e4c:	3b01      	subs	r3, #1
 8002e4e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d107      	bne.n	8002e64 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e5e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002e60:	429a      	cmp	r2, r3
 8002e62:	d001      	beq.n	8002e68 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	e000      	b.n	8002e6a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002e68:	2300      	movs	r3, #0
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3718      	adds	r7, #24
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	40023800 	.word	0x40023800

08002e78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b084      	sub	sp, #16
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
 8002e80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002e82:	2300      	movs	r3, #0
 8002e84:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d101      	bne.n	8002e90 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e0d0      	b.n	8003032 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e90:	4b6a      	ldr	r3, [pc, #424]	; (800303c <HAL_RCC_ClockConfig+0x1c4>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 030f 	and.w	r3, r3, #15
 8002e98:	683a      	ldr	r2, [r7, #0]
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d910      	bls.n	8002ec0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e9e:	4b67      	ldr	r3, [pc, #412]	; (800303c <HAL_RCC_ClockConfig+0x1c4>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f023 020f 	bic.w	r2, r3, #15
 8002ea6:	4965      	ldr	r1, [pc, #404]	; (800303c <HAL_RCC_ClockConfig+0x1c4>)
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eae:	4b63      	ldr	r3, [pc, #396]	; (800303c <HAL_RCC_ClockConfig+0x1c4>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 030f 	and.w	r3, r3, #15
 8002eb6:	683a      	ldr	r2, [r7, #0]
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d001      	beq.n	8002ec0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e0b8      	b.n	8003032 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 0302 	and.w	r3, r3, #2
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d020      	beq.n	8002f0e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 0304 	and.w	r3, r3, #4
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d005      	beq.n	8002ee4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ed8:	4b59      	ldr	r3, [pc, #356]	; (8003040 <HAL_RCC_ClockConfig+0x1c8>)
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	4a58      	ldr	r2, [pc, #352]	; (8003040 <HAL_RCC_ClockConfig+0x1c8>)
 8002ede:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002ee2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f003 0308 	and.w	r3, r3, #8
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d005      	beq.n	8002efc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ef0:	4b53      	ldr	r3, [pc, #332]	; (8003040 <HAL_RCC_ClockConfig+0x1c8>)
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	4a52      	ldr	r2, [pc, #328]	; (8003040 <HAL_RCC_ClockConfig+0x1c8>)
 8002ef6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002efa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002efc:	4b50      	ldr	r3, [pc, #320]	; (8003040 <HAL_RCC_ClockConfig+0x1c8>)
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	494d      	ldr	r1, [pc, #308]	; (8003040 <HAL_RCC_ClockConfig+0x1c8>)
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 0301 	and.w	r3, r3, #1
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d040      	beq.n	8002f9c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d107      	bne.n	8002f32 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f22:	4b47      	ldr	r3, [pc, #284]	; (8003040 <HAL_RCC_ClockConfig+0x1c8>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d115      	bne.n	8002f5a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e07f      	b.n	8003032 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	d107      	bne.n	8002f4a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f3a:	4b41      	ldr	r3, [pc, #260]	; (8003040 <HAL_RCC_ClockConfig+0x1c8>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d109      	bne.n	8002f5a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e073      	b.n	8003032 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f4a:	4b3d      	ldr	r3, [pc, #244]	; (8003040 <HAL_RCC_ClockConfig+0x1c8>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 0302 	and.w	r3, r3, #2
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d101      	bne.n	8002f5a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	e06b      	b.n	8003032 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f5a:	4b39      	ldr	r3, [pc, #228]	; (8003040 <HAL_RCC_ClockConfig+0x1c8>)
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	f023 0203 	bic.w	r2, r3, #3
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	4936      	ldr	r1, [pc, #216]	; (8003040 <HAL_RCC_ClockConfig+0x1c8>)
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f6c:	f7ff f8a0 	bl	80020b0 <HAL_GetTick>
 8002f70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f72:	e00a      	b.n	8002f8a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f74:	f7ff f89c 	bl	80020b0 <HAL_GetTick>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	1ad3      	subs	r3, r2, r3
 8002f7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d901      	bls.n	8002f8a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002f86:	2303      	movs	r3, #3
 8002f88:	e053      	b.n	8003032 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f8a:	4b2d      	ldr	r3, [pc, #180]	; (8003040 <HAL_RCC_ClockConfig+0x1c8>)
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	f003 020c 	and.w	r2, r3, #12
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d1eb      	bne.n	8002f74 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f9c:	4b27      	ldr	r3, [pc, #156]	; (800303c <HAL_RCC_ClockConfig+0x1c4>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 030f 	and.w	r3, r3, #15
 8002fa4:	683a      	ldr	r2, [r7, #0]
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d210      	bcs.n	8002fcc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002faa:	4b24      	ldr	r3, [pc, #144]	; (800303c <HAL_RCC_ClockConfig+0x1c4>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f023 020f 	bic.w	r2, r3, #15
 8002fb2:	4922      	ldr	r1, [pc, #136]	; (800303c <HAL_RCC_ClockConfig+0x1c4>)
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fba:	4b20      	ldr	r3, [pc, #128]	; (800303c <HAL_RCC_ClockConfig+0x1c4>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 030f 	and.w	r3, r3, #15
 8002fc2:	683a      	ldr	r2, [r7, #0]
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d001      	beq.n	8002fcc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e032      	b.n	8003032 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 0304 	and.w	r3, r3, #4
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d008      	beq.n	8002fea <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fd8:	4b19      	ldr	r3, [pc, #100]	; (8003040 <HAL_RCC_ClockConfig+0x1c8>)
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	68db      	ldr	r3, [r3, #12]
 8002fe4:	4916      	ldr	r1, [pc, #88]	; (8003040 <HAL_RCC_ClockConfig+0x1c8>)
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 0308 	and.w	r3, r3, #8
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d009      	beq.n	800300a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002ff6:	4b12      	ldr	r3, [pc, #72]	; (8003040 <HAL_RCC_ClockConfig+0x1c8>)
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	691b      	ldr	r3, [r3, #16]
 8003002:	00db      	lsls	r3, r3, #3
 8003004:	490e      	ldr	r1, [pc, #56]	; (8003040 <HAL_RCC_ClockConfig+0x1c8>)
 8003006:	4313      	orrs	r3, r2
 8003008:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800300a:	f000 f821 	bl	8003050 <HAL_RCC_GetSysClockFreq>
 800300e:	4602      	mov	r2, r0
 8003010:	4b0b      	ldr	r3, [pc, #44]	; (8003040 <HAL_RCC_ClockConfig+0x1c8>)
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	091b      	lsrs	r3, r3, #4
 8003016:	f003 030f 	and.w	r3, r3, #15
 800301a:	490a      	ldr	r1, [pc, #40]	; (8003044 <HAL_RCC_ClockConfig+0x1cc>)
 800301c:	5ccb      	ldrb	r3, [r1, r3]
 800301e:	fa22 f303 	lsr.w	r3, r2, r3
 8003022:	4a09      	ldr	r2, [pc, #36]	; (8003048 <HAL_RCC_ClockConfig+0x1d0>)
 8003024:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003026:	4b09      	ldr	r3, [pc, #36]	; (800304c <HAL_RCC_ClockConfig+0x1d4>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4618      	mov	r0, r3
 800302c:	f7fe fffc 	bl	8002028 <HAL_InitTick>

  return HAL_OK;
 8003030:	2300      	movs	r3, #0
}
 8003032:	4618      	mov	r0, r3
 8003034:	3710      	adds	r7, #16
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}
 800303a:	bf00      	nop
 800303c:	40023c00 	.word	0x40023c00
 8003040:	40023800 	.word	0x40023800
 8003044:	0800968c 	.word	0x0800968c
 8003048:	20000004 	.word	0x20000004
 800304c:	20000008 	.word	0x20000008

08003050 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003050:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003054:	b094      	sub	sp, #80	; 0x50
 8003056:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003058:	2300      	movs	r3, #0
 800305a:	647b      	str	r3, [r7, #68]	; 0x44
 800305c:	2300      	movs	r3, #0
 800305e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003060:	2300      	movs	r3, #0
 8003062:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003064:	2300      	movs	r3, #0
 8003066:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003068:	4b79      	ldr	r3, [pc, #484]	; (8003250 <HAL_RCC_GetSysClockFreq+0x200>)
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	f003 030c 	and.w	r3, r3, #12
 8003070:	2b08      	cmp	r3, #8
 8003072:	d00d      	beq.n	8003090 <HAL_RCC_GetSysClockFreq+0x40>
 8003074:	2b08      	cmp	r3, #8
 8003076:	f200 80e1 	bhi.w	800323c <HAL_RCC_GetSysClockFreq+0x1ec>
 800307a:	2b00      	cmp	r3, #0
 800307c:	d002      	beq.n	8003084 <HAL_RCC_GetSysClockFreq+0x34>
 800307e:	2b04      	cmp	r3, #4
 8003080:	d003      	beq.n	800308a <HAL_RCC_GetSysClockFreq+0x3a>
 8003082:	e0db      	b.n	800323c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003084:	4b73      	ldr	r3, [pc, #460]	; (8003254 <HAL_RCC_GetSysClockFreq+0x204>)
 8003086:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003088:	e0db      	b.n	8003242 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800308a:	4b73      	ldr	r3, [pc, #460]	; (8003258 <HAL_RCC_GetSysClockFreq+0x208>)
 800308c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800308e:	e0d8      	b.n	8003242 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003090:	4b6f      	ldr	r3, [pc, #444]	; (8003250 <HAL_RCC_GetSysClockFreq+0x200>)
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003098:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800309a:	4b6d      	ldr	r3, [pc, #436]	; (8003250 <HAL_RCC_GetSysClockFreq+0x200>)
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d063      	beq.n	800316e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030a6:	4b6a      	ldr	r3, [pc, #424]	; (8003250 <HAL_RCC_GetSysClockFreq+0x200>)
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	099b      	lsrs	r3, r3, #6
 80030ac:	2200      	movs	r2, #0
 80030ae:	63bb      	str	r3, [r7, #56]	; 0x38
 80030b0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80030b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030b8:	633b      	str	r3, [r7, #48]	; 0x30
 80030ba:	2300      	movs	r3, #0
 80030bc:	637b      	str	r3, [r7, #52]	; 0x34
 80030be:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80030c2:	4622      	mov	r2, r4
 80030c4:	462b      	mov	r3, r5
 80030c6:	f04f 0000 	mov.w	r0, #0
 80030ca:	f04f 0100 	mov.w	r1, #0
 80030ce:	0159      	lsls	r1, r3, #5
 80030d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030d4:	0150      	lsls	r0, r2, #5
 80030d6:	4602      	mov	r2, r0
 80030d8:	460b      	mov	r3, r1
 80030da:	4621      	mov	r1, r4
 80030dc:	1a51      	subs	r1, r2, r1
 80030de:	6139      	str	r1, [r7, #16]
 80030e0:	4629      	mov	r1, r5
 80030e2:	eb63 0301 	sbc.w	r3, r3, r1
 80030e6:	617b      	str	r3, [r7, #20]
 80030e8:	f04f 0200 	mov.w	r2, #0
 80030ec:	f04f 0300 	mov.w	r3, #0
 80030f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80030f4:	4659      	mov	r1, fp
 80030f6:	018b      	lsls	r3, r1, #6
 80030f8:	4651      	mov	r1, sl
 80030fa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80030fe:	4651      	mov	r1, sl
 8003100:	018a      	lsls	r2, r1, #6
 8003102:	4651      	mov	r1, sl
 8003104:	ebb2 0801 	subs.w	r8, r2, r1
 8003108:	4659      	mov	r1, fp
 800310a:	eb63 0901 	sbc.w	r9, r3, r1
 800310e:	f04f 0200 	mov.w	r2, #0
 8003112:	f04f 0300 	mov.w	r3, #0
 8003116:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800311a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800311e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003122:	4690      	mov	r8, r2
 8003124:	4699      	mov	r9, r3
 8003126:	4623      	mov	r3, r4
 8003128:	eb18 0303 	adds.w	r3, r8, r3
 800312c:	60bb      	str	r3, [r7, #8]
 800312e:	462b      	mov	r3, r5
 8003130:	eb49 0303 	adc.w	r3, r9, r3
 8003134:	60fb      	str	r3, [r7, #12]
 8003136:	f04f 0200 	mov.w	r2, #0
 800313a:	f04f 0300 	mov.w	r3, #0
 800313e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003142:	4629      	mov	r1, r5
 8003144:	024b      	lsls	r3, r1, #9
 8003146:	4621      	mov	r1, r4
 8003148:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800314c:	4621      	mov	r1, r4
 800314e:	024a      	lsls	r2, r1, #9
 8003150:	4610      	mov	r0, r2
 8003152:	4619      	mov	r1, r3
 8003154:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003156:	2200      	movs	r2, #0
 8003158:	62bb      	str	r3, [r7, #40]	; 0x28
 800315a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800315c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003160:	f7fd fbb4 	bl	80008cc <__aeabi_uldivmod>
 8003164:	4602      	mov	r2, r0
 8003166:	460b      	mov	r3, r1
 8003168:	4613      	mov	r3, r2
 800316a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800316c:	e058      	b.n	8003220 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800316e:	4b38      	ldr	r3, [pc, #224]	; (8003250 <HAL_RCC_GetSysClockFreq+0x200>)
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	099b      	lsrs	r3, r3, #6
 8003174:	2200      	movs	r2, #0
 8003176:	4618      	mov	r0, r3
 8003178:	4611      	mov	r1, r2
 800317a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800317e:	623b      	str	r3, [r7, #32]
 8003180:	2300      	movs	r3, #0
 8003182:	627b      	str	r3, [r7, #36]	; 0x24
 8003184:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003188:	4642      	mov	r2, r8
 800318a:	464b      	mov	r3, r9
 800318c:	f04f 0000 	mov.w	r0, #0
 8003190:	f04f 0100 	mov.w	r1, #0
 8003194:	0159      	lsls	r1, r3, #5
 8003196:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800319a:	0150      	lsls	r0, r2, #5
 800319c:	4602      	mov	r2, r0
 800319e:	460b      	mov	r3, r1
 80031a0:	4641      	mov	r1, r8
 80031a2:	ebb2 0a01 	subs.w	sl, r2, r1
 80031a6:	4649      	mov	r1, r9
 80031a8:	eb63 0b01 	sbc.w	fp, r3, r1
 80031ac:	f04f 0200 	mov.w	r2, #0
 80031b0:	f04f 0300 	mov.w	r3, #0
 80031b4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80031b8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80031bc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80031c0:	ebb2 040a 	subs.w	r4, r2, sl
 80031c4:	eb63 050b 	sbc.w	r5, r3, fp
 80031c8:	f04f 0200 	mov.w	r2, #0
 80031cc:	f04f 0300 	mov.w	r3, #0
 80031d0:	00eb      	lsls	r3, r5, #3
 80031d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80031d6:	00e2      	lsls	r2, r4, #3
 80031d8:	4614      	mov	r4, r2
 80031da:	461d      	mov	r5, r3
 80031dc:	4643      	mov	r3, r8
 80031de:	18e3      	adds	r3, r4, r3
 80031e0:	603b      	str	r3, [r7, #0]
 80031e2:	464b      	mov	r3, r9
 80031e4:	eb45 0303 	adc.w	r3, r5, r3
 80031e8:	607b      	str	r3, [r7, #4]
 80031ea:	f04f 0200 	mov.w	r2, #0
 80031ee:	f04f 0300 	mov.w	r3, #0
 80031f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80031f6:	4629      	mov	r1, r5
 80031f8:	028b      	lsls	r3, r1, #10
 80031fa:	4621      	mov	r1, r4
 80031fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003200:	4621      	mov	r1, r4
 8003202:	028a      	lsls	r2, r1, #10
 8003204:	4610      	mov	r0, r2
 8003206:	4619      	mov	r1, r3
 8003208:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800320a:	2200      	movs	r2, #0
 800320c:	61bb      	str	r3, [r7, #24]
 800320e:	61fa      	str	r2, [r7, #28]
 8003210:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003214:	f7fd fb5a 	bl	80008cc <__aeabi_uldivmod>
 8003218:	4602      	mov	r2, r0
 800321a:	460b      	mov	r3, r1
 800321c:	4613      	mov	r3, r2
 800321e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003220:	4b0b      	ldr	r3, [pc, #44]	; (8003250 <HAL_RCC_GetSysClockFreq+0x200>)
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	0c1b      	lsrs	r3, r3, #16
 8003226:	f003 0303 	and.w	r3, r3, #3
 800322a:	3301      	adds	r3, #1
 800322c:	005b      	lsls	r3, r3, #1
 800322e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003230:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003232:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003234:	fbb2 f3f3 	udiv	r3, r2, r3
 8003238:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800323a:	e002      	b.n	8003242 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800323c:	4b05      	ldr	r3, [pc, #20]	; (8003254 <HAL_RCC_GetSysClockFreq+0x204>)
 800323e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003240:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003242:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003244:	4618      	mov	r0, r3
 8003246:	3750      	adds	r7, #80	; 0x50
 8003248:	46bd      	mov	sp, r7
 800324a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800324e:	bf00      	nop
 8003250:	40023800 	.word	0x40023800
 8003254:	00f42400 	.word	0x00f42400
 8003258:	007a1200 	.word	0x007a1200

0800325c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800325c:	b480      	push	{r7}
 800325e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003260:	4b03      	ldr	r3, [pc, #12]	; (8003270 <HAL_RCC_GetHCLKFreq+0x14>)
 8003262:	681b      	ldr	r3, [r3, #0]
}
 8003264:	4618      	mov	r0, r3
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr
 800326e:	bf00      	nop
 8003270:	20000004 	.word	0x20000004

08003274 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003278:	f7ff fff0 	bl	800325c <HAL_RCC_GetHCLKFreq>
 800327c:	4602      	mov	r2, r0
 800327e:	4b05      	ldr	r3, [pc, #20]	; (8003294 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	0a9b      	lsrs	r3, r3, #10
 8003284:	f003 0307 	and.w	r3, r3, #7
 8003288:	4903      	ldr	r1, [pc, #12]	; (8003298 <HAL_RCC_GetPCLK1Freq+0x24>)
 800328a:	5ccb      	ldrb	r3, [r1, r3]
 800328c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003290:	4618      	mov	r0, r3
 8003292:	bd80      	pop	{r7, pc}
 8003294:	40023800 	.word	0x40023800
 8003298:	0800969c 	.word	0x0800969c

0800329c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80032a0:	f7ff ffdc 	bl	800325c <HAL_RCC_GetHCLKFreq>
 80032a4:	4602      	mov	r2, r0
 80032a6:	4b05      	ldr	r3, [pc, #20]	; (80032bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	0b5b      	lsrs	r3, r3, #13
 80032ac:	f003 0307 	and.w	r3, r3, #7
 80032b0:	4903      	ldr	r1, [pc, #12]	; (80032c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80032b2:	5ccb      	ldrb	r3, [r1, r3]
 80032b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	bd80      	pop	{r7, pc}
 80032bc:	40023800 	.word	0x40023800
 80032c0:	0800969c 	.word	0x0800969c

080032c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b088      	sub	sp, #32
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80032cc:	2300      	movs	r3, #0
 80032ce:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80032d0:	2300      	movs	r3, #0
 80032d2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80032d4:	2300      	movs	r3, #0
 80032d6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80032d8:	2300      	movs	r3, #0
 80032da:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80032dc:	2300      	movs	r3, #0
 80032de:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 0301 	and.w	r3, r3, #1
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d012      	beq.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80032ec:	4b69      	ldr	r3, [pc, #420]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	4a68      	ldr	r2, [pc, #416]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032f2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80032f6:	6093      	str	r3, [r2, #8]
 80032f8:	4b66      	ldr	r3, [pc, #408]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032fa:	689a      	ldr	r2, [r3, #8]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003300:	4964      	ldr	r1, [pc, #400]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003302:	4313      	orrs	r3, r2
 8003304:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800330a:	2b00      	cmp	r3, #0
 800330c:	d101      	bne.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800330e:	2301      	movs	r3, #1
 8003310:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800331a:	2b00      	cmp	r3, #0
 800331c:	d017      	beq.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800331e:	4b5d      	ldr	r3, [pc, #372]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003320:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003324:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800332c:	4959      	ldr	r1, [pc, #356]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800332e:	4313      	orrs	r3, r2
 8003330:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003338:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800333c:	d101      	bne.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800333e:	2301      	movs	r3, #1
 8003340:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003346:	2b00      	cmp	r3, #0
 8003348:	d101      	bne.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800334a:	2301      	movs	r3, #1
 800334c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003356:	2b00      	cmp	r3, #0
 8003358:	d017      	beq.n	800338a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800335a:	4b4e      	ldr	r3, [pc, #312]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800335c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003360:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003368:	494a      	ldr	r1, [pc, #296]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800336a:	4313      	orrs	r3, r2
 800336c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003374:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003378:	d101      	bne.n	800337e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800337a:	2301      	movs	r3, #1
 800337c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003382:	2b00      	cmp	r3, #0
 8003384:	d101      	bne.n	800338a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003386:	2301      	movs	r3, #1
 8003388:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003392:	2b00      	cmp	r3, #0
 8003394:	d001      	beq.n	800339a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003396:	2301      	movs	r3, #1
 8003398:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 0320 	and.w	r3, r3, #32
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	f000 808b 	beq.w	80034be <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80033a8:	4b3a      	ldr	r3, [pc, #232]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ac:	4a39      	ldr	r2, [pc, #228]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033b2:	6413      	str	r3, [r2, #64]	; 0x40
 80033b4:	4b37      	ldr	r3, [pc, #220]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033bc:	60bb      	str	r3, [r7, #8]
 80033be:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80033c0:	4b35      	ldr	r3, [pc, #212]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a34      	ldr	r2, [pc, #208]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80033c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033cc:	f7fe fe70 	bl	80020b0 <HAL_GetTick>
 80033d0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80033d2:	e008      	b.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033d4:	f7fe fe6c 	bl	80020b0 <HAL_GetTick>
 80033d8:	4602      	mov	r2, r0
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	1ad3      	subs	r3, r2, r3
 80033de:	2b64      	cmp	r3, #100	; 0x64
 80033e0:	d901      	bls.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80033e2:	2303      	movs	r3, #3
 80033e4:	e357      	b.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80033e6:	4b2c      	ldr	r3, [pc, #176]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d0f0      	beq.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80033f2:	4b28      	ldr	r3, [pc, #160]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033fa:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d035      	beq.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003406:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800340a:	693a      	ldr	r2, [r7, #16]
 800340c:	429a      	cmp	r2, r3
 800340e:	d02e      	beq.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003410:	4b20      	ldr	r3, [pc, #128]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003412:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003414:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003418:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800341a:	4b1e      	ldr	r3, [pc, #120]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800341c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800341e:	4a1d      	ldr	r2, [pc, #116]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003420:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003424:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003426:	4b1b      	ldr	r3, [pc, #108]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003428:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800342a:	4a1a      	ldr	r2, [pc, #104]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800342c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003430:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003432:	4a18      	ldr	r2, [pc, #96]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003438:	4b16      	ldr	r3, [pc, #88]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800343a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800343c:	f003 0301 	and.w	r3, r3, #1
 8003440:	2b01      	cmp	r3, #1
 8003442:	d114      	bne.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003444:	f7fe fe34 	bl	80020b0 <HAL_GetTick>
 8003448:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800344a:	e00a      	b.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800344c:	f7fe fe30 	bl	80020b0 <HAL_GetTick>
 8003450:	4602      	mov	r2, r0
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	f241 3288 	movw	r2, #5000	; 0x1388
 800345a:	4293      	cmp	r3, r2
 800345c:	d901      	bls.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800345e:	2303      	movs	r3, #3
 8003460:	e319      	b.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003462:	4b0c      	ldr	r3, [pc, #48]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003464:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003466:	f003 0302 	and.w	r3, r3, #2
 800346a:	2b00      	cmp	r3, #0
 800346c:	d0ee      	beq.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003472:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003476:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800347a:	d111      	bne.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800347c:	4b05      	ldr	r3, [pc, #20]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003488:	4b04      	ldr	r3, [pc, #16]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800348a:	400b      	ands	r3, r1
 800348c:	4901      	ldr	r1, [pc, #4]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800348e:	4313      	orrs	r3, r2
 8003490:	608b      	str	r3, [r1, #8]
 8003492:	e00b      	b.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003494:	40023800 	.word	0x40023800
 8003498:	40007000 	.word	0x40007000
 800349c:	0ffffcff 	.word	0x0ffffcff
 80034a0:	4baa      	ldr	r3, [pc, #680]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	4aa9      	ldr	r2, [pc, #676]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034a6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80034aa:	6093      	str	r3, [r2, #8]
 80034ac:	4ba7      	ldr	r3, [pc, #668]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034ae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034b8:	49a4      	ldr	r1, [pc, #656]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034ba:	4313      	orrs	r3, r2
 80034bc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 0310 	and.w	r3, r3, #16
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d010      	beq.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80034ca:	4ba0      	ldr	r3, [pc, #640]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80034d0:	4a9e      	ldr	r2, [pc, #632]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80034d6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80034da:	4b9c      	ldr	r3, [pc, #624]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034dc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034e4:	4999      	ldr	r1, [pc, #612]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034e6:	4313      	orrs	r3, r2
 80034e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d00a      	beq.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80034f8:	4b94      	ldr	r3, [pc, #592]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034fe:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003506:	4991      	ldr	r1, [pc, #580]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003508:	4313      	orrs	r3, r2
 800350a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003516:	2b00      	cmp	r3, #0
 8003518:	d00a      	beq.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800351a:	4b8c      	ldr	r3, [pc, #560]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800351c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003520:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003528:	4988      	ldr	r1, [pc, #544]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800352a:	4313      	orrs	r3, r2
 800352c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003538:	2b00      	cmp	r3, #0
 800353a:	d00a      	beq.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800353c:	4b83      	ldr	r3, [pc, #524]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800353e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003542:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800354a:	4980      	ldr	r1, [pc, #512]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800354c:	4313      	orrs	r3, r2
 800354e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800355a:	2b00      	cmp	r3, #0
 800355c:	d00a      	beq.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800355e:	4b7b      	ldr	r3, [pc, #492]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003560:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003564:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800356c:	4977      	ldr	r1, [pc, #476]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800356e:	4313      	orrs	r3, r2
 8003570:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800357c:	2b00      	cmp	r3, #0
 800357e:	d00a      	beq.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003580:	4b72      	ldr	r3, [pc, #456]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003582:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003586:	f023 0203 	bic.w	r2, r3, #3
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800358e:	496f      	ldr	r1, [pc, #444]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003590:	4313      	orrs	r3, r2
 8003592:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d00a      	beq.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80035a2:	4b6a      	ldr	r3, [pc, #424]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035a8:	f023 020c 	bic.w	r2, r3, #12
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035b0:	4966      	ldr	r1, [pc, #408]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035b2:	4313      	orrs	r3, r2
 80035b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d00a      	beq.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80035c4:	4b61      	ldr	r3, [pc, #388]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035ca:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035d2:	495e      	ldr	r1, [pc, #376]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035d4:	4313      	orrs	r3, r2
 80035d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d00a      	beq.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80035e6:	4b59      	ldr	r3, [pc, #356]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035ec:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035f4:	4955      	ldr	r1, [pc, #340]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035f6:	4313      	orrs	r3, r2
 80035f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003604:	2b00      	cmp	r3, #0
 8003606:	d00a      	beq.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003608:	4b50      	ldr	r3, [pc, #320]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800360a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800360e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003616:	494d      	ldr	r1, [pc, #308]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003618:	4313      	orrs	r3, r2
 800361a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003626:	2b00      	cmp	r3, #0
 8003628:	d00a      	beq.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800362a:	4b48      	ldr	r3, [pc, #288]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800362c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003630:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003638:	4944      	ldr	r1, [pc, #272]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800363a:	4313      	orrs	r3, r2
 800363c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003648:	2b00      	cmp	r3, #0
 800364a:	d00a      	beq.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800364c:	4b3f      	ldr	r3, [pc, #252]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800364e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003652:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800365a:	493c      	ldr	r1, [pc, #240]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800365c:	4313      	orrs	r3, r2
 800365e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800366a:	2b00      	cmp	r3, #0
 800366c:	d00a      	beq.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800366e:	4b37      	ldr	r3, [pc, #220]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003670:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003674:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800367c:	4933      	ldr	r1, [pc, #204]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800367e:	4313      	orrs	r3, r2
 8003680:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800368c:	2b00      	cmp	r3, #0
 800368e:	d00a      	beq.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003690:	4b2e      	ldr	r3, [pc, #184]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003692:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003696:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800369e:	492b      	ldr	r1, [pc, #172]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036a0:	4313      	orrs	r3, r2
 80036a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d011      	beq.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80036b2:	4b26      	ldr	r3, [pc, #152]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036b8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80036c0:	4922      	ldr	r1, [pc, #136]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036c2:	4313      	orrs	r3, r2
 80036c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80036cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80036d0:	d101      	bne.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80036d2:	2301      	movs	r3, #1
 80036d4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 0308 	and.w	r3, r3, #8
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d001      	beq.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80036e2:	2301      	movs	r3, #1
 80036e4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d00a      	beq.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80036f2:	4b16      	ldr	r3, [pc, #88]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036f8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003700:	4912      	ldr	r1, [pc, #72]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003702:	4313      	orrs	r3, r2
 8003704:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003710:	2b00      	cmp	r3, #0
 8003712:	d00b      	beq.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003714:	4b0d      	ldr	r3, [pc, #52]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003716:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800371a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003724:	4909      	ldr	r1, [pc, #36]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003726:	4313      	orrs	r3, r2
 8003728:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800372c:	69fb      	ldr	r3, [r7, #28]
 800372e:	2b01      	cmp	r3, #1
 8003730:	d006      	beq.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800373a:	2b00      	cmp	r3, #0
 800373c:	f000 80d9 	beq.w	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003740:	4b02      	ldr	r3, [pc, #8]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a01      	ldr	r2, [pc, #4]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003746:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800374a:	e001      	b.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800374c:	40023800 	.word	0x40023800
 8003750:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003752:	f7fe fcad 	bl	80020b0 <HAL_GetTick>
 8003756:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003758:	e008      	b.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800375a:	f7fe fca9 	bl	80020b0 <HAL_GetTick>
 800375e:	4602      	mov	r2, r0
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	1ad3      	subs	r3, r2, r3
 8003764:	2b64      	cmp	r3, #100	; 0x64
 8003766:	d901      	bls.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003768:	2303      	movs	r3, #3
 800376a:	e194      	b.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800376c:	4b6c      	ldr	r3, [pc, #432]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003774:	2b00      	cmp	r3, #0
 8003776:	d1f0      	bne.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 0301 	and.w	r3, r3, #1
 8003780:	2b00      	cmp	r3, #0
 8003782:	d021      	beq.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003788:	2b00      	cmp	r3, #0
 800378a:	d11d      	bne.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800378c:	4b64      	ldr	r3, [pc, #400]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800378e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003792:	0c1b      	lsrs	r3, r3, #16
 8003794:	f003 0303 	and.w	r3, r3, #3
 8003798:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800379a:	4b61      	ldr	r3, [pc, #388]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800379c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037a0:	0e1b      	lsrs	r3, r3, #24
 80037a2:	f003 030f 	and.w	r3, r3, #15
 80037a6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	019a      	lsls	r2, r3, #6
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	041b      	lsls	r3, r3, #16
 80037b2:	431a      	orrs	r2, r3
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	061b      	lsls	r3, r3, #24
 80037b8:	431a      	orrs	r2, r3
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	071b      	lsls	r3, r3, #28
 80037c0:	4957      	ldr	r1, [pc, #348]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037c2:	4313      	orrs	r3, r2
 80037c4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d004      	beq.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80037dc:	d00a      	beq.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d02e      	beq.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037f2:	d129      	bne.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80037f4:	4b4a      	ldr	r3, [pc, #296]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037fa:	0c1b      	lsrs	r3, r3, #16
 80037fc:	f003 0303 	and.w	r3, r3, #3
 8003800:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003802:	4b47      	ldr	r3, [pc, #284]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003804:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003808:	0f1b      	lsrs	r3, r3, #28
 800380a:	f003 0307 	and.w	r3, r3, #7
 800380e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	019a      	lsls	r2, r3, #6
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	041b      	lsls	r3, r3, #16
 800381a:	431a      	orrs	r2, r3
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	68db      	ldr	r3, [r3, #12]
 8003820:	061b      	lsls	r3, r3, #24
 8003822:	431a      	orrs	r2, r3
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	071b      	lsls	r3, r3, #28
 8003828:	493d      	ldr	r1, [pc, #244]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800382a:	4313      	orrs	r3, r2
 800382c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003830:	4b3b      	ldr	r3, [pc, #236]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003832:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003836:	f023 021f 	bic.w	r2, r3, #31
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800383e:	3b01      	subs	r3, #1
 8003840:	4937      	ldr	r1, [pc, #220]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003842:	4313      	orrs	r3, r2
 8003844:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003850:	2b00      	cmp	r3, #0
 8003852:	d01d      	beq.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003854:	4b32      	ldr	r3, [pc, #200]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003856:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800385a:	0e1b      	lsrs	r3, r3, #24
 800385c:	f003 030f 	and.w	r3, r3, #15
 8003860:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003862:	4b2f      	ldr	r3, [pc, #188]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003864:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003868:	0f1b      	lsrs	r3, r3, #28
 800386a:	f003 0307 	and.w	r3, r3, #7
 800386e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	019a      	lsls	r2, r3, #6
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	691b      	ldr	r3, [r3, #16]
 800387a:	041b      	lsls	r3, r3, #16
 800387c:	431a      	orrs	r2, r3
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	061b      	lsls	r3, r3, #24
 8003882:	431a      	orrs	r2, r3
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	071b      	lsls	r3, r3, #28
 8003888:	4925      	ldr	r1, [pc, #148]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800388a:	4313      	orrs	r3, r2
 800388c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003898:	2b00      	cmp	r3, #0
 800389a:	d011      	beq.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	019a      	lsls	r2, r3, #6
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	691b      	ldr	r3, [r3, #16]
 80038a6:	041b      	lsls	r3, r3, #16
 80038a8:	431a      	orrs	r2, r3
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	68db      	ldr	r3, [r3, #12]
 80038ae:	061b      	lsls	r3, r3, #24
 80038b0:	431a      	orrs	r2, r3
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	071b      	lsls	r3, r3, #28
 80038b8:	4919      	ldr	r1, [pc, #100]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80038ba:	4313      	orrs	r3, r2
 80038bc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80038c0:	4b17      	ldr	r3, [pc, #92]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a16      	ldr	r2, [pc, #88]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80038c6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80038ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038cc:	f7fe fbf0 	bl	80020b0 <HAL_GetTick>
 80038d0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80038d2:	e008      	b.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80038d4:	f7fe fbec 	bl	80020b0 <HAL_GetTick>
 80038d8:	4602      	mov	r2, r0
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	1ad3      	subs	r3, r2, r3
 80038de:	2b64      	cmp	r3, #100	; 0x64
 80038e0:	d901      	bls.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80038e2:	2303      	movs	r3, #3
 80038e4:	e0d7      	b.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80038e6:	4b0e      	ldr	r3, [pc, #56]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d0f0      	beq.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80038f2:	69bb      	ldr	r3, [r7, #24]
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	f040 80cd 	bne.w	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80038fa:	4b09      	ldr	r3, [pc, #36]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a08      	ldr	r2, [pc, #32]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003900:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003904:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003906:	f7fe fbd3 	bl	80020b0 <HAL_GetTick>
 800390a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800390c:	e00a      	b.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800390e:	f7fe fbcf 	bl	80020b0 <HAL_GetTick>
 8003912:	4602      	mov	r2, r0
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	1ad3      	subs	r3, r2, r3
 8003918:	2b64      	cmp	r3, #100	; 0x64
 800391a:	d903      	bls.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800391c:	2303      	movs	r3, #3
 800391e:	e0ba      	b.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003920:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003924:	4b5e      	ldr	r3, [pc, #376]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800392c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003930:	d0ed      	beq.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800393a:	2b00      	cmp	r3, #0
 800393c:	d003      	beq.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003942:	2b00      	cmp	r3, #0
 8003944:	d009      	beq.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800394e:	2b00      	cmp	r3, #0
 8003950:	d02e      	beq.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003956:	2b00      	cmp	r3, #0
 8003958:	d12a      	bne.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800395a:	4b51      	ldr	r3, [pc, #324]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800395c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003960:	0c1b      	lsrs	r3, r3, #16
 8003962:	f003 0303 	and.w	r3, r3, #3
 8003966:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003968:	4b4d      	ldr	r3, [pc, #308]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800396a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800396e:	0f1b      	lsrs	r3, r3, #28
 8003970:	f003 0307 	and.w	r3, r3, #7
 8003974:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	695b      	ldr	r3, [r3, #20]
 800397a:	019a      	lsls	r2, r3, #6
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	041b      	lsls	r3, r3, #16
 8003980:	431a      	orrs	r2, r3
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	699b      	ldr	r3, [r3, #24]
 8003986:	061b      	lsls	r3, r3, #24
 8003988:	431a      	orrs	r2, r3
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	071b      	lsls	r3, r3, #28
 800398e:	4944      	ldr	r1, [pc, #272]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003990:	4313      	orrs	r3, r2
 8003992:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003996:	4b42      	ldr	r3, [pc, #264]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003998:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800399c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039a4:	3b01      	subs	r3, #1
 80039a6:	021b      	lsls	r3, r3, #8
 80039a8:	493d      	ldr	r1, [pc, #244]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80039aa:	4313      	orrs	r3, r2
 80039ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d022      	beq.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80039c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80039c4:	d11d      	bne.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80039c6:	4b36      	ldr	r3, [pc, #216]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80039c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039cc:	0e1b      	lsrs	r3, r3, #24
 80039ce:	f003 030f 	and.w	r3, r3, #15
 80039d2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80039d4:	4b32      	ldr	r3, [pc, #200]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80039d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039da:	0f1b      	lsrs	r3, r3, #28
 80039dc:	f003 0307 	and.w	r3, r3, #7
 80039e0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	695b      	ldr	r3, [r3, #20]
 80039e6:	019a      	lsls	r2, r3, #6
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6a1b      	ldr	r3, [r3, #32]
 80039ec:	041b      	lsls	r3, r3, #16
 80039ee:	431a      	orrs	r2, r3
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	061b      	lsls	r3, r3, #24
 80039f4:	431a      	orrs	r2, r3
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	071b      	lsls	r3, r3, #28
 80039fa:	4929      	ldr	r1, [pc, #164]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80039fc:	4313      	orrs	r3, r2
 80039fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f003 0308 	and.w	r3, r3, #8
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d028      	beq.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003a0e:	4b24      	ldr	r3, [pc, #144]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a14:	0e1b      	lsrs	r3, r3, #24
 8003a16:	f003 030f 	and.w	r3, r3, #15
 8003a1a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003a1c:	4b20      	ldr	r3, [pc, #128]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a22:	0c1b      	lsrs	r3, r3, #16
 8003a24:	f003 0303 	and.w	r3, r3, #3
 8003a28:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	695b      	ldr	r3, [r3, #20]
 8003a2e:	019a      	lsls	r2, r3, #6
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	041b      	lsls	r3, r3, #16
 8003a34:	431a      	orrs	r2, r3
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	061b      	lsls	r3, r3, #24
 8003a3a:	431a      	orrs	r2, r3
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	69db      	ldr	r3, [r3, #28]
 8003a40:	071b      	lsls	r3, r3, #28
 8003a42:	4917      	ldr	r1, [pc, #92]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a44:	4313      	orrs	r3, r2
 8003a46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003a4a:	4b15      	ldr	r3, [pc, #84]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a50:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a58:	4911      	ldr	r1, [pc, #68]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003a60:	4b0f      	ldr	r3, [pc, #60]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a0e      	ldr	r2, [pc, #56]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a6a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a6c:	f7fe fb20 	bl	80020b0 <HAL_GetTick>
 8003a70:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003a72:	e008      	b.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003a74:	f7fe fb1c 	bl	80020b0 <HAL_GetTick>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	2b64      	cmp	r3, #100	; 0x64
 8003a80:	d901      	bls.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a82:	2303      	movs	r3, #3
 8003a84:	e007      	b.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003a86:	4b06      	ldr	r3, [pc, #24]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a8e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a92:	d1ef      	bne.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003a94:	2300      	movs	r3, #0
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	3720      	adds	r7, #32
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}
 8003a9e:	bf00      	nop
 8003aa0:	40023800 	.word	0x40023800

08003aa4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b084      	sub	sp, #16
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d101      	bne.n	8003ab6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e09d      	b.n	8003bf2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d108      	bne.n	8003ad0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ac6:	d009      	beq.n	8003adc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2200      	movs	r2, #0
 8003acc:	61da      	str	r2, [r3, #28]
 8003ace:	e005      	b.n	8003adc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d106      	bne.n	8003afc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2200      	movs	r2, #0
 8003af2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f7fe f8b6 	bl	8001c68 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2202      	movs	r2, #2
 8003b00:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b12:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003b1c:	d902      	bls.n	8003b24 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	60fb      	str	r3, [r7, #12]
 8003b22:	e002      	b.n	8003b2a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003b24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b28:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	68db      	ldr	r3, [r3, #12]
 8003b2e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003b32:	d007      	beq.n	8003b44 <HAL_SPI_Init+0xa0>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	68db      	ldr	r3, [r3, #12]
 8003b38:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003b3c:	d002      	beq.n	8003b44 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2200      	movs	r2, #0
 8003b42:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003b54:	431a      	orrs	r2, r3
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	691b      	ldr	r3, [r3, #16]
 8003b5a:	f003 0302 	and.w	r3, r3, #2
 8003b5e:	431a      	orrs	r2, r3
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	695b      	ldr	r3, [r3, #20]
 8003b64:	f003 0301 	and.w	r3, r3, #1
 8003b68:	431a      	orrs	r2, r3
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	699b      	ldr	r3, [r3, #24]
 8003b6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b72:	431a      	orrs	r2, r3
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	69db      	ldr	r3, [r3, #28]
 8003b78:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b7c:	431a      	orrs	r2, r3
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6a1b      	ldr	r3, [r3, #32]
 8003b82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b86:	ea42 0103 	orr.w	r1, r2, r3
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b8e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	430a      	orrs	r2, r1
 8003b98:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	699b      	ldr	r3, [r3, #24]
 8003b9e:	0c1b      	lsrs	r3, r3, #16
 8003ba0:	f003 0204 	and.w	r2, r3, #4
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba8:	f003 0310 	and.w	r3, r3, #16
 8003bac:	431a      	orrs	r2, r3
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bb2:	f003 0308 	and.w	r3, r3, #8
 8003bb6:	431a      	orrs	r2, r3
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	68db      	ldr	r3, [r3, #12]
 8003bbc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003bc0:	ea42 0103 	orr.w	r1, r2, r3
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	430a      	orrs	r2, r1
 8003bd0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	69da      	ldr	r2, [r3, #28]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003be0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2200      	movs	r2, #0
 8003be6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2201      	movs	r2, #1
 8003bec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003bf0:	2300      	movs	r3, #0
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	3710      	adds	r7, #16
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}

08003bfa <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bfa:	b580      	push	{r7, lr}
 8003bfc:	b088      	sub	sp, #32
 8003bfe:	af00      	add	r7, sp, #0
 8003c00:	60f8      	str	r0, [r7, #12]
 8003c02:	60b9      	str	r1, [r7, #8]
 8003c04:	603b      	str	r3, [r7, #0]
 8003c06:	4613      	mov	r3, r2
 8003c08:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d101      	bne.n	8003c1c <HAL_SPI_Transmit+0x22>
 8003c18:	2302      	movs	r3, #2
 8003c1a:	e158      	b.n	8003ece <HAL_SPI_Transmit+0x2d4>
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2201      	movs	r2, #1
 8003c20:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c24:	f7fe fa44 	bl	80020b0 <HAL_GetTick>
 8003c28:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003c2a:	88fb      	ldrh	r3, [r7, #6]
 8003c2c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d002      	beq.n	8003c40 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003c3a:	2302      	movs	r3, #2
 8003c3c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003c3e:	e13d      	b.n	8003ebc <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d002      	beq.n	8003c4c <HAL_SPI_Transmit+0x52>
 8003c46:	88fb      	ldrh	r3, [r7, #6]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d102      	bne.n	8003c52 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003c50:	e134      	b.n	8003ebc <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2203      	movs	r2, #3
 8003c56:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	68ba      	ldr	r2, [r7, #8]
 8003c64:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	88fa      	ldrh	r2, [r7, #6]
 8003c6a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	88fa      	ldrh	r2, [r7, #6]
 8003c70:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2200      	movs	r2, #0
 8003c76:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2200      	movs	r2, #0
 8003c84:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2200      	movs	r2, #0
 8003c92:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c9c:	d10f      	bne.n	8003cbe <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cac:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003cbc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cc8:	2b40      	cmp	r3, #64	; 0x40
 8003cca:	d007      	beq.n	8003cdc <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003cda:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	68db      	ldr	r3, [r3, #12]
 8003ce0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003ce4:	d94b      	bls.n	8003d7e <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d002      	beq.n	8003cf4 <HAL_SPI_Transmit+0xfa>
 8003cee:	8afb      	ldrh	r3, [r7, #22]
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d13e      	bne.n	8003d72 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cf8:	881a      	ldrh	r2, [r3, #0]
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d04:	1c9a      	adds	r2, r3, #2
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d0e:	b29b      	uxth	r3, r3
 8003d10:	3b01      	subs	r3, #1
 8003d12:	b29a      	uxth	r2, r3
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003d18:	e02b      	b.n	8003d72 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	f003 0302 	and.w	r3, r3, #2
 8003d24:	2b02      	cmp	r3, #2
 8003d26:	d112      	bne.n	8003d4e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d2c:	881a      	ldrh	r2, [r3, #0]
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d38:	1c9a      	adds	r2, r3, #2
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d42:	b29b      	uxth	r3, r3
 8003d44:	3b01      	subs	r3, #1
 8003d46:	b29a      	uxth	r2, r3
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003d4c:	e011      	b.n	8003d72 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d4e:	f7fe f9af 	bl	80020b0 <HAL_GetTick>
 8003d52:	4602      	mov	r2, r0
 8003d54:	69bb      	ldr	r3, [r7, #24]
 8003d56:	1ad3      	subs	r3, r2, r3
 8003d58:	683a      	ldr	r2, [r7, #0]
 8003d5a:	429a      	cmp	r2, r3
 8003d5c:	d803      	bhi.n	8003d66 <HAL_SPI_Transmit+0x16c>
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d64:	d102      	bne.n	8003d6c <HAL_SPI_Transmit+0x172>
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d102      	bne.n	8003d72 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8003d6c:	2303      	movs	r3, #3
 8003d6e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003d70:	e0a4      	b.n	8003ebc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d76:	b29b      	uxth	r3, r3
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d1ce      	bne.n	8003d1a <HAL_SPI_Transmit+0x120>
 8003d7c:	e07c      	b.n	8003e78 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d002      	beq.n	8003d8c <HAL_SPI_Transmit+0x192>
 8003d86:	8afb      	ldrh	r3, [r7, #22]
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d170      	bne.n	8003e6e <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d90:	b29b      	uxth	r3, r3
 8003d92:	2b01      	cmp	r3, #1
 8003d94:	d912      	bls.n	8003dbc <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d9a:	881a      	ldrh	r2, [r3, #0]
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003da6:	1c9a      	adds	r2, r3, #2
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003db0:	b29b      	uxth	r3, r3
 8003db2:	3b02      	subs	r3, #2
 8003db4:	b29a      	uxth	r2, r3
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003dba:	e058      	b.n	8003e6e <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	330c      	adds	r3, #12
 8003dc6:	7812      	ldrb	r2, [r2, #0]
 8003dc8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dce:	1c5a      	adds	r2, r3, #1
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dd8:	b29b      	uxth	r3, r3
 8003dda:	3b01      	subs	r3, #1
 8003ddc:	b29a      	uxth	r2, r3
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003de2:	e044      	b.n	8003e6e <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	f003 0302 	and.w	r3, r3, #2
 8003dee:	2b02      	cmp	r3, #2
 8003df0:	d12b      	bne.n	8003e4a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003df6:	b29b      	uxth	r3, r3
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	d912      	bls.n	8003e22 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e00:	881a      	ldrh	r2, [r3, #0]
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e0c:	1c9a      	adds	r2, r3, #2
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e16:	b29b      	uxth	r3, r3
 8003e18:	3b02      	subs	r3, #2
 8003e1a:	b29a      	uxth	r2, r3
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003e20:	e025      	b.n	8003e6e <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	330c      	adds	r3, #12
 8003e2c:	7812      	ldrb	r2, [r2, #0]
 8003e2e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e34:	1c5a      	adds	r2, r3, #1
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e3e:	b29b      	uxth	r3, r3
 8003e40:	3b01      	subs	r3, #1
 8003e42:	b29a      	uxth	r2, r3
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003e48:	e011      	b.n	8003e6e <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e4a:	f7fe f931 	bl	80020b0 <HAL_GetTick>
 8003e4e:	4602      	mov	r2, r0
 8003e50:	69bb      	ldr	r3, [r7, #24]
 8003e52:	1ad3      	subs	r3, r2, r3
 8003e54:	683a      	ldr	r2, [r7, #0]
 8003e56:	429a      	cmp	r2, r3
 8003e58:	d803      	bhi.n	8003e62 <HAL_SPI_Transmit+0x268>
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e60:	d102      	bne.n	8003e68 <HAL_SPI_Transmit+0x26e>
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d102      	bne.n	8003e6e <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8003e68:	2303      	movs	r3, #3
 8003e6a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003e6c:	e026      	b.n	8003ebc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e72:	b29b      	uxth	r3, r3
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d1b5      	bne.n	8003de4 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003e78:	69ba      	ldr	r2, [r7, #24]
 8003e7a:	6839      	ldr	r1, [r7, #0]
 8003e7c:	68f8      	ldr	r0, [r7, #12]
 8003e7e:	f000 fb5b 	bl	8004538 <SPI_EndRxTxTransaction>
 8003e82:	4603      	mov	r3, r0
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d002      	beq.n	8003e8e <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2220      	movs	r2, #32
 8003e8c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d10a      	bne.n	8003eac <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003e96:	2300      	movs	r3, #0
 8003e98:	613b      	str	r3, [r7, #16]
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	68db      	ldr	r3, [r3, #12]
 8003ea0:	613b      	str	r3, [r7, #16]
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	613b      	str	r3, [r7, #16]
 8003eaa:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d002      	beq.n	8003eba <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	77fb      	strb	r3, [r7, #31]
 8003eb8:	e000      	b.n	8003ebc <HAL_SPI_Transmit+0x2c2>
  }

error:
 8003eba:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003ecc:	7ffb      	ldrb	r3, [r7, #31]
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3720      	adds	r7, #32
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}

08003ed6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003ed6:	b580      	push	{r7, lr}
 8003ed8:	b08a      	sub	sp, #40	; 0x28
 8003eda:	af00      	add	r7, sp, #0
 8003edc:	60f8      	str	r0, [r7, #12]
 8003ede:	60b9      	str	r1, [r7, #8]
 8003ee0:	607a      	str	r2, [r7, #4]
 8003ee2:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d101      	bne.n	8003efc <HAL_SPI_TransmitReceive+0x26>
 8003ef8:	2302      	movs	r3, #2
 8003efa:	e1fb      	b.n	80042f4 <HAL_SPI_TransmitReceive+0x41e>
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2201      	movs	r2, #1
 8003f00:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003f04:	f7fe f8d4 	bl	80020b0 <HAL_GetTick>
 8003f08:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003f10:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003f18:	887b      	ldrh	r3, [r7, #2]
 8003f1a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003f1c:	887b      	ldrh	r3, [r7, #2]
 8003f1e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003f20:	7efb      	ldrb	r3, [r7, #27]
 8003f22:	2b01      	cmp	r3, #1
 8003f24:	d00e      	beq.n	8003f44 <HAL_SPI_TransmitReceive+0x6e>
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f2c:	d106      	bne.n	8003f3c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d102      	bne.n	8003f3c <HAL_SPI_TransmitReceive+0x66>
 8003f36:	7efb      	ldrb	r3, [r7, #27]
 8003f38:	2b04      	cmp	r3, #4
 8003f3a:	d003      	beq.n	8003f44 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003f3c:	2302      	movs	r3, #2
 8003f3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003f42:	e1cd      	b.n	80042e0 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d005      	beq.n	8003f56 <HAL_SPI_TransmitReceive+0x80>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d002      	beq.n	8003f56 <HAL_SPI_TransmitReceive+0x80>
 8003f50:	887b      	ldrh	r3, [r7, #2]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d103      	bne.n	8003f5e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003f5c:	e1c0      	b.n	80042e0 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003f64:	b2db      	uxtb	r3, r3
 8003f66:	2b04      	cmp	r3, #4
 8003f68:	d003      	beq.n	8003f72 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2205      	movs	r2, #5
 8003f6e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2200      	movs	r2, #0
 8003f76:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	687a      	ldr	r2, [r7, #4]
 8003f7c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	887a      	ldrh	r2, [r7, #2]
 8003f82:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	887a      	ldrh	r2, [r7, #2]
 8003f8a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	68ba      	ldr	r2, [r7, #8]
 8003f92:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	887a      	ldrh	r2, [r7, #2]
 8003f98:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	887a      	ldrh	r2, [r7, #2]
 8003f9e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	68db      	ldr	r3, [r3, #12]
 8003fb0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003fb4:	d802      	bhi.n	8003fbc <HAL_SPI_TransmitReceive+0xe6>
 8003fb6:	8a3b      	ldrh	r3, [r7, #16]
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	d908      	bls.n	8003fce <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	685a      	ldr	r2, [r3, #4]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003fca:	605a      	str	r2, [r3, #4]
 8003fcc:	e007      	b.n	8003fde <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	685a      	ldr	r2, [r3, #4]
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003fdc:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fe8:	2b40      	cmp	r3, #64	; 0x40
 8003fea:	d007      	beq.n	8003ffc <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	681a      	ldr	r2, [r3, #0]
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ffa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	68db      	ldr	r3, [r3, #12]
 8004000:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004004:	d97c      	bls.n	8004100 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d002      	beq.n	8004014 <HAL_SPI_TransmitReceive+0x13e>
 800400e:	8a7b      	ldrh	r3, [r7, #18]
 8004010:	2b01      	cmp	r3, #1
 8004012:	d169      	bne.n	80040e8 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004018:	881a      	ldrh	r2, [r3, #0]
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004024:	1c9a      	adds	r2, r3, #2
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800402e:	b29b      	uxth	r3, r3
 8004030:	3b01      	subs	r3, #1
 8004032:	b29a      	uxth	r2, r3
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004038:	e056      	b.n	80040e8 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	f003 0302 	and.w	r3, r3, #2
 8004044:	2b02      	cmp	r3, #2
 8004046:	d11b      	bne.n	8004080 <HAL_SPI_TransmitReceive+0x1aa>
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800404c:	b29b      	uxth	r3, r3
 800404e:	2b00      	cmp	r3, #0
 8004050:	d016      	beq.n	8004080 <HAL_SPI_TransmitReceive+0x1aa>
 8004052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004054:	2b01      	cmp	r3, #1
 8004056:	d113      	bne.n	8004080 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800405c:	881a      	ldrh	r2, [r3, #0]
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004068:	1c9a      	adds	r2, r3, #2
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004072:	b29b      	uxth	r3, r3
 8004074:	3b01      	subs	r3, #1
 8004076:	b29a      	uxth	r2, r3
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800407c:	2300      	movs	r3, #0
 800407e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	f003 0301 	and.w	r3, r3, #1
 800408a:	2b01      	cmp	r3, #1
 800408c:	d11c      	bne.n	80040c8 <HAL_SPI_TransmitReceive+0x1f2>
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004094:	b29b      	uxth	r3, r3
 8004096:	2b00      	cmp	r3, #0
 8004098:	d016      	beq.n	80040c8 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	68da      	ldr	r2, [r3, #12]
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a4:	b292      	uxth	r2, r2
 80040a6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ac:	1c9a      	adds	r2, r3, #2
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80040b8:	b29b      	uxth	r3, r3
 80040ba:	3b01      	subs	r3, #1
 80040bc:	b29a      	uxth	r2, r3
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80040c4:	2301      	movs	r3, #1
 80040c6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80040c8:	f7fd fff2 	bl	80020b0 <HAL_GetTick>
 80040cc:	4602      	mov	r2, r0
 80040ce:	69fb      	ldr	r3, [r7, #28]
 80040d0:	1ad3      	subs	r3, r2, r3
 80040d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d807      	bhi.n	80040e8 <HAL_SPI_TransmitReceive+0x212>
 80040d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040de:	d003      	beq.n	80040e8 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80040e0:	2303      	movs	r3, #3
 80040e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80040e6:	e0fb      	b.n	80042e0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040ec:	b29b      	uxth	r3, r3
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d1a3      	bne.n	800403a <HAL_SPI_TransmitReceive+0x164>
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80040f8:	b29b      	uxth	r3, r3
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d19d      	bne.n	800403a <HAL_SPI_TransmitReceive+0x164>
 80040fe:	e0df      	b.n	80042c0 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d003      	beq.n	8004110 <HAL_SPI_TransmitReceive+0x23a>
 8004108:	8a7b      	ldrh	r3, [r7, #18]
 800410a:	2b01      	cmp	r3, #1
 800410c:	f040 80cb 	bne.w	80042a6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004114:	b29b      	uxth	r3, r3
 8004116:	2b01      	cmp	r3, #1
 8004118:	d912      	bls.n	8004140 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800411e:	881a      	ldrh	r2, [r3, #0]
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800412a:	1c9a      	adds	r2, r3, #2
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004134:	b29b      	uxth	r3, r3
 8004136:	3b02      	subs	r3, #2
 8004138:	b29a      	uxth	r2, r3
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800413e:	e0b2      	b.n	80042a6 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	330c      	adds	r3, #12
 800414a:	7812      	ldrb	r2, [r2, #0]
 800414c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004152:	1c5a      	adds	r2, r3, #1
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800415c:	b29b      	uxth	r3, r3
 800415e:	3b01      	subs	r3, #1
 8004160:	b29a      	uxth	r2, r3
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004166:	e09e      	b.n	80042a6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	f003 0302 	and.w	r3, r3, #2
 8004172:	2b02      	cmp	r3, #2
 8004174:	d134      	bne.n	80041e0 <HAL_SPI_TransmitReceive+0x30a>
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800417a:	b29b      	uxth	r3, r3
 800417c:	2b00      	cmp	r3, #0
 800417e:	d02f      	beq.n	80041e0 <HAL_SPI_TransmitReceive+0x30a>
 8004180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004182:	2b01      	cmp	r3, #1
 8004184:	d12c      	bne.n	80041e0 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800418a:	b29b      	uxth	r3, r3
 800418c:	2b01      	cmp	r3, #1
 800418e:	d912      	bls.n	80041b6 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004194:	881a      	ldrh	r2, [r3, #0]
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041a0:	1c9a      	adds	r2, r3, #2
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041aa:	b29b      	uxth	r3, r3
 80041ac:	3b02      	subs	r3, #2
 80041ae:	b29a      	uxth	r2, r3
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80041b4:	e012      	b.n	80041dc <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	330c      	adds	r3, #12
 80041c0:	7812      	ldrb	r2, [r2, #0]
 80041c2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041c8:	1c5a      	adds	r2, r3, #1
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041d2:	b29b      	uxth	r3, r3
 80041d4:	3b01      	subs	r3, #1
 80041d6:	b29a      	uxth	r2, r3
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80041dc:	2300      	movs	r3, #0
 80041de:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	f003 0301 	and.w	r3, r3, #1
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	d148      	bne.n	8004280 <HAL_SPI_TransmitReceive+0x3aa>
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80041f4:	b29b      	uxth	r3, r3
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d042      	beq.n	8004280 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004200:	b29b      	uxth	r3, r3
 8004202:	2b01      	cmp	r3, #1
 8004204:	d923      	bls.n	800424e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	68da      	ldr	r2, [r3, #12]
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004210:	b292      	uxth	r2, r2
 8004212:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004218:	1c9a      	adds	r2, r3, #2
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004224:	b29b      	uxth	r3, r3
 8004226:	3b02      	subs	r3, #2
 8004228:	b29a      	uxth	r2, r3
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004236:	b29b      	uxth	r3, r3
 8004238:	2b01      	cmp	r3, #1
 800423a:	d81f      	bhi.n	800427c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	685a      	ldr	r2, [r3, #4]
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800424a:	605a      	str	r2, [r3, #4]
 800424c:	e016      	b.n	800427c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f103 020c 	add.w	r2, r3, #12
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800425a:	7812      	ldrb	r2, [r2, #0]
 800425c:	b2d2      	uxtb	r2, r2
 800425e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004264:	1c5a      	adds	r2, r3, #1
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004270:	b29b      	uxth	r3, r3
 8004272:	3b01      	subs	r3, #1
 8004274:	b29a      	uxth	r2, r3
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800427c:	2301      	movs	r3, #1
 800427e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004280:	f7fd ff16 	bl	80020b0 <HAL_GetTick>
 8004284:	4602      	mov	r2, r0
 8004286:	69fb      	ldr	r3, [r7, #28]
 8004288:	1ad3      	subs	r3, r2, r3
 800428a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800428c:	429a      	cmp	r2, r3
 800428e:	d803      	bhi.n	8004298 <HAL_SPI_TransmitReceive+0x3c2>
 8004290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004292:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004296:	d102      	bne.n	800429e <HAL_SPI_TransmitReceive+0x3c8>
 8004298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800429a:	2b00      	cmp	r3, #0
 800429c:	d103      	bne.n	80042a6 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800429e:	2303      	movs	r3, #3
 80042a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80042a4:	e01c      	b.n	80042e0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042aa:	b29b      	uxth	r3, r3
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	f47f af5b 	bne.w	8004168 <HAL_SPI_TransmitReceive+0x292>
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80042b8:	b29b      	uxth	r3, r3
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	f47f af54 	bne.w	8004168 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80042c0:	69fa      	ldr	r2, [r7, #28]
 80042c2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80042c4:	68f8      	ldr	r0, [r7, #12]
 80042c6:	f000 f937 	bl	8004538 <SPI_EndRxTxTransaction>
 80042ca:	4603      	mov	r3, r0
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d006      	beq.n	80042de <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2220      	movs	r2, #32
 80042da:	661a      	str	r2, [r3, #96]	; 0x60
 80042dc:	e000      	b.n	80042e0 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80042de:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2201      	movs	r2, #1
 80042e4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2200      	movs	r2, #0
 80042ec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80042f0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	3728      	adds	r7, #40	; 0x28
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}

080042fc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b088      	sub	sp, #32
 8004300:	af00      	add	r7, sp, #0
 8004302:	60f8      	str	r0, [r7, #12]
 8004304:	60b9      	str	r1, [r7, #8]
 8004306:	603b      	str	r3, [r7, #0]
 8004308:	4613      	mov	r3, r2
 800430a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800430c:	f7fd fed0 	bl	80020b0 <HAL_GetTick>
 8004310:	4602      	mov	r2, r0
 8004312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004314:	1a9b      	subs	r3, r3, r2
 8004316:	683a      	ldr	r2, [r7, #0]
 8004318:	4413      	add	r3, r2
 800431a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800431c:	f7fd fec8 	bl	80020b0 <HAL_GetTick>
 8004320:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004322:	4b39      	ldr	r3, [pc, #228]	; (8004408 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	015b      	lsls	r3, r3, #5
 8004328:	0d1b      	lsrs	r3, r3, #20
 800432a:	69fa      	ldr	r2, [r7, #28]
 800432c:	fb02 f303 	mul.w	r3, r2, r3
 8004330:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004332:	e054      	b.n	80043de <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	f1b3 3fff 	cmp.w	r3, #4294967295
 800433a:	d050      	beq.n	80043de <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800433c:	f7fd feb8 	bl	80020b0 <HAL_GetTick>
 8004340:	4602      	mov	r2, r0
 8004342:	69bb      	ldr	r3, [r7, #24]
 8004344:	1ad3      	subs	r3, r2, r3
 8004346:	69fa      	ldr	r2, [r7, #28]
 8004348:	429a      	cmp	r2, r3
 800434a:	d902      	bls.n	8004352 <SPI_WaitFlagStateUntilTimeout+0x56>
 800434c:	69fb      	ldr	r3, [r7, #28]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d13d      	bne.n	80043ce <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	685a      	ldr	r2, [r3, #4]
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004360:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800436a:	d111      	bne.n	8004390 <SPI_WaitFlagStateUntilTimeout+0x94>
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004374:	d004      	beq.n	8004380 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800437e:	d107      	bne.n	8004390 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	681a      	ldr	r2, [r3, #0]
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800438e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004394:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004398:	d10f      	bne.n	80043ba <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	681a      	ldr	r2, [r3, #0]
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80043a8:	601a      	str	r2, [r3, #0]
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80043b8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2201      	movs	r2, #1
 80043be:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2200      	movs	r2, #0
 80043c6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80043ca:	2303      	movs	r3, #3
 80043cc:	e017      	b.n	80043fe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d101      	bne.n	80043d8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80043d4:	2300      	movs	r3, #0
 80043d6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	3b01      	subs	r3, #1
 80043dc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	689a      	ldr	r2, [r3, #8]
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	4013      	ands	r3, r2
 80043e8:	68ba      	ldr	r2, [r7, #8]
 80043ea:	429a      	cmp	r2, r3
 80043ec:	bf0c      	ite	eq
 80043ee:	2301      	moveq	r3, #1
 80043f0:	2300      	movne	r3, #0
 80043f2:	b2db      	uxtb	r3, r3
 80043f4:	461a      	mov	r2, r3
 80043f6:	79fb      	ldrb	r3, [r7, #7]
 80043f8:	429a      	cmp	r2, r3
 80043fa:	d19b      	bne.n	8004334 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80043fc:	2300      	movs	r3, #0
}
 80043fe:	4618      	mov	r0, r3
 8004400:	3720      	adds	r7, #32
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}
 8004406:	bf00      	nop
 8004408:	20000004 	.word	0x20000004

0800440c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b08a      	sub	sp, #40	; 0x28
 8004410:	af00      	add	r7, sp, #0
 8004412:	60f8      	str	r0, [r7, #12]
 8004414:	60b9      	str	r1, [r7, #8]
 8004416:	607a      	str	r2, [r7, #4]
 8004418:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800441a:	2300      	movs	r3, #0
 800441c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800441e:	f7fd fe47 	bl	80020b0 <HAL_GetTick>
 8004422:	4602      	mov	r2, r0
 8004424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004426:	1a9b      	subs	r3, r3, r2
 8004428:	683a      	ldr	r2, [r7, #0]
 800442a:	4413      	add	r3, r2
 800442c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800442e:	f7fd fe3f 	bl	80020b0 <HAL_GetTick>
 8004432:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	330c      	adds	r3, #12
 800443a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800443c:	4b3d      	ldr	r3, [pc, #244]	; (8004534 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800443e:	681a      	ldr	r2, [r3, #0]
 8004440:	4613      	mov	r3, r2
 8004442:	009b      	lsls	r3, r3, #2
 8004444:	4413      	add	r3, r2
 8004446:	00da      	lsls	r2, r3, #3
 8004448:	1ad3      	subs	r3, r2, r3
 800444a:	0d1b      	lsrs	r3, r3, #20
 800444c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800444e:	fb02 f303 	mul.w	r3, r2, r3
 8004452:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004454:	e060      	b.n	8004518 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800445c:	d107      	bne.n	800446e <SPI_WaitFifoStateUntilTimeout+0x62>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d104      	bne.n	800446e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004464:	69fb      	ldr	r3, [r7, #28]
 8004466:	781b      	ldrb	r3, [r3, #0]
 8004468:	b2db      	uxtb	r3, r3
 800446a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800446c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004474:	d050      	beq.n	8004518 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004476:	f7fd fe1b 	bl	80020b0 <HAL_GetTick>
 800447a:	4602      	mov	r2, r0
 800447c:	6a3b      	ldr	r3, [r7, #32]
 800447e:	1ad3      	subs	r3, r2, r3
 8004480:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004482:	429a      	cmp	r2, r3
 8004484:	d902      	bls.n	800448c <SPI_WaitFifoStateUntilTimeout+0x80>
 8004486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004488:	2b00      	cmp	r3, #0
 800448a:	d13d      	bne.n	8004508 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	685a      	ldr	r2, [r3, #4]
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800449a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80044a4:	d111      	bne.n	80044ca <SPI_WaitFifoStateUntilTimeout+0xbe>
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044ae:	d004      	beq.n	80044ba <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	689b      	ldr	r3, [r3, #8]
 80044b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044b8:	d107      	bne.n	80044ca <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	681a      	ldr	r2, [r3, #0]
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044c8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044d2:	d10f      	bne.n	80044f4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	681a      	ldr	r2, [r3, #0]
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80044e2:	601a      	str	r2, [r3, #0]
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	681a      	ldr	r2, [r3, #0]
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80044f2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2201      	movs	r2, #1
 80044f8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2200      	movs	r2, #0
 8004500:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004504:	2303      	movs	r3, #3
 8004506:	e010      	b.n	800452a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004508:	69bb      	ldr	r3, [r7, #24]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d101      	bne.n	8004512 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800450e:	2300      	movs	r3, #0
 8004510:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004512:	69bb      	ldr	r3, [r7, #24]
 8004514:	3b01      	subs	r3, #1
 8004516:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	689a      	ldr	r2, [r3, #8]
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	4013      	ands	r3, r2
 8004522:	687a      	ldr	r2, [r7, #4]
 8004524:	429a      	cmp	r2, r3
 8004526:	d196      	bne.n	8004456 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004528:	2300      	movs	r3, #0
}
 800452a:	4618      	mov	r0, r3
 800452c:	3728      	adds	r7, #40	; 0x28
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}
 8004532:	bf00      	nop
 8004534:	20000004 	.word	0x20000004

08004538 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b088      	sub	sp, #32
 800453c:	af02      	add	r7, sp, #8
 800453e:	60f8      	str	r0, [r7, #12]
 8004540:	60b9      	str	r1, [r7, #8]
 8004542:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	9300      	str	r3, [sp, #0]
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	2200      	movs	r2, #0
 800454c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004550:	68f8      	ldr	r0, [r7, #12]
 8004552:	f7ff ff5b 	bl	800440c <SPI_WaitFifoStateUntilTimeout>
 8004556:	4603      	mov	r3, r0
 8004558:	2b00      	cmp	r3, #0
 800455a:	d007      	beq.n	800456c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004560:	f043 0220 	orr.w	r2, r3, #32
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004568:	2303      	movs	r3, #3
 800456a:	e046      	b.n	80045fa <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800456c:	4b25      	ldr	r3, [pc, #148]	; (8004604 <SPI_EndRxTxTransaction+0xcc>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a25      	ldr	r2, [pc, #148]	; (8004608 <SPI_EndRxTxTransaction+0xd0>)
 8004572:	fba2 2303 	umull	r2, r3, r2, r3
 8004576:	0d5b      	lsrs	r3, r3, #21
 8004578:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800457c:	fb02 f303 	mul.w	r3, r2, r3
 8004580:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800458a:	d112      	bne.n	80045b2 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	9300      	str	r3, [sp, #0]
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	2200      	movs	r2, #0
 8004594:	2180      	movs	r1, #128	; 0x80
 8004596:	68f8      	ldr	r0, [r7, #12]
 8004598:	f7ff feb0 	bl	80042fc <SPI_WaitFlagStateUntilTimeout>
 800459c:	4603      	mov	r3, r0
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d016      	beq.n	80045d0 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045a6:	f043 0220 	orr.w	r2, r3, #32
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80045ae:	2303      	movs	r3, #3
 80045b0:	e023      	b.n	80045fa <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d00a      	beq.n	80045ce <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	3b01      	subs	r3, #1
 80045bc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045c8:	2b80      	cmp	r3, #128	; 0x80
 80045ca:	d0f2      	beq.n	80045b2 <SPI_EndRxTxTransaction+0x7a>
 80045cc:	e000      	b.n	80045d0 <SPI_EndRxTxTransaction+0x98>
        break;
 80045ce:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	9300      	str	r3, [sp, #0]
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	2200      	movs	r2, #0
 80045d8:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80045dc:	68f8      	ldr	r0, [r7, #12]
 80045de:	f7ff ff15 	bl	800440c <SPI_WaitFifoStateUntilTimeout>
 80045e2:	4603      	mov	r3, r0
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d007      	beq.n	80045f8 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045ec:	f043 0220 	orr.w	r2, r3, #32
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80045f4:	2303      	movs	r3, #3
 80045f6:	e000      	b.n	80045fa <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 80045f8:	2300      	movs	r3, #0
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3718      	adds	r7, #24
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}
 8004602:	bf00      	nop
 8004604:	20000004 	.word	0x20000004
 8004608:	165e9f81 	.word	0x165e9f81

0800460c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b082      	sub	sp, #8
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d101      	bne.n	800461e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	e040      	b.n	80046a0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004622:	2b00      	cmp	r3, #0
 8004624:	d106      	bne.n	8004634 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2200      	movs	r2, #0
 800462a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f7fd fb5e 	bl	8001cf0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2224      	movs	r2, #36	; 0x24
 8004638:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	681a      	ldr	r2, [r3, #0]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f022 0201 	bic.w	r2, r2, #1
 8004648:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f000 f8b0 	bl	80047b0 <UART_SetConfig>
 8004650:	4603      	mov	r3, r0
 8004652:	2b01      	cmp	r3, #1
 8004654:	d101      	bne.n	800465a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	e022      	b.n	80046a0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800465e:	2b00      	cmp	r3, #0
 8004660:	d002      	beq.n	8004668 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f000 fb08 	bl	8004c78 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	685a      	ldr	r2, [r3, #4]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004676:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	689a      	ldr	r2, [r3, #8]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004686:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	681a      	ldr	r2, [r3, #0]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f042 0201 	orr.w	r2, r2, #1
 8004696:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004698:	6878      	ldr	r0, [r7, #4]
 800469a:	f000 fb8f 	bl	8004dbc <UART_CheckIdleState>
 800469e:	4603      	mov	r3, r0
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	3708      	adds	r7, #8
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}

080046a8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b08a      	sub	sp, #40	; 0x28
 80046ac:	af02      	add	r7, sp, #8
 80046ae:	60f8      	str	r0, [r7, #12]
 80046b0:	60b9      	str	r1, [r7, #8]
 80046b2:	603b      	str	r3, [r7, #0]
 80046b4:	4613      	mov	r3, r2
 80046b6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80046bc:	2b20      	cmp	r3, #32
 80046be:	d171      	bne.n	80047a4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d002      	beq.n	80046cc <HAL_UART_Transmit+0x24>
 80046c6:	88fb      	ldrh	r3, [r7, #6]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d101      	bne.n	80046d0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	e06a      	b.n	80047a6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2200      	movs	r2, #0
 80046d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2221      	movs	r2, #33	; 0x21
 80046dc:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80046de:	f7fd fce7 	bl	80020b0 <HAL_GetTick>
 80046e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	88fa      	ldrh	r2, [r7, #6]
 80046e8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	88fa      	ldrh	r2, [r7, #6]
 80046f0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046fc:	d108      	bne.n	8004710 <HAL_UART_Transmit+0x68>
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	691b      	ldr	r3, [r3, #16]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d104      	bne.n	8004710 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004706:	2300      	movs	r3, #0
 8004708:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	61bb      	str	r3, [r7, #24]
 800470e:	e003      	b.n	8004718 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004714:	2300      	movs	r3, #0
 8004716:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004718:	e02c      	b.n	8004774 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	9300      	str	r3, [sp, #0]
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	2200      	movs	r2, #0
 8004722:	2180      	movs	r1, #128	; 0x80
 8004724:	68f8      	ldr	r0, [r7, #12]
 8004726:	f000 fb80 	bl	8004e2a <UART_WaitOnFlagUntilTimeout>
 800472a:	4603      	mov	r3, r0
 800472c:	2b00      	cmp	r3, #0
 800472e:	d001      	beq.n	8004734 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8004730:	2303      	movs	r3, #3
 8004732:	e038      	b.n	80047a6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004734:	69fb      	ldr	r3, [r7, #28]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d10b      	bne.n	8004752 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800473a:	69bb      	ldr	r3, [r7, #24]
 800473c:	881b      	ldrh	r3, [r3, #0]
 800473e:	461a      	mov	r2, r3
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004748:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800474a:	69bb      	ldr	r3, [r7, #24]
 800474c:	3302      	adds	r3, #2
 800474e:	61bb      	str	r3, [r7, #24]
 8004750:	e007      	b.n	8004762 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004752:	69fb      	ldr	r3, [r7, #28]
 8004754:	781a      	ldrb	r2, [r3, #0]
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800475c:	69fb      	ldr	r3, [r7, #28]
 800475e:	3301      	adds	r3, #1
 8004760:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004768:	b29b      	uxth	r3, r3
 800476a:	3b01      	subs	r3, #1
 800476c:	b29a      	uxth	r2, r3
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800477a:	b29b      	uxth	r3, r3
 800477c:	2b00      	cmp	r3, #0
 800477e:	d1cc      	bne.n	800471a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	9300      	str	r3, [sp, #0]
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	2200      	movs	r2, #0
 8004788:	2140      	movs	r1, #64	; 0x40
 800478a:	68f8      	ldr	r0, [r7, #12]
 800478c:	f000 fb4d 	bl	8004e2a <UART_WaitOnFlagUntilTimeout>
 8004790:	4603      	mov	r3, r0
 8004792:	2b00      	cmp	r3, #0
 8004794:	d001      	beq.n	800479a <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8004796:	2303      	movs	r3, #3
 8004798:	e005      	b.n	80047a6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2220      	movs	r2, #32
 800479e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80047a0:	2300      	movs	r3, #0
 80047a2:	e000      	b.n	80047a6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80047a4:	2302      	movs	r3, #2
  }
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	3720      	adds	r7, #32
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}
	...

080047b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b088      	sub	sp, #32
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80047b8:	2300      	movs	r3, #0
 80047ba:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	689a      	ldr	r2, [r3, #8]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	691b      	ldr	r3, [r3, #16]
 80047c4:	431a      	orrs	r2, r3
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	695b      	ldr	r3, [r3, #20]
 80047ca:	431a      	orrs	r2, r3
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	69db      	ldr	r3, [r3, #28]
 80047d0:	4313      	orrs	r3, r2
 80047d2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	4ba6      	ldr	r3, [pc, #664]	; (8004a74 <UART_SetConfig+0x2c4>)
 80047dc:	4013      	ands	r3, r2
 80047de:	687a      	ldr	r2, [r7, #4]
 80047e0:	6812      	ldr	r2, [r2, #0]
 80047e2:	6979      	ldr	r1, [r7, #20]
 80047e4:	430b      	orrs	r3, r1
 80047e6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	68da      	ldr	r2, [r3, #12]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	430a      	orrs	r2, r1
 80047fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	699b      	ldr	r3, [r3, #24]
 8004802:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6a1b      	ldr	r3, [r3, #32]
 8004808:	697a      	ldr	r2, [r7, #20]
 800480a:	4313      	orrs	r3, r2
 800480c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	697a      	ldr	r2, [r7, #20]
 800481e:	430a      	orrs	r2, r1
 8004820:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a94      	ldr	r2, [pc, #592]	; (8004a78 <UART_SetConfig+0x2c8>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d120      	bne.n	800486e <UART_SetConfig+0xbe>
 800482c:	4b93      	ldr	r3, [pc, #588]	; (8004a7c <UART_SetConfig+0x2cc>)
 800482e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004832:	f003 0303 	and.w	r3, r3, #3
 8004836:	2b03      	cmp	r3, #3
 8004838:	d816      	bhi.n	8004868 <UART_SetConfig+0xb8>
 800483a:	a201      	add	r2, pc, #4	; (adr r2, 8004840 <UART_SetConfig+0x90>)
 800483c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004840:	08004851 	.word	0x08004851
 8004844:	0800485d 	.word	0x0800485d
 8004848:	08004857 	.word	0x08004857
 800484c:	08004863 	.word	0x08004863
 8004850:	2301      	movs	r3, #1
 8004852:	77fb      	strb	r3, [r7, #31]
 8004854:	e150      	b.n	8004af8 <UART_SetConfig+0x348>
 8004856:	2302      	movs	r3, #2
 8004858:	77fb      	strb	r3, [r7, #31]
 800485a:	e14d      	b.n	8004af8 <UART_SetConfig+0x348>
 800485c:	2304      	movs	r3, #4
 800485e:	77fb      	strb	r3, [r7, #31]
 8004860:	e14a      	b.n	8004af8 <UART_SetConfig+0x348>
 8004862:	2308      	movs	r3, #8
 8004864:	77fb      	strb	r3, [r7, #31]
 8004866:	e147      	b.n	8004af8 <UART_SetConfig+0x348>
 8004868:	2310      	movs	r3, #16
 800486a:	77fb      	strb	r3, [r7, #31]
 800486c:	e144      	b.n	8004af8 <UART_SetConfig+0x348>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a83      	ldr	r2, [pc, #524]	; (8004a80 <UART_SetConfig+0x2d0>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d132      	bne.n	80048de <UART_SetConfig+0x12e>
 8004878:	4b80      	ldr	r3, [pc, #512]	; (8004a7c <UART_SetConfig+0x2cc>)
 800487a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800487e:	f003 030c 	and.w	r3, r3, #12
 8004882:	2b0c      	cmp	r3, #12
 8004884:	d828      	bhi.n	80048d8 <UART_SetConfig+0x128>
 8004886:	a201      	add	r2, pc, #4	; (adr r2, 800488c <UART_SetConfig+0xdc>)
 8004888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800488c:	080048c1 	.word	0x080048c1
 8004890:	080048d9 	.word	0x080048d9
 8004894:	080048d9 	.word	0x080048d9
 8004898:	080048d9 	.word	0x080048d9
 800489c:	080048cd 	.word	0x080048cd
 80048a0:	080048d9 	.word	0x080048d9
 80048a4:	080048d9 	.word	0x080048d9
 80048a8:	080048d9 	.word	0x080048d9
 80048ac:	080048c7 	.word	0x080048c7
 80048b0:	080048d9 	.word	0x080048d9
 80048b4:	080048d9 	.word	0x080048d9
 80048b8:	080048d9 	.word	0x080048d9
 80048bc:	080048d3 	.word	0x080048d3
 80048c0:	2300      	movs	r3, #0
 80048c2:	77fb      	strb	r3, [r7, #31]
 80048c4:	e118      	b.n	8004af8 <UART_SetConfig+0x348>
 80048c6:	2302      	movs	r3, #2
 80048c8:	77fb      	strb	r3, [r7, #31]
 80048ca:	e115      	b.n	8004af8 <UART_SetConfig+0x348>
 80048cc:	2304      	movs	r3, #4
 80048ce:	77fb      	strb	r3, [r7, #31]
 80048d0:	e112      	b.n	8004af8 <UART_SetConfig+0x348>
 80048d2:	2308      	movs	r3, #8
 80048d4:	77fb      	strb	r3, [r7, #31]
 80048d6:	e10f      	b.n	8004af8 <UART_SetConfig+0x348>
 80048d8:	2310      	movs	r3, #16
 80048da:	77fb      	strb	r3, [r7, #31]
 80048dc:	e10c      	b.n	8004af8 <UART_SetConfig+0x348>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a68      	ldr	r2, [pc, #416]	; (8004a84 <UART_SetConfig+0x2d4>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d120      	bne.n	800492a <UART_SetConfig+0x17a>
 80048e8:	4b64      	ldr	r3, [pc, #400]	; (8004a7c <UART_SetConfig+0x2cc>)
 80048ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048ee:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80048f2:	2b30      	cmp	r3, #48	; 0x30
 80048f4:	d013      	beq.n	800491e <UART_SetConfig+0x16e>
 80048f6:	2b30      	cmp	r3, #48	; 0x30
 80048f8:	d814      	bhi.n	8004924 <UART_SetConfig+0x174>
 80048fa:	2b20      	cmp	r3, #32
 80048fc:	d009      	beq.n	8004912 <UART_SetConfig+0x162>
 80048fe:	2b20      	cmp	r3, #32
 8004900:	d810      	bhi.n	8004924 <UART_SetConfig+0x174>
 8004902:	2b00      	cmp	r3, #0
 8004904:	d002      	beq.n	800490c <UART_SetConfig+0x15c>
 8004906:	2b10      	cmp	r3, #16
 8004908:	d006      	beq.n	8004918 <UART_SetConfig+0x168>
 800490a:	e00b      	b.n	8004924 <UART_SetConfig+0x174>
 800490c:	2300      	movs	r3, #0
 800490e:	77fb      	strb	r3, [r7, #31]
 8004910:	e0f2      	b.n	8004af8 <UART_SetConfig+0x348>
 8004912:	2302      	movs	r3, #2
 8004914:	77fb      	strb	r3, [r7, #31]
 8004916:	e0ef      	b.n	8004af8 <UART_SetConfig+0x348>
 8004918:	2304      	movs	r3, #4
 800491a:	77fb      	strb	r3, [r7, #31]
 800491c:	e0ec      	b.n	8004af8 <UART_SetConfig+0x348>
 800491e:	2308      	movs	r3, #8
 8004920:	77fb      	strb	r3, [r7, #31]
 8004922:	e0e9      	b.n	8004af8 <UART_SetConfig+0x348>
 8004924:	2310      	movs	r3, #16
 8004926:	77fb      	strb	r3, [r7, #31]
 8004928:	e0e6      	b.n	8004af8 <UART_SetConfig+0x348>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a56      	ldr	r2, [pc, #344]	; (8004a88 <UART_SetConfig+0x2d8>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d120      	bne.n	8004976 <UART_SetConfig+0x1c6>
 8004934:	4b51      	ldr	r3, [pc, #324]	; (8004a7c <UART_SetConfig+0x2cc>)
 8004936:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800493a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800493e:	2bc0      	cmp	r3, #192	; 0xc0
 8004940:	d013      	beq.n	800496a <UART_SetConfig+0x1ba>
 8004942:	2bc0      	cmp	r3, #192	; 0xc0
 8004944:	d814      	bhi.n	8004970 <UART_SetConfig+0x1c0>
 8004946:	2b80      	cmp	r3, #128	; 0x80
 8004948:	d009      	beq.n	800495e <UART_SetConfig+0x1ae>
 800494a:	2b80      	cmp	r3, #128	; 0x80
 800494c:	d810      	bhi.n	8004970 <UART_SetConfig+0x1c0>
 800494e:	2b00      	cmp	r3, #0
 8004950:	d002      	beq.n	8004958 <UART_SetConfig+0x1a8>
 8004952:	2b40      	cmp	r3, #64	; 0x40
 8004954:	d006      	beq.n	8004964 <UART_SetConfig+0x1b4>
 8004956:	e00b      	b.n	8004970 <UART_SetConfig+0x1c0>
 8004958:	2300      	movs	r3, #0
 800495a:	77fb      	strb	r3, [r7, #31]
 800495c:	e0cc      	b.n	8004af8 <UART_SetConfig+0x348>
 800495e:	2302      	movs	r3, #2
 8004960:	77fb      	strb	r3, [r7, #31]
 8004962:	e0c9      	b.n	8004af8 <UART_SetConfig+0x348>
 8004964:	2304      	movs	r3, #4
 8004966:	77fb      	strb	r3, [r7, #31]
 8004968:	e0c6      	b.n	8004af8 <UART_SetConfig+0x348>
 800496a:	2308      	movs	r3, #8
 800496c:	77fb      	strb	r3, [r7, #31]
 800496e:	e0c3      	b.n	8004af8 <UART_SetConfig+0x348>
 8004970:	2310      	movs	r3, #16
 8004972:	77fb      	strb	r3, [r7, #31]
 8004974:	e0c0      	b.n	8004af8 <UART_SetConfig+0x348>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a44      	ldr	r2, [pc, #272]	; (8004a8c <UART_SetConfig+0x2dc>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d125      	bne.n	80049cc <UART_SetConfig+0x21c>
 8004980:	4b3e      	ldr	r3, [pc, #248]	; (8004a7c <UART_SetConfig+0x2cc>)
 8004982:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004986:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800498a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800498e:	d017      	beq.n	80049c0 <UART_SetConfig+0x210>
 8004990:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004994:	d817      	bhi.n	80049c6 <UART_SetConfig+0x216>
 8004996:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800499a:	d00b      	beq.n	80049b4 <UART_SetConfig+0x204>
 800499c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049a0:	d811      	bhi.n	80049c6 <UART_SetConfig+0x216>
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d003      	beq.n	80049ae <UART_SetConfig+0x1fe>
 80049a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049aa:	d006      	beq.n	80049ba <UART_SetConfig+0x20a>
 80049ac:	e00b      	b.n	80049c6 <UART_SetConfig+0x216>
 80049ae:	2300      	movs	r3, #0
 80049b0:	77fb      	strb	r3, [r7, #31]
 80049b2:	e0a1      	b.n	8004af8 <UART_SetConfig+0x348>
 80049b4:	2302      	movs	r3, #2
 80049b6:	77fb      	strb	r3, [r7, #31]
 80049b8:	e09e      	b.n	8004af8 <UART_SetConfig+0x348>
 80049ba:	2304      	movs	r3, #4
 80049bc:	77fb      	strb	r3, [r7, #31]
 80049be:	e09b      	b.n	8004af8 <UART_SetConfig+0x348>
 80049c0:	2308      	movs	r3, #8
 80049c2:	77fb      	strb	r3, [r7, #31]
 80049c4:	e098      	b.n	8004af8 <UART_SetConfig+0x348>
 80049c6:	2310      	movs	r3, #16
 80049c8:	77fb      	strb	r3, [r7, #31]
 80049ca:	e095      	b.n	8004af8 <UART_SetConfig+0x348>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a2f      	ldr	r2, [pc, #188]	; (8004a90 <UART_SetConfig+0x2e0>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d125      	bne.n	8004a22 <UART_SetConfig+0x272>
 80049d6:	4b29      	ldr	r3, [pc, #164]	; (8004a7c <UART_SetConfig+0x2cc>)
 80049d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049dc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80049e0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80049e4:	d017      	beq.n	8004a16 <UART_SetConfig+0x266>
 80049e6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80049ea:	d817      	bhi.n	8004a1c <UART_SetConfig+0x26c>
 80049ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049f0:	d00b      	beq.n	8004a0a <UART_SetConfig+0x25a>
 80049f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049f6:	d811      	bhi.n	8004a1c <UART_SetConfig+0x26c>
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d003      	beq.n	8004a04 <UART_SetConfig+0x254>
 80049fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a00:	d006      	beq.n	8004a10 <UART_SetConfig+0x260>
 8004a02:	e00b      	b.n	8004a1c <UART_SetConfig+0x26c>
 8004a04:	2301      	movs	r3, #1
 8004a06:	77fb      	strb	r3, [r7, #31]
 8004a08:	e076      	b.n	8004af8 <UART_SetConfig+0x348>
 8004a0a:	2302      	movs	r3, #2
 8004a0c:	77fb      	strb	r3, [r7, #31]
 8004a0e:	e073      	b.n	8004af8 <UART_SetConfig+0x348>
 8004a10:	2304      	movs	r3, #4
 8004a12:	77fb      	strb	r3, [r7, #31]
 8004a14:	e070      	b.n	8004af8 <UART_SetConfig+0x348>
 8004a16:	2308      	movs	r3, #8
 8004a18:	77fb      	strb	r3, [r7, #31]
 8004a1a:	e06d      	b.n	8004af8 <UART_SetConfig+0x348>
 8004a1c:	2310      	movs	r3, #16
 8004a1e:	77fb      	strb	r3, [r7, #31]
 8004a20:	e06a      	b.n	8004af8 <UART_SetConfig+0x348>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a1b      	ldr	r2, [pc, #108]	; (8004a94 <UART_SetConfig+0x2e4>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d138      	bne.n	8004a9e <UART_SetConfig+0x2ee>
 8004a2c:	4b13      	ldr	r3, [pc, #76]	; (8004a7c <UART_SetConfig+0x2cc>)
 8004a2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a32:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004a36:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004a3a:	d017      	beq.n	8004a6c <UART_SetConfig+0x2bc>
 8004a3c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004a40:	d82a      	bhi.n	8004a98 <UART_SetConfig+0x2e8>
 8004a42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a46:	d00b      	beq.n	8004a60 <UART_SetConfig+0x2b0>
 8004a48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a4c:	d824      	bhi.n	8004a98 <UART_SetConfig+0x2e8>
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d003      	beq.n	8004a5a <UART_SetConfig+0x2aa>
 8004a52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a56:	d006      	beq.n	8004a66 <UART_SetConfig+0x2b6>
 8004a58:	e01e      	b.n	8004a98 <UART_SetConfig+0x2e8>
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	77fb      	strb	r3, [r7, #31]
 8004a5e:	e04b      	b.n	8004af8 <UART_SetConfig+0x348>
 8004a60:	2302      	movs	r3, #2
 8004a62:	77fb      	strb	r3, [r7, #31]
 8004a64:	e048      	b.n	8004af8 <UART_SetConfig+0x348>
 8004a66:	2304      	movs	r3, #4
 8004a68:	77fb      	strb	r3, [r7, #31]
 8004a6a:	e045      	b.n	8004af8 <UART_SetConfig+0x348>
 8004a6c:	2308      	movs	r3, #8
 8004a6e:	77fb      	strb	r3, [r7, #31]
 8004a70:	e042      	b.n	8004af8 <UART_SetConfig+0x348>
 8004a72:	bf00      	nop
 8004a74:	efff69f3 	.word	0xefff69f3
 8004a78:	40011000 	.word	0x40011000
 8004a7c:	40023800 	.word	0x40023800
 8004a80:	40004400 	.word	0x40004400
 8004a84:	40004800 	.word	0x40004800
 8004a88:	40004c00 	.word	0x40004c00
 8004a8c:	40005000 	.word	0x40005000
 8004a90:	40011400 	.word	0x40011400
 8004a94:	40007800 	.word	0x40007800
 8004a98:	2310      	movs	r3, #16
 8004a9a:	77fb      	strb	r3, [r7, #31]
 8004a9c:	e02c      	b.n	8004af8 <UART_SetConfig+0x348>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a72      	ldr	r2, [pc, #456]	; (8004c6c <UART_SetConfig+0x4bc>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d125      	bne.n	8004af4 <UART_SetConfig+0x344>
 8004aa8:	4b71      	ldr	r3, [pc, #452]	; (8004c70 <UART_SetConfig+0x4c0>)
 8004aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aae:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004ab2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004ab6:	d017      	beq.n	8004ae8 <UART_SetConfig+0x338>
 8004ab8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004abc:	d817      	bhi.n	8004aee <UART_SetConfig+0x33e>
 8004abe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ac2:	d00b      	beq.n	8004adc <UART_SetConfig+0x32c>
 8004ac4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ac8:	d811      	bhi.n	8004aee <UART_SetConfig+0x33e>
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d003      	beq.n	8004ad6 <UART_SetConfig+0x326>
 8004ace:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ad2:	d006      	beq.n	8004ae2 <UART_SetConfig+0x332>
 8004ad4:	e00b      	b.n	8004aee <UART_SetConfig+0x33e>
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	77fb      	strb	r3, [r7, #31]
 8004ada:	e00d      	b.n	8004af8 <UART_SetConfig+0x348>
 8004adc:	2302      	movs	r3, #2
 8004ade:	77fb      	strb	r3, [r7, #31]
 8004ae0:	e00a      	b.n	8004af8 <UART_SetConfig+0x348>
 8004ae2:	2304      	movs	r3, #4
 8004ae4:	77fb      	strb	r3, [r7, #31]
 8004ae6:	e007      	b.n	8004af8 <UART_SetConfig+0x348>
 8004ae8:	2308      	movs	r3, #8
 8004aea:	77fb      	strb	r3, [r7, #31]
 8004aec:	e004      	b.n	8004af8 <UART_SetConfig+0x348>
 8004aee:	2310      	movs	r3, #16
 8004af0:	77fb      	strb	r3, [r7, #31]
 8004af2:	e001      	b.n	8004af8 <UART_SetConfig+0x348>
 8004af4:	2310      	movs	r3, #16
 8004af6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	69db      	ldr	r3, [r3, #28]
 8004afc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b00:	d15b      	bne.n	8004bba <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004b02:	7ffb      	ldrb	r3, [r7, #31]
 8004b04:	2b08      	cmp	r3, #8
 8004b06:	d828      	bhi.n	8004b5a <UART_SetConfig+0x3aa>
 8004b08:	a201      	add	r2, pc, #4	; (adr r2, 8004b10 <UART_SetConfig+0x360>)
 8004b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b0e:	bf00      	nop
 8004b10:	08004b35 	.word	0x08004b35
 8004b14:	08004b3d 	.word	0x08004b3d
 8004b18:	08004b45 	.word	0x08004b45
 8004b1c:	08004b5b 	.word	0x08004b5b
 8004b20:	08004b4b 	.word	0x08004b4b
 8004b24:	08004b5b 	.word	0x08004b5b
 8004b28:	08004b5b 	.word	0x08004b5b
 8004b2c:	08004b5b 	.word	0x08004b5b
 8004b30:	08004b53 	.word	0x08004b53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b34:	f7fe fb9e 	bl	8003274 <HAL_RCC_GetPCLK1Freq>
 8004b38:	61b8      	str	r0, [r7, #24]
        break;
 8004b3a:	e013      	b.n	8004b64 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b3c:	f7fe fbae 	bl	800329c <HAL_RCC_GetPCLK2Freq>
 8004b40:	61b8      	str	r0, [r7, #24]
        break;
 8004b42:	e00f      	b.n	8004b64 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b44:	4b4b      	ldr	r3, [pc, #300]	; (8004c74 <UART_SetConfig+0x4c4>)
 8004b46:	61bb      	str	r3, [r7, #24]
        break;
 8004b48:	e00c      	b.n	8004b64 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b4a:	f7fe fa81 	bl	8003050 <HAL_RCC_GetSysClockFreq>
 8004b4e:	61b8      	str	r0, [r7, #24]
        break;
 8004b50:	e008      	b.n	8004b64 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b56:	61bb      	str	r3, [r7, #24]
        break;
 8004b58:	e004      	b.n	8004b64 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	77bb      	strb	r3, [r7, #30]
        break;
 8004b62:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004b64:	69bb      	ldr	r3, [r7, #24]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d074      	beq.n	8004c54 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004b6a:	69bb      	ldr	r3, [r7, #24]
 8004b6c:	005a      	lsls	r2, r3, #1
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	085b      	lsrs	r3, r3, #1
 8004b74:	441a      	add	r2, r3
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b7e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	2b0f      	cmp	r3, #15
 8004b84:	d916      	bls.n	8004bb4 <UART_SetConfig+0x404>
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b8c:	d212      	bcs.n	8004bb4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	b29b      	uxth	r3, r3
 8004b92:	f023 030f 	bic.w	r3, r3, #15
 8004b96:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	085b      	lsrs	r3, r3, #1
 8004b9c:	b29b      	uxth	r3, r3
 8004b9e:	f003 0307 	and.w	r3, r3, #7
 8004ba2:	b29a      	uxth	r2, r3
 8004ba4:	89fb      	ldrh	r3, [r7, #14]
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	89fa      	ldrh	r2, [r7, #14]
 8004bb0:	60da      	str	r2, [r3, #12]
 8004bb2:	e04f      	b.n	8004c54 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	77bb      	strb	r3, [r7, #30]
 8004bb8:	e04c      	b.n	8004c54 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004bba:	7ffb      	ldrb	r3, [r7, #31]
 8004bbc:	2b08      	cmp	r3, #8
 8004bbe:	d828      	bhi.n	8004c12 <UART_SetConfig+0x462>
 8004bc0:	a201      	add	r2, pc, #4	; (adr r2, 8004bc8 <UART_SetConfig+0x418>)
 8004bc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bc6:	bf00      	nop
 8004bc8:	08004bed 	.word	0x08004bed
 8004bcc:	08004bf5 	.word	0x08004bf5
 8004bd0:	08004bfd 	.word	0x08004bfd
 8004bd4:	08004c13 	.word	0x08004c13
 8004bd8:	08004c03 	.word	0x08004c03
 8004bdc:	08004c13 	.word	0x08004c13
 8004be0:	08004c13 	.word	0x08004c13
 8004be4:	08004c13 	.word	0x08004c13
 8004be8:	08004c0b 	.word	0x08004c0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004bec:	f7fe fb42 	bl	8003274 <HAL_RCC_GetPCLK1Freq>
 8004bf0:	61b8      	str	r0, [r7, #24]
        break;
 8004bf2:	e013      	b.n	8004c1c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004bf4:	f7fe fb52 	bl	800329c <HAL_RCC_GetPCLK2Freq>
 8004bf8:	61b8      	str	r0, [r7, #24]
        break;
 8004bfa:	e00f      	b.n	8004c1c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004bfc:	4b1d      	ldr	r3, [pc, #116]	; (8004c74 <UART_SetConfig+0x4c4>)
 8004bfe:	61bb      	str	r3, [r7, #24]
        break;
 8004c00:	e00c      	b.n	8004c1c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c02:	f7fe fa25 	bl	8003050 <HAL_RCC_GetSysClockFreq>
 8004c06:	61b8      	str	r0, [r7, #24]
        break;
 8004c08:	e008      	b.n	8004c1c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c0e:	61bb      	str	r3, [r7, #24]
        break;
 8004c10:	e004      	b.n	8004c1c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004c12:	2300      	movs	r3, #0
 8004c14:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	77bb      	strb	r3, [r7, #30]
        break;
 8004c1a:	bf00      	nop
    }

    if (pclk != 0U)
 8004c1c:	69bb      	ldr	r3, [r7, #24]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d018      	beq.n	8004c54 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	085a      	lsrs	r2, r3, #1
 8004c28:	69bb      	ldr	r3, [r7, #24]
 8004c2a:	441a      	add	r2, r3
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c34:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	2b0f      	cmp	r3, #15
 8004c3a:	d909      	bls.n	8004c50 <UART_SetConfig+0x4a0>
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c42:	d205      	bcs.n	8004c50 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	b29a      	uxth	r2, r3
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	60da      	str	r2, [r3, #12]
 8004c4e:	e001      	b.n	8004c54 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004c50:	2301      	movs	r3, #1
 8004c52:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2200      	movs	r2, #0
 8004c58:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004c60:	7fbb      	ldrb	r3, [r7, #30]
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	3720      	adds	r7, #32
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}
 8004c6a:	bf00      	nop
 8004c6c:	40007c00 	.word	0x40007c00
 8004c70:	40023800 	.word	0x40023800
 8004c74:	00f42400 	.word	0x00f42400

08004c78 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b083      	sub	sp, #12
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c84:	f003 0301 	and.w	r3, r3, #1
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d00a      	beq.n	8004ca2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	430a      	orrs	r2, r1
 8004ca0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca6:	f003 0302 	and.w	r3, r3, #2
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d00a      	beq.n	8004cc4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	430a      	orrs	r2, r1
 8004cc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc8:	f003 0304 	and.w	r3, r3, #4
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d00a      	beq.n	8004ce6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	430a      	orrs	r2, r1
 8004ce4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cea:	f003 0308 	and.w	r3, r3, #8
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d00a      	beq.n	8004d08 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	430a      	orrs	r2, r1
 8004d06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d0c:	f003 0310 	and.w	r3, r3, #16
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d00a      	beq.n	8004d2a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	689b      	ldr	r3, [r3, #8]
 8004d1a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	430a      	orrs	r2, r1
 8004d28:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d2e:	f003 0320 	and.w	r3, r3, #32
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d00a      	beq.n	8004d4c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	430a      	orrs	r2, r1
 8004d4a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d01a      	beq.n	8004d8e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	430a      	orrs	r2, r1
 8004d6c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d76:	d10a      	bne.n	8004d8e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	430a      	orrs	r2, r1
 8004d8c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d00a      	beq.n	8004db0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	430a      	orrs	r2, r1
 8004dae:	605a      	str	r2, [r3, #4]
  }
}
 8004db0:	bf00      	nop
 8004db2:	370c      	adds	r7, #12
 8004db4:	46bd      	mov	sp, r7
 8004db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dba:	4770      	bx	lr

08004dbc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b086      	sub	sp, #24
 8004dc0:	af02      	add	r7, sp, #8
 8004dc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004dcc:	f7fd f970 	bl	80020b0 <HAL_GetTick>
 8004dd0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f003 0308 	and.w	r3, r3, #8
 8004ddc:	2b08      	cmp	r3, #8
 8004dde:	d10e      	bne.n	8004dfe <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004de0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004de4:	9300      	str	r3, [sp, #0]
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2200      	movs	r2, #0
 8004dea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004dee:	6878      	ldr	r0, [r7, #4]
 8004df0:	f000 f81b 	bl	8004e2a <UART_WaitOnFlagUntilTimeout>
 8004df4:	4603      	mov	r3, r0
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d001      	beq.n	8004dfe <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004dfa:	2303      	movs	r3, #3
 8004dfc:	e011      	b.n	8004e22 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2220      	movs	r2, #32
 8004e02:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2220      	movs	r2, #32
 8004e08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2200      	movs	r2, #0
 8004e16:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004e20:	2300      	movs	r3, #0
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	3710      	adds	r7, #16
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}

08004e2a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004e2a:	b580      	push	{r7, lr}
 8004e2c:	b09c      	sub	sp, #112	; 0x70
 8004e2e:	af00      	add	r7, sp, #0
 8004e30:	60f8      	str	r0, [r7, #12]
 8004e32:	60b9      	str	r1, [r7, #8]
 8004e34:	603b      	str	r3, [r7, #0]
 8004e36:	4613      	mov	r3, r2
 8004e38:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e3a:	e0a7      	b.n	8004f8c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e42:	f000 80a3 	beq.w	8004f8c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e46:	f7fd f933 	bl	80020b0 <HAL_GetTick>
 8004e4a:	4602      	mov	r2, r0
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	1ad3      	subs	r3, r2, r3
 8004e50:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004e52:	429a      	cmp	r2, r3
 8004e54:	d302      	bcc.n	8004e5c <UART_WaitOnFlagUntilTimeout+0x32>
 8004e56:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d13f      	bne.n	8004edc <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e64:	e853 3f00 	ldrex	r3, [r3]
 8004e68:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004e6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e6c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004e70:	667b      	str	r3, [r7, #100]	; 0x64
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	461a      	mov	r2, r3
 8004e78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e7a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e7c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e7e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004e80:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004e82:	e841 2300 	strex	r3, r2, [r1]
 8004e86:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004e88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d1e6      	bne.n	8004e5c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	3308      	adds	r3, #8
 8004e94:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e98:	e853 3f00 	ldrex	r3, [r3]
 8004e9c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ea0:	f023 0301 	bic.w	r3, r3, #1
 8004ea4:	663b      	str	r3, [r7, #96]	; 0x60
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	3308      	adds	r3, #8
 8004eac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004eae:	64ba      	str	r2, [r7, #72]	; 0x48
 8004eb0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eb2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004eb4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004eb6:	e841 2300 	strex	r3, r2, [r1]
 8004eba:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004ebc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d1e5      	bne.n	8004e8e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2220      	movs	r2, #32
 8004ec6:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	2220      	movs	r2, #32
 8004ecc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8004ed8:	2303      	movs	r3, #3
 8004eda:	e068      	b.n	8004fae <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f003 0304 	and.w	r3, r3, #4
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d050      	beq.n	8004f8c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	69db      	ldr	r3, [r3, #28]
 8004ef0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ef4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ef8:	d148      	bne.n	8004f8c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004f02:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f0c:	e853 3f00 	ldrex	r3, [r3]
 8004f10:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f14:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004f18:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	461a      	mov	r2, r3
 8004f20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f22:	637b      	str	r3, [r7, #52]	; 0x34
 8004f24:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f26:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004f28:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f2a:	e841 2300 	strex	r3, r2, [r1]
 8004f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d1e6      	bne.n	8004f04 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	3308      	adds	r3, #8
 8004f3c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	e853 3f00 	ldrex	r3, [r3]
 8004f44:	613b      	str	r3, [r7, #16]
   return(result);
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	f023 0301 	bic.w	r3, r3, #1
 8004f4c:	66bb      	str	r3, [r7, #104]	; 0x68
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	3308      	adds	r3, #8
 8004f54:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004f56:	623a      	str	r2, [r7, #32]
 8004f58:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f5a:	69f9      	ldr	r1, [r7, #28]
 8004f5c:	6a3a      	ldr	r2, [r7, #32]
 8004f5e:	e841 2300 	strex	r3, r2, [r1]
 8004f62:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f64:	69bb      	ldr	r3, [r7, #24]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d1e5      	bne.n	8004f36 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	2220      	movs	r2, #32
 8004f6e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2220      	movs	r2, #32
 8004f74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	2220      	movs	r2, #32
 8004f7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	2200      	movs	r2, #0
 8004f84:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004f88:	2303      	movs	r3, #3
 8004f8a:	e010      	b.n	8004fae <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	69da      	ldr	r2, [r3, #28]
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	4013      	ands	r3, r2
 8004f96:	68ba      	ldr	r2, [r7, #8]
 8004f98:	429a      	cmp	r2, r3
 8004f9a:	bf0c      	ite	eq
 8004f9c:	2301      	moveq	r3, #1
 8004f9e:	2300      	movne	r3, #0
 8004fa0:	b2db      	uxtb	r3, r3
 8004fa2:	461a      	mov	r2, r3
 8004fa4:	79fb      	ldrb	r3, [r7, #7]
 8004fa6:	429a      	cmp	r2, r3
 8004fa8:	f43f af48 	beq.w	8004e3c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004fac:	2300      	movs	r3, #0
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3770      	adds	r7, #112	; 0x70
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}
	...

08004fb8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004fb8:	b084      	sub	sp, #16
 8004fba:	b580      	push	{r7, lr}
 8004fbc:	b084      	sub	sp, #16
 8004fbe:	af00      	add	r7, sp, #0
 8004fc0:	6078      	str	r0, [r7, #4]
 8004fc2:	f107 001c 	add.w	r0, r7, #28
 8004fc6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fcc:	2b01      	cmp	r3, #1
 8004fce:	d120      	bne.n	8005012 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fd4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	68da      	ldr	r2, [r3, #12]
 8004fe0:	4b20      	ldr	r3, [pc, #128]	; (8005064 <USB_CoreInit+0xac>)
 8004fe2:	4013      	ands	r3, r2
 8004fe4:	687a      	ldr	r2, [r7, #4]
 8004fe6:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	68db      	ldr	r3, [r3, #12]
 8004fec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004ff4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ff6:	2b01      	cmp	r3, #1
 8004ff8:	d105      	bne.n	8005006 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	68db      	ldr	r3, [r3, #12]
 8004ffe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f000 fa96 	bl	8005538 <USB_CoreReset>
 800500c:	4603      	mov	r3, r0
 800500e:	73fb      	strb	r3, [r7, #15]
 8005010:	e010      	b.n	8005034 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	68db      	ldr	r3, [r3, #12]
 8005016:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	f000 fa8a 	bl	8005538 <USB_CoreReset>
 8005024:	4603      	mov	r3, r0
 8005026:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800502c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8005034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005036:	2b01      	cmp	r3, #1
 8005038:	d10b      	bne.n	8005052 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	f043 0206 	orr.w	r2, r3, #6
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	689b      	ldr	r3, [r3, #8]
 800504a:	f043 0220 	orr.w	r2, r3, #32
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005052:	7bfb      	ldrb	r3, [r7, #15]
}
 8005054:	4618      	mov	r0, r3
 8005056:	3710      	adds	r7, #16
 8005058:	46bd      	mov	sp, r7
 800505a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800505e:	b004      	add	sp, #16
 8005060:	4770      	bx	lr
 8005062:	bf00      	nop
 8005064:	ffbdffbf 	.word	0xffbdffbf

08005068 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005068:	b480      	push	{r7}
 800506a:	b083      	sub	sp, #12
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	689b      	ldr	r3, [r3, #8]
 8005074:	f023 0201 	bic.w	r2, r3, #1
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800507c:	2300      	movs	r3, #0
}
 800507e:	4618      	mov	r0, r3
 8005080:	370c      	adds	r7, #12
 8005082:	46bd      	mov	sp, r7
 8005084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005088:	4770      	bx	lr

0800508a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800508a:	b580      	push	{r7, lr}
 800508c:	b084      	sub	sp, #16
 800508e:	af00      	add	r7, sp, #0
 8005090:	6078      	str	r0, [r7, #4]
 8005092:	460b      	mov	r3, r1
 8005094:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005096:	2300      	movs	r3, #0
 8005098:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	68db      	ldr	r3, [r3, #12]
 800509e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80050a6:	78fb      	ldrb	r3, [r7, #3]
 80050a8:	2b01      	cmp	r3, #1
 80050aa:	d115      	bne.n	80050d8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	68db      	ldr	r3, [r3, #12]
 80050b0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80050b8:	2001      	movs	r0, #1
 80050ba:	f7fd f805 	bl	80020c8 <HAL_Delay>
      ms++;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	3301      	adds	r3, #1
 80050c2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80050c4:	6878      	ldr	r0, [r7, #4]
 80050c6:	f000 fa29 	bl	800551c <USB_GetMode>
 80050ca:	4603      	mov	r3, r0
 80050cc:	2b01      	cmp	r3, #1
 80050ce:	d01e      	beq.n	800510e <USB_SetCurrentMode+0x84>
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	2b31      	cmp	r3, #49	; 0x31
 80050d4:	d9f0      	bls.n	80050b8 <USB_SetCurrentMode+0x2e>
 80050d6:	e01a      	b.n	800510e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80050d8:	78fb      	ldrb	r3, [r7, #3]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d115      	bne.n	800510a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	68db      	ldr	r3, [r3, #12]
 80050e2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80050ea:	2001      	movs	r0, #1
 80050ec:	f7fc ffec 	bl	80020c8 <HAL_Delay>
      ms++;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	3301      	adds	r3, #1
 80050f4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f000 fa10 	bl	800551c <USB_GetMode>
 80050fc:	4603      	mov	r3, r0
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d005      	beq.n	800510e <USB_SetCurrentMode+0x84>
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	2b31      	cmp	r3, #49	; 0x31
 8005106:	d9f0      	bls.n	80050ea <USB_SetCurrentMode+0x60>
 8005108:	e001      	b.n	800510e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800510a:	2301      	movs	r3, #1
 800510c:	e005      	b.n	800511a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2b32      	cmp	r3, #50	; 0x32
 8005112:	d101      	bne.n	8005118 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005114:	2301      	movs	r3, #1
 8005116:	e000      	b.n	800511a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005118:	2300      	movs	r3, #0
}
 800511a:	4618      	mov	r0, r3
 800511c:	3710      	adds	r7, #16
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}
	...

08005124 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005124:	b084      	sub	sp, #16
 8005126:	b580      	push	{r7, lr}
 8005128:	b086      	sub	sp, #24
 800512a:	af00      	add	r7, sp, #0
 800512c:	6078      	str	r0, [r7, #4]
 800512e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005132:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005136:	2300      	movs	r3, #0
 8005138:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800513e:	2300      	movs	r3, #0
 8005140:	613b      	str	r3, [r7, #16]
 8005142:	e009      	b.n	8005158 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005144:	687a      	ldr	r2, [r7, #4]
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	3340      	adds	r3, #64	; 0x40
 800514a:	009b      	lsls	r3, r3, #2
 800514c:	4413      	add	r3, r2
 800514e:	2200      	movs	r2, #0
 8005150:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	3301      	adds	r3, #1
 8005156:	613b      	str	r3, [r7, #16]
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	2b0e      	cmp	r3, #14
 800515c:	d9f2      	bls.n	8005144 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800515e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005160:	2b00      	cmp	r3, #0
 8005162:	d11c      	bne.n	800519e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	68fa      	ldr	r2, [r7, #12]
 800516e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005172:	f043 0302 	orr.w	r3, r3, #2
 8005176:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800517c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	601a      	str	r2, [r3, #0]
 800519c:	e005      	b.n	80051aa <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051a2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80051b0:	461a      	mov	r2, r3
 80051b2:	2300      	movs	r3, #0
 80051b4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051bc:	4619      	mov	r1, r3
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051c4:	461a      	mov	r2, r3
 80051c6:	680b      	ldr	r3, [r1, #0]
 80051c8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80051ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051cc:	2b01      	cmp	r3, #1
 80051ce:	d10c      	bne.n	80051ea <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80051d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d104      	bne.n	80051e0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80051d6:	2100      	movs	r1, #0
 80051d8:	6878      	ldr	r0, [r7, #4]
 80051da:	f000 f965 	bl	80054a8 <USB_SetDevSpeed>
 80051de:	e008      	b.n	80051f2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80051e0:	2101      	movs	r1, #1
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	f000 f960 	bl	80054a8 <USB_SetDevSpeed>
 80051e8:	e003      	b.n	80051f2 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80051ea:	2103      	movs	r1, #3
 80051ec:	6878      	ldr	r0, [r7, #4]
 80051ee:	f000 f95b 	bl	80054a8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80051f2:	2110      	movs	r1, #16
 80051f4:	6878      	ldr	r0, [r7, #4]
 80051f6:	f000 f8f3 	bl	80053e0 <USB_FlushTxFifo>
 80051fa:	4603      	mov	r3, r0
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d001      	beq.n	8005204 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005200:	2301      	movs	r3, #1
 8005202:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005204:	6878      	ldr	r0, [r7, #4]
 8005206:	f000 f91f 	bl	8005448 <USB_FlushRxFifo>
 800520a:	4603      	mov	r3, r0
 800520c:	2b00      	cmp	r3, #0
 800520e:	d001      	beq.n	8005214 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005210:	2301      	movs	r3, #1
 8005212:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800521a:	461a      	mov	r2, r3
 800521c:	2300      	movs	r3, #0
 800521e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005226:	461a      	mov	r2, r3
 8005228:	2300      	movs	r3, #0
 800522a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005232:	461a      	mov	r2, r3
 8005234:	2300      	movs	r3, #0
 8005236:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005238:	2300      	movs	r3, #0
 800523a:	613b      	str	r3, [r7, #16]
 800523c:	e043      	b.n	80052c6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	015a      	lsls	r2, r3, #5
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	4413      	add	r3, r2
 8005246:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005250:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005254:	d118      	bne.n	8005288 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d10a      	bne.n	8005272 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	015a      	lsls	r2, r3, #5
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	4413      	add	r3, r2
 8005264:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005268:	461a      	mov	r2, r3
 800526a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800526e:	6013      	str	r3, [r2, #0]
 8005270:	e013      	b.n	800529a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	015a      	lsls	r2, r3, #5
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	4413      	add	r3, r2
 800527a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800527e:	461a      	mov	r2, r3
 8005280:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005284:	6013      	str	r3, [r2, #0]
 8005286:	e008      	b.n	800529a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	015a      	lsls	r2, r3, #5
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	4413      	add	r3, r2
 8005290:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005294:	461a      	mov	r2, r3
 8005296:	2300      	movs	r3, #0
 8005298:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	015a      	lsls	r2, r3, #5
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	4413      	add	r3, r2
 80052a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052a6:	461a      	mov	r2, r3
 80052a8:	2300      	movs	r3, #0
 80052aa:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	015a      	lsls	r2, r3, #5
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	4413      	add	r3, r2
 80052b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052b8:	461a      	mov	r2, r3
 80052ba:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80052be:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	3301      	adds	r3, #1
 80052c4:	613b      	str	r3, [r7, #16]
 80052c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c8:	693a      	ldr	r2, [r7, #16]
 80052ca:	429a      	cmp	r2, r3
 80052cc:	d3b7      	bcc.n	800523e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80052ce:	2300      	movs	r3, #0
 80052d0:	613b      	str	r3, [r7, #16]
 80052d2:	e043      	b.n	800535c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	015a      	lsls	r2, r3, #5
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	4413      	add	r3, r2
 80052dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80052e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80052ea:	d118      	bne.n	800531e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80052ec:	693b      	ldr	r3, [r7, #16]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d10a      	bne.n	8005308 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	015a      	lsls	r2, r3, #5
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	4413      	add	r3, r2
 80052fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052fe:	461a      	mov	r2, r3
 8005300:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005304:	6013      	str	r3, [r2, #0]
 8005306:	e013      	b.n	8005330 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005308:	693b      	ldr	r3, [r7, #16]
 800530a:	015a      	lsls	r2, r3, #5
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	4413      	add	r3, r2
 8005310:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005314:	461a      	mov	r2, r3
 8005316:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800531a:	6013      	str	r3, [r2, #0]
 800531c:	e008      	b.n	8005330 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800531e:	693b      	ldr	r3, [r7, #16]
 8005320:	015a      	lsls	r2, r3, #5
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	4413      	add	r3, r2
 8005326:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800532a:	461a      	mov	r2, r3
 800532c:	2300      	movs	r3, #0
 800532e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	015a      	lsls	r2, r3, #5
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	4413      	add	r3, r2
 8005338:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800533c:	461a      	mov	r2, r3
 800533e:	2300      	movs	r3, #0
 8005340:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	015a      	lsls	r2, r3, #5
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	4413      	add	r3, r2
 800534a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800534e:	461a      	mov	r2, r3
 8005350:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005354:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	3301      	adds	r3, #1
 800535a:	613b      	str	r3, [r7, #16]
 800535c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800535e:	693a      	ldr	r2, [r7, #16]
 8005360:	429a      	cmp	r2, r3
 8005362:	d3b7      	bcc.n	80052d4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800536a:	691b      	ldr	r3, [r3, #16]
 800536c:	68fa      	ldr	r2, [r7, #12]
 800536e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005372:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005376:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2200      	movs	r2, #0
 800537c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005384:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005388:	2b00      	cmp	r3, #0
 800538a:	d105      	bne.n	8005398 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	699b      	ldr	r3, [r3, #24]
 8005390:	f043 0210 	orr.w	r2, r3, #16
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	699a      	ldr	r2, [r3, #24]
 800539c:	4b0e      	ldr	r3, [pc, #56]	; (80053d8 <USB_DevInit+0x2b4>)
 800539e:	4313      	orrs	r3, r2
 80053a0:	687a      	ldr	r2, [r7, #4]
 80053a2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80053a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d005      	beq.n	80053b6 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	699b      	ldr	r3, [r3, #24]
 80053ae:	f043 0208 	orr.w	r2, r3, #8
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80053b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053b8:	2b01      	cmp	r3, #1
 80053ba:	d105      	bne.n	80053c8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	699a      	ldr	r2, [r3, #24]
 80053c0:	4b06      	ldr	r3, [pc, #24]	; (80053dc <USB_DevInit+0x2b8>)
 80053c2:	4313      	orrs	r3, r2
 80053c4:	687a      	ldr	r2, [r7, #4]
 80053c6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80053c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	3718      	adds	r7, #24
 80053ce:	46bd      	mov	sp, r7
 80053d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80053d4:	b004      	add	sp, #16
 80053d6:	4770      	bx	lr
 80053d8:	803c3800 	.word	0x803c3800
 80053dc:	40000004 	.word	0x40000004

080053e0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80053e0:	b480      	push	{r7}
 80053e2:	b085      	sub	sp, #20
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
 80053e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80053ea:	2300      	movs	r3, #0
 80053ec:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	3301      	adds	r3, #1
 80053f2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	4a13      	ldr	r2, [pc, #76]	; (8005444 <USB_FlushTxFifo+0x64>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d901      	bls.n	8005400 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80053fc:	2303      	movs	r3, #3
 80053fe:	e01b      	b.n	8005438 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	691b      	ldr	r3, [r3, #16]
 8005404:	2b00      	cmp	r3, #0
 8005406:	daf2      	bge.n	80053ee <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005408:	2300      	movs	r3, #0
 800540a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	019b      	lsls	r3, r3, #6
 8005410:	f043 0220 	orr.w	r2, r3, #32
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	3301      	adds	r3, #1
 800541c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	4a08      	ldr	r2, [pc, #32]	; (8005444 <USB_FlushTxFifo+0x64>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d901      	bls.n	800542a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005426:	2303      	movs	r3, #3
 8005428:	e006      	b.n	8005438 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	691b      	ldr	r3, [r3, #16]
 800542e:	f003 0320 	and.w	r3, r3, #32
 8005432:	2b20      	cmp	r3, #32
 8005434:	d0f0      	beq.n	8005418 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005436:	2300      	movs	r3, #0
}
 8005438:	4618      	mov	r0, r3
 800543a:	3714      	adds	r7, #20
 800543c:	46bd      	mov	sp, r7
 800543e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005442:	4770      	bx	lr
 8005444:	00030d40 	.word	0x00030d40

08005448 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005448:	b480      	push	{r7}
 800544a:	b085      	sub	sp, #20
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005450:	2300      	movs	r3, #0
 8005452:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	3301      	adds	r3, #1
 8005458:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	4a11      	ldr	r2, [pc, #68]	; (80054a4 <USB_FlushRxFifo+0x5c>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d901      	bls.n	8005466 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005462:	2303      	movs	r3, #3
 8005464:	e018      	b.n	8005498 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	691b      	ldr	r3, [r3, #16]
 800546a:	2b00      	cmp	r3, #0
 800546c:	daf2      	bge.n	8005454 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800546e:	2300      	movs	r3, #0
 8005470:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2210      	movs	r2, #16
 8005476:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	3301      	adds	r3, #1
 800547c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	4a08      	ldr	r2, [pc, #32]	; (80054a4 <USB_FlushRxFifo+0x5c>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d901      	bls.n	800548a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005486:	2303      	movs	r3, #3
 8005488:	e006      	b.n	8005498 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	691b      	ldr	r3, [r3, #16]
 800548e:	f003 0310 	and.w	r3, r3, #16
 8005492:	2b10      	cmp	r3, #16
 8005494:	d0f0      	beq.n	8005478 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005496:	2300      	movs	r3, #0
}
 8005498:	4618      	mov	r0, r3
 800549a:	3714      	adds	r7, #20
 800549c:	46bd      	mov	sp, r7
 800549e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a2:	4770      	bx	lr
 80054a4:	00030d40 	.word	0x00030d40

080054a8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80054a8:	b480      	push	{r7}
 80054aa:	b085      	sub	sp, #20
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
 80054b0:	460b      	mov	r3, r1
 80054b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054be:	681a      	ldr	r2, [r3, #0]
 80054c0:	78fb      	ldrb	r3, [r7, #3]
 80054c2:	68f9      	ldr	r1, [r7, #12]
 80054c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80054c8:	4313      	orrs	r3, r2
 80054ca:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80054cc:	2300      	movs	r3, #0
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	3714      	adds	r7, #20
 80054d2:	46bd      	mov	sp, r7
 80054d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d8:	4770      	bx	lr

080054da <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80054da:	b480      	push	{r7}
 80054dc:	b085      	sub	sp, #20
 80054de:	af00      	add	r7, sp, #0
 80054e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	68fa      	ldr	r2, [r7, #12]
 80054f0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80054f4:	f023 0303 	bic.w	r3, r3, #3
 80054f8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	68fa      	ldr	r2, [r7, #12]
 8005504:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005508:	f043 0302 	orr.w	r3, r3, #2
 800550c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800550e:	2300      	movs	r3, #0
}
 8005510:	4618      	mov	r0, r3
 8005512:	3714      	adds	r7, #20
 8005514:	46bd      	mov	sp, r7
 8005516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551a:	4770      	bx	lr

0800551c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800551c:	b480      	push	{r7}
 800551e:	b083      	sub	sp, #12
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	695b      	ldr	r3, [r3, #20]
 8005528:	f003 0301 	and.w	r3, r3, #1
}
 800552c:	4618      	mov	r0, r3
 800552e:	370c      	adds	r7, #12
 8005530:	46bd      	mov	sp, r7
 8005532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005536:	4770      	bx	lr

08005538 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005538:	b480      	push	{r7}
 800553a:	b085      	sub	sp, #20
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005540:	2300      	movs	r3, #0
 8005542:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	3301      	adds	r3, #1
 8005548:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	4a13      	ldr	r2, [pc, #76]	; (800559c <USB_CoreReset+0x64>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d901      	bls.n	8005556 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005552:	2303      	movs	r3, #3
 8005554:	e01b      	b.n	800558e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	691b      	ldr	r3, [r3, #16]
 800555a:	2b00      	cmp	r3, #0
 800555c:	daf2      	bge.n	8005544 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800555e:	2300      	movs	r3, #0
 8005560:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	691b      	ldr	r3, [r3, #16]
 8005566:	f043 0201 	orr.w	r2, r3, #1
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	3301      	adds	r3, #1
 8005572:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	4a09      	ldr	r2, [pc, #36]	; (800559c <USB_CoreReset+0x64>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d901      	bls.n	8005580 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800557c:	2303      	movs	r3, #3
 800557e:	e006      	b.n	800558e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	691b      	ldr	r3, [r3, #16]
 8005584:	f003 0301 	and.w	r3, r3, #1
 8005588:	2b01      	cmp	r3, #1
 800558a:	d0f0      	beq.n	800556e <USB_CoreReset+0x36>

  return HAL_OK;
 800558c:	2300      	movs	r3, #0
}
 800558e:	4618      	mov	r0, r3
 8005590:	3714      	adds	r7, #20
 8005592:	46bd      	mov	sp, r7
 8005594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005598:	4770      	bx	lr
 800559a:	bf00      	nop
 800559c:	00030d40 	.word	0x00030d40

080055a0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80055a4:	4904      	ldr	r1, [pc, #16]	; (80055b8 <MX_FATFS_Init+0x18>)
 80055a6:	4805      	ldr	r0, [pc, #20]	; (80055bc <MX_FATFS_Init+0x1c>)
 80055a8:	f003 f9c8 	bl	800893c <FATFS_LinkDriver>
 80055ac:	4603      	mov	r3, r0
 80055ae:	461a      	mov	r2, r3
 80055b0:	4b03      	ldr	r3, [pc, #12]	; (80055c0 <MX_FATFS_Init+0x20>)
 80055b2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80055b4:	bf00      	nop
 80055b6:	bd80      	pop	{r7, pc}
 80055b8:	20002778 	.word	0x20002778
 80055bc:	20000010 	.word	0x20000010
 80055c0:	20002774 	.word	0x20002774

080055c4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80055c4:	b480      	push	{r7}
 80055c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80055c8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	46bd      	mov	sp, r7
 80055ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d2:	4770      	bx	lr

080055d4 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b082      	sub	sp, #8
 80055d8:	af00      	add	r7, sp, #0
 80055da:	4603      	mov	r3, r0
 80055dc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    //Stat = STA_NOINIT;
    //return Stat;
	SD_disk_initialize (pdrv);
 80055de:	79fb      	ldrb	r3, [r7, #7]
 80055e0:	4618      	mov	r0, r3
 80055e2:	f7fb fca5 	bl	8000f30 <SD_disk_initialize>
  /* USER CODE END INIT */
}
 80055e6:	bf00      	nop
 80055e8:	4618      	mov	r0, r3
 80055ea:	3708      	adds	r7, #8
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bd80      	pop	{r7, pc}

080055f0 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b082      	sub	sp, #8
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	4603      	mov	r3, r0
 80055f8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    //Stat = STA_NOINIT;
    //return Stat;
	SD_disk_status (pdrv);
 80055fa:	79fb      	ldrb	r3, [r7, #7]
 80055fc:	4618      	mov	r0, r3
 80055fe:	f7fb fd7d 	bl	80010fc <SD_disk_status>
  /* USER CODE END STATUS */
}
 8005602:	bf00      	nop
 8005604:	4618      	mov	r0, r3
 8005606:	3708      	adds	r7, #8
 8005608:	46bd      	mov	sp, r7
 800560a:	bd80      	pop	{r7, pc}

0800560c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b084      	sub	sp, #16
 8005610:	af00      	add	r7, sp, #0
 8005612:	60b9      	str	r1, [r7, #8]
 8005614:	607a      	str	r2, [r7, #4]
 8005616:	603b      	str	r3, [r7, #0]
 8005618:	4603      	mov	r3, r0
 800561a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    //return RES_OK;
	SD_disk_read (pdrv, buff, sector, count);
 800561c:	7bf8      	ldrb	r0, [r7, #15]
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	687a      	ldr	r2, [r7, #4]
 8005622:	68b9      	ldr	r1, [r7, #8]
 8005624:	f7fb fd80 	bl	8001128 <SD_disk_read>
  /* USER CODE END READ */
}
 8005628:	bf00      	nop
 800562a:	4618      	mov	r0, r3
 800562c:	3710      	adds	r7, #16
 800562e:	46bd      	mov	sp, r7
 8005630:	bd80      	pop	{r7, pc}

08005632 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8005632:	b580      	push	{r7, lr}
 8005634:	b084      	sub	sp, #16
 8005636:	af00      	add	r7, sp, #0
 8005638:	60b9      	str	r1, [r7, #8]
 800563a:	607a      	str	r2, [r7, #4]
 800563c:	603b      	str	r3, [r7, #0]
 800563e:	4603      	mov	r3, r0
 8005640:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    //return RES_OK;
	SD_disk_write (pdrv, buff, sector, count);
 8005642:	7bf8      	ldrb	r0, [r7, #15]
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	687a      	ldr	r2, [r7, #4]
 8005648:	68b9      	ldr	r1, [r7, #8]
 800564a:	f7fb fdd7 	bl	80011fc <SD_disk_write>
  /* USER CODE END WRITE */
}
 800564e:	bf00      	nop
 8005650:	4618      	mov	r0, r3
 8005652:	3710      	adds	r7, #16
 8005654:	46bd      	mov	sp, r7
 8005656:	bd80      	pop	{r7, pc}

08005658 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b082      	sub	sp, #8
 800565c:	af00      	add	r7, sp, #0
 800565e:	4603      	mov	r3, r0
 8005660:	603a      	str	r2, [r7, #0]
 8005662:	71fb      	strb	r3, [r7, #7]
 8005664:	460b      	mov	r3, r1
 8005666:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    //DRESULT res = RES_ERROR;
    //return res;
	SD_disk_ioctl (pdrv, cmd, buff);
 8005668:	79fb      	ldrb	r3, [r7, #7]
 800566a:	79b9      	ldrb	r1, [r7, #6]
 800566c:	683a      	ldr	r2, [r7, #0]
 800566e:	4618      	mov	r0, r3
 8005670:	f7fb fe48 	bl	8001304 <SD_disk_ioctl>
  /* USER CODE END IOCTL */
}
 8005674:	bf00      	nop
 8005676:	4618      	mov	r0, r3
 8005678:	3708      	adds	r7, #8
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}
	...

08005680 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b084      	sub	sp, #16
 8005684:	af00      	add	r7, sp, #0
 8005686:	4603      	mov	r3, r0
 8005688:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800568a:	79fb      	ldrb	r3, [r7, #7]
 800568c:	4a08      	ldr	r2, [pc, #32]	; (80056b0 <disk_status+0x30>)
 800568e:	009b      	lsls	r3, r3, #2
 8005690:	4413      	add	r3, r2
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	79fa      	ldrb	r2, [r7, #7]
 8005698:	4905      	ldr	r1, [pc, #20]	; (80056b0 <disk_status+0x30>)
 800569a:	440a      	add	r2, r1
 800569c:	7a12      	ldrb	r2, [r2, #8]
 800569e:	4610      	mov	r0, r2
 80056a0:	4798      	blx	r3
 80056a2:	4603      	mov	r3, r0
 80056a4:	73fb      	strb	r3, [r7, #15]
  return stat;
 80056a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80056a8:	4618      	mov	r0, r3
 80056aa:	3710      	adds	r7, #16
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}
 80056b0:	200029a4 	.word	0x200029a4

080056b4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b084      	sub	sp, #16
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	4603      	mov	r3, r0
 80056bc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80056be:	2300      	movs	r3, #0
 80056c0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80056c2:	79fb      	ldrb	r3, [r7, #7]
 80056c4:	4a0d      	ldr	r2, [pc, #52]	; (80056fc <disk_initialize+0x48>)
 80056c6:	5cd3      	ldrb	r3, [r2, r3]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d111      	bne.n	80056f0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80056cc:	79fb      	ldrb	r3, [r7, #7]
 80056ce:	4a0b      	ldr	r2, [pc, #44]	; (80056fc <disk_initialize+0x48>)
 80056d0:	2101      	movs	r1, #1
 80056d2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80056d4:	79fb      	ldrb	r3, [r7, #7]
 80056d6:	4a09      	ldr	r2, [pc, #36]	; (80056fc <disk_initialize+0x48>)
 80056d8:	009b      	lsls	r3, r3, #2
 80056da:	4413      	add	r3, r2
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	79fa      	ldrb	r2, [r7, #7]
 80056e2:	4906      	ldr	r1, [pc, #24]	; (80056fc <disk_initialize+0x48>)
 80056e4:	440a      	add	r2, r1
 80056e6:	7a12      	ldrb	r2, [r2, #8]
 80056e8:	4610      	mov	r0, r2
 80056ea:	4798      	blx	r3
 80056ec:	4603      	mov	r3, r0
 80056ee:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80056f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	3710      	adds	r7, #16
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bd80      	pop	{r7, pc}
 80056fa:	bf00      	nop
 80056fc:	200029a4 	.word	0x200029a4

08005700 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005700:	b590      	push	{r4, r7, lr}
 8005702:	b087      	sub	sp, #28
 8005704:	af00      	add	r7, sp, #0
 8005706:	60b9      	str	r1, [r7, #8]
 8005708:	607a      	str	r2, [r7, #4]
 800570a:	603b      	str	r3, [r7, #0]
 800570c:	4603      	mov	r3, r0
 800570e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005710:	7bfb      	ldrb	r3, [r7, #15]
 8005712:	4a0a      	ldr	r2, [pc, #40]	; (800573c <disk_read+0x3c>)
 8005714:	009b      	lsls	r3, r3, #2
 8005716:	4413      	add	r3, r2
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	689c      	ldr	r4, [r3, #8]
 800571c:	7bfb      	ldrb	r3, [r7, #15]
 800571e:	4a07      	ldr	r2, [pc, #28]	; (800573c <disk_read+0x3c>)
 8005720:	4413      	add	r3, r2
 8005722:	7a18      	ldrb	r0, [r3, #8]
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	687a      	ldr	r2, [r7, #4]
 8005728:	68b9      	ldr	r1, [r7, #8]
 800572a:	47a0      	blx	r4
 800572c:	4603      	mov	r3, r0
 800572e:	75fb      	strb	r3, [r7, #23]
  return res;
 8005730:	7dfb      	ldrb	r3, [r7, #23]
}
 8005732:	4618      	mov	r0, r3
 8005734:	371c      	adds	r7, #28
 8005736:	46bd      	mov	sp, r7
 8005738:	bd90      	pop	{r4, r7, pc}
 800573a:	bf00      	nop
 800573c:	200029a4 	.word	0x200029a4

08005740 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005740:	b590      	push	{r4, r7, lr}
 8005742:	b087      	sub	sp, #28
 8005744:	af00      	add	r7, sp, #0
 8005746:	60b9      	str	r1, [r7, #8]
 8005748:	607a      	str	r2, [r7, #4]
 800574a:	603b      	str	r3, [r7, #0]
 800574c:	4603      	mov	r3, r0
 800574e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005750:	7bfb      	ldrb	r3, [r7, #15]
 8005752:	4a0a      	ldr	r2, [pc, #40]	; (800577c <disk_write+0x3c>)
 8005754:	009b      	lsls	r3, r3, #2
 8005756:	4413      	add	r3, r2
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	68dc      	ldr	r4, [r3, #12]
 800575c:	7bfb      	ldrb	r3, [r7, #15]
 800575e:	4a07      	ldr	r2, [pc, #28]	; (800577c <disk_write+0x3c>)
 8005760:	4413      	add	r3, r2
 8005762:	7a18      	ldrb	r0, [r3, #8]
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	687a      	ldr	r2, [r7, #4]
 8005768:	68b9      	ldr	r1, [r7, #8]
 800576a:	47a0      	blx	r4
 800576c:	4603      	mov	r3, r0
 800576e:	75fb      	strb	r3, [r7, #23]
  return res;
 8005770:	7dfb      	ldrb	r3, [r7, #23]
}
 8005772:	4618      	mov	r0, r3
 8005774:	371c      	adds	r7, #28
 8005776:	46bd      	mov	sp, r7
 8005778:	bd90      	pop	{r4, r7, pc}
 800577a:	bf00      	nop
 800577c:	200029a4 	.word	0x200029a4

08005780 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b084      	sub	sp, #16
 8005784:	af00      	add	r7, sp, #0
 8005786:	4603      	mov	r3, r0
 8005788:	603a      	str	r2, [r7, #0]
 800578a:	71fb      	strb	r3, [r7, #7]
 800578c:	460b      	mov	r3, r1
 800578e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8005790:	79fb      	ldrb	r3, [r7, #7]
 8005792:	4a09      	ldr	r2, [pc, #36]	; (80057b8 <disk_ioctl+0x38>)
 8005794:	009b      	lsls	r3, r3, #2
 8005796:	4413      	add	r3, r2
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	691b      	ldr	r3, [r3, #16]
 800579c:	79fa      	ldrb	r2, [r7, #7]
 800579e:	4906      	ldr	r1, [pc, #24]	; (80057b8 <disk_ioctl+0x38>)
 80057a0:	440a      	add	r2, r1
 80057a2:	7a10      	ldrb	r0, [r2, #8]
 80057a4:	79b9      	ldrb	r1, [r7, #6]
 80057a6:	683a      	ldr	r2, [r7, #0]
 80057a8:	4798      	blx	r3
 80057aa:	4603      	mov	r3, r0
 80057ac:	73fb      	strb	r3, [r7, #15]
  return res;
 80057ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	3710      	adds	r7, #16
 80057b4:	46bd      	mov	sp, r7
 80057b6:	bd80      	pop	{r7, pc}
 80057b8:	200029a4 	.word	0x200029a4

080057bc <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80057bc:	b480      	push	{r7}
 80057be:	b085      	sub	sp, #20
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	3301      	adds	r3, #1
 80057c8:	781b      	ldrb	r3, [r3, #0]
 80057ca:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80057cc:	89fb      	ldrh	r3, [r7, #14]
 80057ce:	021b      	lsls	r3, r3, #8
 80057d0:	b21a      	sxth	r2, r3
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	781b      	ldrb	r3, [r3, #0]
 80057d6:	b21b      	sxth	r3, r3
 80057d8:	4313      	orrs	r3, r2
 80057da:	b21b      	sxth	r3, r3
 80057dc:	81fb      	strh	r3, [r7, #14]
	return rv;
 80057de:	89fb      	ldrh	r3, [r7, #14]
}
 80057e0:	4618      	mov	r0, r3
 80057e2:	3714      	adds	r7, #20
 80057e4:	46bd      	mov	sp, r7
 80057e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ea:	4770      	bx	lr

080057ec <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80057ec:	b480      	push	{r7}
 80057ee:	b085      	sub	sp, #20
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	3303      	adds	r3, #3
 80057f8:	781b      	ldrb	r3, [r3, #0]
 80057fa:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	021b      	lsls	r3, r3, #8
 8005800:	687a      	ldr	r2, [r7, #4]
 8005802:	3202      	adds	r2, #2
 8005804:	7812      	ldrb	r2, [r2, #0]
 8005806:	4313      	orrs	r3, r2
 8005808:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	021b      	lsls	r3, r3, #8
 800580e:	687a      	ldr	r2, [r7, #4]
 8005810:	3201      	adds	r2, #1
 8005812:	7812      	ldrb	r2, [r2, #0]
 8005814:	4313      	orrs	r3, r2
 8005816:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	021b      	lsls	r3, r3, #8
 800581c:	687a      	ldr	r2, [r7, #4]
 800581e:	7812      	ldrb	r2, [r2, #0]
 8005820:	4313      	orrs	r3, r2
 8005822:	60fb      	str	r3, [r7, #12]
	return rv;
 8005824:	68fb      	ldr	r3, [r7, #12]
}
 8005826:	4618      	mov	r0, r3
 8005828:	3714      	adds	r7, #20
 800582a:	46bd      	mov	sp, r7
 800582c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005830:	4770      	bx	lr

08005832 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8005832:	b480      	push	{r7}
 8005834:	b083      	sub	sp, #12
 8005836:	af00      	add	r7, sp, #0
 8005838:	6078      	str	r0, [r7, #4]
 800583a:	460b      	mov	r3, r1
 800583c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	1c5a      	adds	r2, r3, #1
 8005842:	607a      	str	r2, [r7, #4]
 8005844:	887a      	ldrh	r2, [r7, #2]
 8005846:	b2d2      	uxtb	r2, r2
 8005848:	701a      	strb	r2, [r3, #0]
 800584a:	887b      	ldrh	r3, [r7, #2]
 800584c:	0a1b      	lsrs	r3, r3, #8
 800584e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	1c5a      	adds	r2, r3, #1
 8005854:	607a      	str	r2, [r7, #4]
 8005856:	887a      	ldrh	r2, [r7, #2]
 8005858:	b2d2      	uxtb	r2, r2
 800585a:	701a      	strb	r2, [r3, #0]
}
 800585c:	bf00      	nop
 800585e:	370c      	adds	r7, #12
 8005860:	46bd      	mov	sp, r7
 8005862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005866:	4770      	bx	lr

08005868 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8005868:	b480      	push	{r7}
 800586a:	b083      	sub	sp, #12
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
 8005870:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	1c5a      	adds	r2, r3, #1
 8005876:	607a      	str	r2, [r7, #4]
 8005878:	683a      	ldr	r2, [r7, #0]
 800587a:	b2d2      	uxtb	r2, r2
 800587c:	701a      	strb	r2, [r3, #0]
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	0a1b      	lsrs	r3, r3, #8
 8005882:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	1c5a      	adds	r2, r3, #1
 8005888:	607a      	str	r2, [r7, #4]
 800588a:	683a      	ldr	r2, [r7, #0]
 800588c:	b2d2      	uxtb	r2, r2
 800588e:	701a      	strb	r2, [r3, #0]
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	0a1b      	lsrs	r3, r3, #8
 8005894:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	1c5a      	adds	r2, r3, #1
 800589a:	607a      	str	r2, [r7, #4]
 800589c:	683a      	ldr	r2, [r7, #0]
 800589e:	b2d2      	uxtb	r2, r2
 80058a0:	701a      	strb	r2, [r3, #0]
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	0a1b      	lsrs	r3, r3, #8
 80058a6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	1c5a      	adds	r2, r3, #1
 80058ac:	607a      	str	r2, [r7, #4]
 80058ae:	683a      	ldr	r2, [r7, #0]
 80058b0:	b2d2      	uxtb	r2, r2
 80058b2:	701a      	strb	r2, [r3, #0]
}
 80058b4:	bf00      	nop
 80058b6:	370c      	adds	r7, #12
 80058b8:	46bd      	mov	sp, r7
 80058ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058be:	4770      	bx	lr

080058c0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80058c0:	b480      	push	{r7}
 80058c2:	b087      	sub	sp, #28
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	60f8      	str	r0, [r7, #12]
 80058c8:	60b9      	str	r1, [r7, #8]
 80058ca:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d00d      	beq.n	80058f6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80058da:	693a      	ldr	r2, [r7, #16]
 80058dc:	1c53      	adds	r3, r2, #1
 80058de:	613b      	str	r3, [r7, #16]
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	1c59      	adds	r1, r3, #1
 80058e4:	6179      	str	r1, [r7, #20]
 80058e6:	7812      	ldrb	r2, [r2, #0]
 80058e8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	3b01      	subs	r3, #1
 80058ee:	607b      	str	r3, [r7, #4]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d1f1      	bne.n	80058da <mem_cpy+0x1a>
	}
}
 80058f6:	bf00      	nop
 80058f8:	371c      	adds	r7, #28
 80058fa:	46bd      	mov	sp, r7
 80058fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005900:	4770      	bx	lr

08005902 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8005902:	b480      	push	{r7}
 8005904:	b087      	sub	sp, #28
 8005906:	af00      	add	r7, sp, #0
 8005908:	60f8      	str	r0, [r7, #12]
 800590a:	60b9      	str	r1, [r7, #8]
 800590c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8005912:	697b      	ldr	r3, [r7, #20]
 8005914:	1c5a      	adds	r2, r3, #1
 8005916:	617a      	str	r2, [r7, #20]
 8005918:	68ba      	ldr	r2, [r7, #8]
 800591a:	b2d2      	uxtb	r2, r2
 800591c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	3b01      	subs	r3, #1
 8005922:	607b      	str	r3, [r7, #4]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d1f3      	bne.n	8005912 <mem_set+0x10>
}
 800592a:	bf00      	nop
 800592c:	bf00      	nop
 800592e:	371c      	adds	r7, #28
 8005930:	46bd      	mov	sp, r7
 8005932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005936:	4770      	bx	lr

08005938 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8005938:	b480      	push	{r7}
 800593a:	b089      	sub	sp, #36	; 0x24
 800593c:	af00      	add	r7, sp, #0
 800593e:	60f8      	str	r0, [r7, #12]
 8005940:	60b9      	str	r1, [r7, #8]
 8005942:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	61fb      	str	r3, [r7, #28]
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800594c:	2300      	movs	r3, #0
 800594e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8005950:	69fb      	ldr	r3, [r7, #28]
 8005952:	1c5a      	adds	r2, r3, #1
 8005954:	61fa      	str	r2, [r7, #28]
 8005956:	781b      	ldrb	r3, [r3, #0]
 8005958:	4619      	mov	r1, r3
 800595a:	69bb      	ldr	r3, [r7, #24]
 800595c:	1c5a      	adds	r2, r3, #1
 800595e:	61ba      	str	r2, [r7, #24]
 8005960:	781b      	ldrb	r3, [r3, #0]
 8005962:	1acb      	subs	r3, r1, r3
 8005964:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	3b01      	subs	r3, #1
 800596a:	607b      	str	r3, [r7, #4]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d002      	beq.n	8005978 <mem_cmp+0x40>
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d0eb      	beq.n	8005950 <mem_cmp+0x18>

	return r;
 8005978:	697b      	ldr	r3, [r7, #20]
}
 800597a:	4618      	mov	r0, r3
 800597c:	3724      	adds	r7, #36	; 0x24
 800597e:	46bd      	mov	sp, r7
 8005980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005984:	4770      	bx	lr

08005986 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8005986:	b480      	push	{r7}
 8005988:	b083      	sub	sp, #12
 800598a:	af00      	add	r7, sp, #0
 800598c:	6078      	str	r0, [r7, #4]
 800598e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8005990:	e002      	b.n	8005998 <chk_chr+0x12>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	3301      	adds	r3, #1
 8005996:	607b      	str	r3, [r7, #4]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	781b      	ldrb	r3, [r3, #0]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d005      	beq.n	80059ac <chk_chr+0x26>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	781b      	ldrb	r3, [r3, #0]
 80059a4:	461a      	mov	r2, r3
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d1f2      	bne.n	8005992 <chk_chr+0xc>
	return *str;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	781b      	ldrb	r3, [r3, #0]
}
 80059b0:	4618      	mov	r0, r3
 80059b2:	370c      	adds	r7, #12
 80059b4:	46bd      	mov	sp, r7
 80059b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ba:	4770      	bx	lr

080059bc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80059bc:	b480      	push	{r7}
 80059be:	b085      	sub	sp, #20
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
 80059c4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80059c6:	2300      	movs	r3, #0
 80059c8:	60bb      	str	r3, [r7, #8]
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	60fb      	str	r3, [r7, #12]
 80059ce:	e029      	b.n	8005a24 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80059d0:	4a27      	ldr	r2, [pc, #156]	; (8005a70 <chk_lock+0xb4>)
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	011b      	lsls	r3, r3, #4
 80059d6:	4413      	add	r3, r2
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d01d      	beq.n	8005a1a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80059de:	4a24      	ldr	r2, [pc, #144]	; (8005a70 <chk_lock+0xb4>)
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	011b      	lsls	r3, r3, #4
 80059e4:	4413      	add	r3, r2
 80059e6:	681a      	ldr	r2, [r3, #0]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	429a      	cmp	r2, r3
 80059ee:	d116      	bne.n	8005a1e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80059f0:	4a1f      	ldr	r2, [pc, #124]	; (8005a70 <chk_lock+0xb4>)
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	011b      	lsls	r3, r3, #4
 80059f6:	4413      	add	r3, r2
 80059f8:	3304      	adds	r3, #4
 80059fa:	681a      	ldr	r2, [r3, #0]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005a00:	429a      	cmp	r2, r3
 8005a02:	d10c      	bne.n	8005a1e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005a04:	4a1a      	ldr	r2, [pc, #104]	; (8005a70 <chk_lock+0xb4>)
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	011b      	lsls	r3, r3, #4
 8005a0a:	4413      	add	r3, r2
 8005a0c:	3308      	adds	r3, #8
 8005a0e:	681a      	ldr	r2, [r3, #0]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8005a14:	429a      	cmp	r2, r3
 8005a16:	d102      	bne.n	8005a1e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005a18:	e007      	b.n	8005a2a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	3301      	adds	r3, #1
 8005a22:	60fb      	str	r3, [r7, #12]
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	2b01      	cmp	r3, #1
 8005a28:	d9d2      	bls.n	80059d0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	2b02      	cmp	r3, #2
 8005a2e:	d109      	bne.n	8005a44 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d102      	bne.n	8005a3c <chk_lock+0x80>
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	2b02      	cmp	r3, #2
 8005a3a:	d101      	bne.n	8005a40 <chk_lock+0x84>
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	e010      	b.n	8005a62 <chk_lock+0xa6>
 8005a40:	2312      	movs	r3, #18
 8005a42:	e00e      	b.n	8005a62 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d108      	bne.n	8005a5c <chk_lock+0xa0>
 8005a4a:	4a09      	ldr	r2, [pc, #36]	; (8005a70 <chk_lock+0xb4>)
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	011b      	lsls	r3, r3, #4
 8005a50:	4413      	add	r3, r2
 8005a52:	330c      	adds	r3, #12
 8005a54:	881b      	ldrh	r3, [r3, #0]
 8005a56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a5a:	d101      	bne.n	8005a60 <chk_lock+0xa4>
 8005a5c:	2310      	movs	r3, #16
 8005a5e:	e000      	b.n	8005a62 <chk_lock+0xa6>
 8005a60:	2300      	movs	r3, #0
}
 8005a62:	4618      	mov	r0, r3
 8005a64:	3714      	adds	r7, #20
 8005a66:	46bd      	mov	sp, r7
 8005a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6c:	4770      	bx	lr
 8005a6e:	bf00      	nop
 8005a70:	20002784 	.word	0x20002784

08005a74 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8005a74:	b480      	push	{r7}
 8005a76:	b083      	sub	sp, #12
 8005a78:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	607b      	str	r3, [r7, #4]
 8005a7e:	e002      	b.n	8005a86 <enq_lock+0x12>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	3301      	adds	r3, #1
 8005a84:	607b      	str	r3, [r7, #4]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2b01      	cmp	r3, #1
 8005a8a:	d806      	bhi.n	8005a9a <enq_lock+0x26>
 8005a8c:	4a09      	ldr	r2, [pc, #36]	; (8005ab4 <enq_lock+0x40>)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	011b      	lsls	r3, r3, #4
 8005a92:	4413      	add	r3, r2
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d1f2      	bne.n	8005a80 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2b02      	cmp	r3, #2
 8005a9e:	bf14      	ite	ne
 8005aa0:	2301      	movne	r3, #1
 8005aa2:	2300      	moveq	r3, #0
 8005aa4:	b2db      	uxtb	r3, r3
}
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	370c      	adds	r7, #12
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab0:	4770      	bx	lr
 8005ab2:	bf00      	nop
 8005ab4:	20002784 	.word	0x20002784

08005ab8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b085      	sub	sp, #20
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
 8005ac0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	60fb      	str	r3, [r7, #12]
 8005ac6:	e01f      	b.n	8005b08 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8005ac8:	4a41      	ldr	r2, [pc, #260]	; (8005bd0 <inc_lock+0x118>)
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	011b      	lsls	r3, r3, #4
 8005ace:	4413      	add	r3, r2
 8005ad0:	681a      	ldr	r2, [r3, #0]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	429a      	cmp	r2, r3
 8005ad8:	d113      	bne.n	8005b02 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8005ada:	4a3d      	ldr	r2, [pc, #244]	; (8005bd0 <inc_lock+0x118>)
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	011b      	lsls	r3, r3, #4
 8005ae0:	4413      	add	r3, r2
 8005ae2:	3304      	adds	r3, #4
 8005ae4:	681a      	ldr	r2, [r3, #0]
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8005aea:	429a      	cmp	r2, r3
 8005aec:	d109      	bne.n	8005b02 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8005aee:	4a38      	ldr	r2, [pc, #224]	; (8005bd0 <inc_lock+0x118>)
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	011b      	lsls	r3, r3, #4
 8005af4:	4413      	add	r3, r2
 8005af6:	3308      	adds	r3, #8
 8005af8:	681a      	ldr	r2, [r3, #0]
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8005afe:	429a      	cmp	r2, r3
 8005b00:	d006      	beq.n	8005b10 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	3301      	adds	r3, #1
 8005b06:	60fb      	str	r3, [r7, #12]
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	2b01      	cmp	r3, #1
 8005b0c:	d9dc      	bls.n	8005ac8 <inc_lock+0x10>
 8005b0e:	e000      	b.n	8005b12 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8005b10:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	2b02      	cmp	r3, #2
 8005b16:	d132      	bne.n	8005b7e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005b18:	2300      	movs	r3, #0
 8005b1a:	60fb      	str	r3, [r7, #12]
 8005b1c:	e002      	b.n	8005b24 <inc_lock+0x6c>
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	3301      	adds	r3, #1
 8005b22:	60fb      	str	r3, [r7, #12]
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	2b01      	cmp	r3, #1
 8005b28:	d806      	bhi.n	8005b38 <inc_lock+0x80>
 8005b2a:	4a29      	ldr	r2, [pc, #164]	; (8005bd0 <inc_lock+0x118>)
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	011b      	lsls	r3, r3, #4
 8005b30:	4413      	add	r3, r2
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d1f2      	bne.n	8005b1e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	2b02      	cmp	r3, #2
 8005b3c:	d101      	bne.n	8005b42 <inc_lock+0x8a>
 8005b3e:	2300      	movs	r3, #0
 8005b40:	e040      	b.n	8005bc4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681a      	ldr	r2, [r3, #0]
 8005b46:	4922      	ldr	r1, [pc, #136]	; (8005bd0 <inc_lock+0x118>)
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	011b      	lsls	r3, r3, #4
 8005b4c:	440b      	add	r3, r1
 8005b4e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	689a      	ldr	r2, [r3, #8]
 8005b54:	491e      	ldr	r1, [pc, #120]	; (8005bd0 <inc_lock+0x118>)
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	011b      	lsls	r3, r3, #4
 8005b5a:	440b      	add	r3, r1
 8005b5c:	3304      	adds	r3, #4
 8005b5e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	695a      	ldr	r2, [r3, #20]
 8005b64:	491a      	ldr	r1, [pc, #104]	; (8005bd0 <inc_lock+0x118>)
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	011b      	lsls	r3, r3, #4
 8005b6a:	440b      	add	r3, r1
 8005b6c:	3308      	adds	r3, #8
 8005b6e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8005b70:	4a17      	ldr	r2, [pc, #92]	; (8005bd0 <inc_lock+0x118>)
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	011b      	lsls	r3, r3, #4
 8005b76:	4413      	add	r3, r2
 8005b78:	330c      	adds	r3, #12
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d009      	beq.n	8005b98 <inc_lock+0xe0>
 8005b84:	4a12      	ldr	r2, [pc, #72]	; (8005bd0 <inc_lock+0x118>)
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	011b      	lsls	r3, r3, #4
 8005b8a:	4413      	add	r3, r2
 8005b8c:	330c      	adds	r3, #12
 8005b8e:	881b      	ldrh	r3, [r3, #0]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d001      	beq.n	8005b98 <inc_lock+0xe0>
 8005b94:	2300      	movs	r3, #0
 8005b96:	e015      	b.n	8005bc4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d108      	bne.n	8005bb0 <inc_lock+0xf8>
 8005b9e:	4a0c      	ldr	r2, [pc, #48]	; (8005bd0 <inc_lock+0x118>)
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	011b      	lsls	r3, r3, #4
 8005ba4:	4413      	add	r3, r2
 8005ba6:	330c      	adds	r3, #12
 8005ba8:	881b      	ldrh	r3, [r3, #0]
 8005baa:	3301      	adds	r3, #1
 8005bac:	b29a      	uxth	r2, r3
 8005bae:	e001      	b.n	8005bb4 <inc_lock+0xfc>
 8005bb0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005bb4:	4906      	ldr	r1, [pc, #24]	; (8005bd0 <inc_lock+0x118>)
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	011b      	lsls	r3, r3, #4
 8005bba:	440b      	add	r3, r1
 8005bbc:	330c      	adds	r3, #12
 8005bbe:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	3301      	adds	r3, #1
}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	3714      	adds	r7, #20
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bce:	4770      	bx	lr
 8005bd0:	20002784 	.word	0x20002784

08005bd4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b085      	sub	sp, #20
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	3b01      	subs	r3, #1
 8005be0:	607b      	str	r3, [r7, #4]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2b01      	cmp	r3, #1
 8005be6:	d825      	bhi.n	8005c34 <dec_lock+0x60>
		n = Files[i].ctr;
 8005be8:	4a17      	ldr	r2, [pc, #92]	; (8005c48 <dec_lock+0x74>)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	011b      	lsls	r3, r3, #4
 8005bee:	4413      	add	r3, r2
 8005bf0:	330c      	adds	r3, #12
 8005bf2:	881b      	ldrh	r3, [r3, #0]
 8005bf4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8005bf6:	89fb      	ldrh	r3, [r7, #14]
 8005bf8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bfc:	d101      	bne.n	8005c02 <dec_lock+0x2e>
 8005bfe:	2300      	movs	r3, #0
 8005c00:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8005c02:	89fb      	ldrh	r3, [r7, #14]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d002      	beq.n	8005c0e <dec_lock+0x3a>
 8005c08:	89fb      	ldrh	r3, [r7, #14]
 8005c0a:	3b01      	subs	r3, #1
 8005c0c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8005c0e:	4a0e      	ldr	r2, [pc, #56]	; (8005c48 <dec_lock+0x74>)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	011b      	lsls	r3, r3, #4
 8005c14:	4413      	add	r3, r2
 8005c16:	330c      	adds	r3, #12
 8005c18:	89fa      	ldrh	r2, [r7, #14]
 8005c1a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8005c1c:	89fb      	ldrh	r3, [r7, #14]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d105      	bne.n	8005c2e <dec_lock+0x5a>
 8005c22:	4a09      	ldr	r2, [pc, #36]	; (8005c48 <dec_lock+0x74>)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	011b      	lsls	r3, r3, #4
 8005c28:	4413      	add	r3, r2
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8005c2e:	2300      	movs	r3, #0
 8005c30:	737b      	strb	r3, [r7, #13]
 8005c32:	e001      	b.n	8005c38 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8005c34:	2302      	movs	r3, #2
 8005c36:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8005c38:	7b7b      	ldrb	r3, [r7, #13]
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	3714      	adds	r7, #20
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c44:	4770      	bx	lr
 8005c46:	bf00      	nop
 8005c48:	20002784 	.word	0x20002784

08005c4c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	b085      	sub	sp, #20
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8005c54:	2300      	movs	r3, #0
 8005c56:	60fb      	str	r3, [r7, #12]
 8005c58:	e010      	b.n	8005c7c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005c5a:	4a0d      	ldr	r2, [pc, #52]	; (8005c90 <clear_lock+0x44>)
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	011b      	lsls	r3, r3, #4
 8005c60:	4413      	add	r3, r2
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	687a      	ldr	r2, [r7, #4]
 8005c66:	429a      	cmp	r2, r3
 8005c68:	d105      	bne.n	8005c76 <clear_lock+0x2a>
 8005c6a:	4a09      	ldr	r2, [pc, #36]	; (8005c90 <clear_lock+0x44>)
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	011b      	lsls	r3, r3, #4
 8005c70:	4413      	add	r3, r2
 8005c72:	2200      	movs	r2, #0
 8005c74:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	3301      	adds	r3, #1
 8005c7a:	60fb      	str	r3, [r7, #12]
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	2b01      	cmp	r3, #1
 8005c80:	d9eb      	bls.n	8005c5a <clear_lock+0xe>
	}
}
 8005c82:	bf00      	nop
 8005c84:	bf00      	nop
 8005c86:	3714      	adds	r7, #20
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8e:	4770      	bx	lr
 8005c90:	20002784 	.word	0x20002784

08005c94 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b086      	sub	sp, #24
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	78db      	ldrb	r3, [r3, #3]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d034      	beq.n	8005d12 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cac:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	7858      	ldrb	r0, [r3, #1]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005cb8:	2301      	movs	r3, #1
 8005cba:	697a      	ldr	r2, [r7, #20]
 8005cbc:	f7ff fd40 	bl	8005740 <disk_write>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d002      	beq.n	8005ccc <sync_window+0x38>
			res = FR_DISK_ERR;
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	73fb      	strb	r3, [r7, #15]
 8005cca:	e022      	b.n	8005d12 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cd6:	697a      	ldr	r2, [r7, #20]
 8005cd8:	1ad2      	subs	r2, r2, r3
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6a1b      	ldr	r3, [r3, #32]
 8005cde:	429a      	cmp	r2, r3
 8005ce0:	d217      	bcs.n	8005d12 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	789b      	ldrb	r3, [r3, #2]
 8005ce6:	613b      	str	r3, [r7, #16]
 8005ce8:	e010      	b.n	8005d0c <sync_window+0x78>
					wsect += fs->fsize;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6a1b      	ldr	r3, [r3, #32]
 8005cee:	697a      	ldr	r2, [r7, #20]
 8005cf0:	4413      	add	r3, r2
 8005cf2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	7858      	ldrb	r0, [r3, #1]
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005cfe:	2301      	movs	r3, #1
 8005d00:	697a      	ldr	r2, [r7, #20]
 8005d02:	f7ff fd1d 	bl	8005740 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005d06:	693b      	ldr	r3, [r7, #16]
 8005d08:	3b01      	subs	r3, #1
 8005d0a:	613b      	str	r3, [r7, #16]
 8005d0c:	693b      	ldr	r3, [r7, #16]
 8005d0e:	2b01      	cmp	r3, #1
 8005d10:	d8eb      	bhi.n	8005cea <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8005d12:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d14:	4618      	mov	r0, r3
 8005d16:	3718      	adds	r7, #24
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bd80      	pop	{r7, pc}

08005d1c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b084      	sub	sp, #16
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
 8005d24:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8005d26:	2300      	movs	r3, #0
 8005d28:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d2e:	683a      	ldr	r2, [r7, #0]
 8005d30:	429a      	cmp	r2, r3
 8005d32:	d01b      	beq.n	8005d6c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8005d34:	6878      	ldr	r0, [r7, #4]
 8005d36:	f7ff ffad 	bl	8005c94 <sync_window>
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8005d3e:	7bfb      	ldrb	r3, [r7, #15]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d113      	bne.n	8005d6c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	7858      	ldrb	r0, [r3, #1]
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005d4e:	2301      	movs	r3, #1
 8005d50:	683a      	ldr	r2, [r7, #0]
 8005d52:	f7ff fcd5 	bl	8005700 <disk_read>
 8005d56:	4603      	mov	r3, r0
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d004      	beq.n	8005d66 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005d5c:	f04f 33ff 	mov.w	r3, #4294967295
 8005d60:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8005d62:	2301      	movs	r3, #1
 8005d64:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	683a      	ldr	r2, [r7, #0]
 8005d6a:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8005d6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d6e:	4618      	mov	r0, r3
 8005d70:	3710      	adds	r7, #16
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bd80      	pop	{r7, pc}
	...

08005d78 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b084      	sub	sp, #16
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8005d80:	6878      	ldr	r0, [r7, #4]
 8005d82:	f7ff ff87 	bl	8005c94 <sync_window>
 8005d86:	4603      	mov	r3, r0
 8005d88:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8005d8a:	7bfb      	ldrb	r3, [r7, #15]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d159      	bne.n	8005e44 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	781b      	ldrb	r3, [r3, #0]
 8005d94:	2b03      	cmp	r3, #3
 8005d96:	d149      	bne.n	8005e2c <sync_fs+0xb4>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	791b      	ldrb	r3, [r3, #4]
 8005d9c:	2b01      	cmp	r3, #1
 8005d9e:	d145      	bne.n	8005e2c <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	899b      	ldrh	r3, [r3, #12]
 8005daa:	461a      	mov	r2, r3
 8005dac:	2100      	movs	r1, #0
 8005dae:	f7ff fda8 	bl	8005902 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	3338      	adds	r3, #56	; 0x38
 8005db6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005dba:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f7ff fd37 	bl	8005832 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	3338      	adds	r3, #56	; 0x38
 8005dc8:	4921      	ldr	r1, [pc, #132]	; (8005e50 <sync_fs+0xd8>)
 8005dca:	4618      	mov	r0, r3
 8005dcc:	f7ff fd4c 	bl	8005868 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	3338      	adds	r3, #56	; 0x38
 8005dd4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8005dd8:	491e      	ldr	r1, [pc, #120]	; (8005e54 <sync_fs+0xdc>)
 8005dda:	4618      	mov	r0, r3
 8005ddc:	f7ff fd44 	bl	8005868 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	3338      	adds	r3, #56	; 0x38
 8005de4:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	699b      	ldr	r3, [r3, #24]
 8005dec:	4619      	mov	r1, r3
 8005dee:	4610      	mov	r0, r2
 8005df0:	f7ff fd3a 	bl	8005868 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	3338      	adds	r3, #56	; 0x38
 8005df8:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	695b      	ldr	r3, [r3, #20]
 8005e00:	4619      	mov	r1, r3
 8005e02:	4610      	mov	r0, r2
 8005e04:	f7ff fd30 	bl	8005868 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e0c:	1c5a      	adds	r2, r3, #1
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	7858      	ldrb	r0, [r3, #1]
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e20:	2301      	movs	r3, #1
 8005e22:	f7ff fc8d 	bl	8005740 <disk_write>
			fs->fsi_flag = 0;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2200      	movs	r2, #0
 8005e2a:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	785b      	ldrb	r3, [r3, #1]
 8005e30:	2200      	movs	r2, #0
 8005e32:	2100      	movs	r1, #0
 8005e34:	4618      	mov	r0, r3
 8005e36:	f7ff fca3 	bl	8005780 <disk_ioctl>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d001      	beq.n	8005e44 <sync_fs+0xcc>
 8005e40:	2301      	movs	r3, #1
 8005e42:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8005e44:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	3710      	adds	r7, #16
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bd80      	pop	{r7, pc}
 8005e4e:	bf00      	nop
 8005e50:	41615252 	.word	0x41615252
 8005e54:	61417272 	.word	0x61417272

08005e58 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b083      	sub	sp, #12
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
 8005e60:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	3b02      	subs	r3, #2
 8005e66:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	69db      	ldr	r3, [r3, #28]
 8005e6c:	3b02      	subs	r3, #2
 8005e6e:	683a      	ldr	r2, [r7, #0]
 8005e70:	429a      	cmp	r2, r3
 8005e72:	d301      	bcc.n	8005e78 <clust2sect+0x20>
 8005e74:	2300      	movs	r3, #0
 8005e76:	e008      	b.n	8005e8a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	895b      	ldrh	r3, [r3, #10]
 8005e7c:	461a      	mov	r2, r3
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	fb03 f202 	mul.w	r2, r3, r2
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e88:	4413      	add	r3, r2
}
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	370c      	adds	r7, #12
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e94:	4770      	bx	lr

08005e96 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8005e96:	b580      	push	{r7, lr}
 8005e98:	b086      	sub	sp, #24
 8005e9a:	af00      	add	r7, sp, #0
 8005e9c:	6078      	str	r0, [r7, #4]
 8005e9e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	2b01      	cmp	r3, #1
 8005eaa:	d904      	bls.n	8005eb6 <get_fat+0x20>
 8005eac:	693b      	ldr	r3, [r7, #16]
 8005eae:	69db      	ldr	r3, [r3, #28]
 8005eb0:	683a      	ldr	r2, [r7, #0]
 8005eb2:	429a      	cmp	r2, r3
 8005eb4:	d302      	bcc.n	8005ebc <get_fat+0x26>
		val = 1;	/* Internal error */
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	617b      	str	r3, [r7, #20]
 8005eba:	e0bb      	b.n	8006034 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8005ebc:	f04f 33ff 	mov.w	r3, #4294967295
 8005ec0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8005ec2:	693b      	ldr	r3, [r7, #16]
 8005ec4:	781b      	ldrb	r3, [r3, #0]
 8005ec6:	2b03      	cmp	r3, #3
 8005ec8:	f000 8083 	beq.w	8005fd2 <get_fat+0x13c>
 8005ecc:	2b03      	cmp	r3, #3
 8005ece:	f300 80a7 	bgt.w	8006020 <get_fat+0x18a>
 8005ed2:	2b01      	cmp	r3, #1
 8005ed4:	d002      	beq.n	8005edc <get_fat+0x46>
 8005ed6:	2b02      	cmp	r3, #2
 8005ed8:	d056      	beq.n	8005f88 <get_fat+0xf2>
 8005eda:	e0a1      	b.n	8006020 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	60fb      	str	r3, [r7, #12]
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	085b      	lsrs	r3, r3, #1
 8005ee4:	68fa      	ldr	r2, [r7, #12]
 8005ee6:	4413      	add	r3, r2
 8005ee8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005eea:	693b      	ldr	r3, [r7, #16]
 8005eec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	899b      	ldrh	r3, [r3, #12]
 8005ef2:	4619      	mov	r1, r3
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	fbb3 f3f1 	udiv	r3, r3, r1
 8005efa:	4413      	add	r3, r2
 8005efc:	4619      	mov	r1, r3
 8005efe:	6938      	ldr	r0, [r7, #16]
 8005f00:	f7ff ff0c 	bl	8005d1c <move_window>
 8005f04:	4603      	mov	r3, r0
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	f040 808d 	bne.w	8006026 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	1c5a      	adds	r2, r3, #1
 8005f10:	60fa      	str	r2, [r7, #12]
 8005f12:	693a      	ldr	r2, [r7, #16]
 8005f14:	8992      	ldrh	r2, [r2, #12]
 8005f16:	fbb3 f1f2 	udiv	r1, r3, r2
 8005f1a:	fb01 f202 	mul.w	r2, r1, r2
 8005f1e:	1a9b      	subs	r3, r3, r2
 8005f20:	693a      	ldr	r2, [r7, #16]
 8005f22:	4413      	add	r3, r2
 8005f24:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005f28:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005f2a:	693b      	ldr	r3, [r7, #16]
 8005f2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005f2e:	693b      	ldr	r3, [r7, #16]
 8005f30:	899b      	ldrh	r3, [r3, #12]
 8005f32:	4619      	mov	r1, r3
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	fbb3 f3f1 	udiv	r3, r3, r1
 8005f3a:	4413      	add	r3, r2
 8005f3c:	4619      	mov	r1, r3
 8005f3e:	6938      	ldr	r0, [r7, #16]
 8005f40:	f7ff feec 	bl	8005d1c <move_window>
 8005f44:	4603      	mov	r3, r0
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d16f      	bne.n	800602a <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8005f4a:	693b      	ldr	r3, [r7, #16]
 8005f4c:	899b      	ldrh	r3, [r3, #12]
 8005f4e:	461a      	mov	r2, r3
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	fbb3 f1f2 	udiv	r1, r3, r2
 8005f56:	fb01 f202 	mul.w	r2, r1, r2
 8005f5a:	1a9b      	subs	r3, r3, r2
 8005f5c:	693a      	ldr	r2, [r7, #16]
 8005f5e:	4413      	add	r3, r2
 8005f60:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005f64:	021b      	lsls	r3, r3, #8
 8005f66:	461a      	mov	r2, r3
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	4313      	orrs	r3, r2
 8005f6c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	f003 0301 	and.w	r3, r3, #1
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d002      	beq.n	8005f7e <get_fat+0xe8>
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	091b      	lsrs	r3, r3, #4
 8005f7c:	e002      	b.n	8005f84 <get_fat+0xee>
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f84:	617b      	str	r3, [r7, #20]
			break;
 8005f86:	e055      	b.n	8006034 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005f88:	693b      	ldr	r3, [r7, #16]
 8005f8a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005f8c:	693b      	ldr	r3, [r7, #16]
 8005f8e:	899b      	ldrh	r3, [r3, #12]
 8005f90:	085b      	lsrs	r3, r3, #1
 8005f92:	b29b      	uxth	r3, r3
 8005f94:	4619      	mov	r1, r3
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	fbb3 f3f1 	udiv	r3, r3, r1
 8005f9c:	4413      	add	r3, r2
 8005f9e:	4619      	mov	r1, r3
 8005fa0:	6938      	ldr	r0, [r7, #16]
 8005fa2:	f7ff febb 	bl	8005d1c <move_window>
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d140      	bne.n	800602e <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	005b      	lsls	r3, r3, #1
 8005fb6:	693a      	ldr	r2, [r7, #16]
 8005fb8:	8992      	ldrh	r2, [r2, #12]
 8005fba:	fbb3 f0f2 	udiv	r0, r3, r2
 8005fbe:	fb00 f202 	mul.w	r2, r0, r2
 8005fc2:	1a9b      	subs	r3, r3, r2
 8005fc4:	440b      	add	r3, r1
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	f7ff fbf8 	bl	80057bc <ld_word>
 8005fcc:	4603      	mov	r3, r0
 8005fce:	617b      	str	r3, [r7, #20]
			break;
 8005fd0:	e030      	b.n	8006034 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005fd2:	693b      	ldr	r3, [r7, #16]
 8005fd4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005fd6:	693b      	ldr	r3, [r7, #16]
 8005fd8:	899b      	ldrh	r3, [r3, #12]
 8005fda:	089b      	lsrs	r3, r3, #2
 8005fdc:	b29b      	uxth	r3, r3
 8005fde:	4619      	mov	r1, r3
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	fbb3 f3f1 	udiv	r3, r3, r1
 8005fe6:	4413      	add	r3, r2
 8005fe8:	4619      	mov	r1, r3
 8005fea:	6938      	ldr	r0, [r7, #16]
 8005fec:	f7ff fe96 	bl	8005d1c <move_window>
 8005ff0:	4603      	mov	r3, r0
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d11d      	bne.n	8006032 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8005ff6:	693b      	ldr	r3, [r7, #16]
 8005ff8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	009b      	lsls	r3, r3, #2
 8006000:	693a      	ldr	r2, [r7, #16]
 8006002:	8992      	ldrh	r2, [r2, #12]
 8006004:	fbb3 f0f2 	udiv	r0, r3, r2
 8006008:	fb00 f202 	mul.w	r2, r0, r2
 800600c:	1a9b      	subs	r3, r3, r2
 800600e:	440b      	add	r3, r1
 8006010:	4618      	mov	r0, r3
 8006012:	f7ff fbeb 	bl	80057ec <ld_dword>
 8006016:	4603      	mov	r3, r0
 8006018:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800601c:	617b      	str	r3, [r7, #20]
			break;
 800601e:	e009      	b.n	8006034 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8006020:	2301      	movs	r3, #1
 8006022:	617b      	str	r3, [r7, #20]
 8006024:	e006      	b.n	8006034 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006026:	bf00      	nop
 8006028:	e004      	b.n	8006034 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800602a:	bf00      	nop
 800602c:	e002      	b.n	8006034 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800602e:	bf00      	nop
 8006030:	e000      	b.n	8006034 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006032:	bf00      	nop
		}
	}

	return val;
 8006034:	697b      	ldr	r3, [r7, #20]
}
 8006036:	4618      	mov	r0, r3
 8006038:	3718      	adds	r7, #24
 800603a:	46bd      	mov	sp, r7
 800603c:	bd80      	pop	{r7, pc}

0800603e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800603e:	b590      	push	{r4, r7, lr}
 8006040:	b089      	sub	sp, #36	; 0x24
 8006042:	af00      	add	r7, sp, #0
 8006044:	60f8      	str	r0, [r7, #12]
 8006046:	60b9      	str	r1, [r7, #8]
 8006048:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800604a:	2302      	movs	r3, #2
 800604c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	2b01      	cmp	r3, #1
 8006052:	f240 8109 	bls.w	8006268 <put_fat+0x22a>
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	69db      	ldr	r3, [r3, #28]
 800605a:	68ba      	ldr	r2, [r7, #8]
 800605c:	429a      	cmp	r2, r3
 800605e:	f080 8103 	bcs.w	8006268 <put_fat+0x22a>
		switch (fs->fs_type) {
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	781b      	ldrb	r3, [r3, #0]
 8006066:	2b03      	cmp	r3, #3
 8006068:	f000 80b6 	beq.w	80061d8 <put_fat+0x19a>
 800606c:	2b03      	cmp	r3, #3
 800606e:	f300 80fb 	bgt.w	8006268 <put_fat+0x22a>
 8006072:	2b01      	cmp	r3, #1
 8006074:	d003      	beq.n	800607e <put_fat+0x40>
 8006076:	2b02      	cmp	r3, #2
 8006078:	f000 8083 	beq.w	8006182 <put_fat+0x144>
 800607c:	e0f4      	b.n	8006268 <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	61bb      	str	r3, [r7, #24]
 8006082:	69bb      	ldr	r3, [r7, #24]
 8006084:	085b      	lsrs	r3, r3, #1
 8006086:	69ba      	ldr	r2, [r7, #24]
 8006088:	4413      	add	r3, r2
 800608a:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	899b      	ldrh	r3, [r3, #12]
 8006094:	4619      	mov	r1, r3
 8006096:	69bb      	ldr	r3, [r7, #24]
 8006098:	fbb3 f3f1 	udiv	r3, r3, r1
 800609c:	4413      	add	r3, r2
 800609e:	4619      	mov	r1, r3
 80060a0:	68f8      	ldr	r0, [r7, #12]
 80060a2:	f7ff fe3b 	bl	8005d1c <move_window>
 80060a6:	4603      	mov	r3, r0
 80060a8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80060aa:	7ffb      	ldrb	r3, [r7, #31]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	f040 80d4 	bne.w	800625a <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80060b8:	69bb      	ldr	r3, [r7, #24]
 80060ba:	1c5a      	adds	r2, r3, #1
 80060bc:	61ba      	str	r2, [r7, #24]
 80060be:	68fa      	ldr	r2, [r7, #12]
 80060c0:	8992      	ldrh	r2, [r2, #12]
 80060c2:	fbb3 f0f2 	udiv	r0, r3, r2
 80060c6:	fb00 f202 	mul.w	r2, r0, r2
 80060ca:	1a9b      	subs	r3, r3, r2
 80060cc:	440b      	add	r3, r1
 80060ce:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	f003 0301 	and.w	r3, r3, #1
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d00d      	beq.n	80060f6 <put_fat+0xb8>
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	781b      	ldrb	r3, [r3, #0]
 80060de:	b25b      	sxtb	r3, r3
 80060e0:	f003 030f 	and.w	r3, r3, #15
 80060e4:	b25a      	sxtb	r2, r3
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	b2db      	uxtb	r3, r3
 80060ea:	011b      	lsls	r3, r3, #4
 80060ec:	b25b      	sxtb	r3, r3
 80060ee:	4313      	orrs	r3, r2
 80060f0:	b25b      	sxtb	r3, r3
 80060f2:	b2db      	uxtb	r3, r3
 80060f4:	e001      	b.n	80060fa <put_fat+0xbc>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	b2db      	uxtb	r3, r3
 80060fa:	697a      	ldr	r2, [r7, #20]
 80060fc:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	2201      	movs	r2, #1
 8006102:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	899b      	ldrh	r3, [r3, #12]
 800610c:	4619      	mov	r1, r3
 800610e:	69bb      	ldr	r3, [r7, #24]
 8006110:	fbb3 f3f1 	udiv	r3, r3, r1
 8006114:	4413      	add	r3, r2
 8006116:	4619      	mov	r1, r3
 8006118:	68f8      	ldr	r0, [r7, #12]
 800611a:	f7ff fdff 	bl	8005d1c <move_window>
 800611e:	4603      	mov	r3, r0
 8006120:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006122:	7ffb      	ldrb	r3, [r7, #31]
 8006124:	2b00      	cmp	r3, #0
 8006126:	f040 809a 	bne.w	800625e <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	899b      	ldrh	r3, [r3, #12]
 8006134:	461a      	mov	r2, r3
 8006136:	69bb      	ldr	r3, [r7, #24]
 8006138:	fbb3 f0f2 	udiv	r0, r3, r2
 800613c:	fb00 f202 	mul.w	r2, r0, r2
 8006140:	1a9b      	subs	r3, r3, r2
 8006142:	440b      	add	r3, r1
 8006144:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	f003 0301 	and.w	r3, r3, #1
 800614c:	2b00      	cmp	r3, #0
 800614e:	d003      	beq.n	8006158 <put_fat+0x11a>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	091b      	lsrs	r3, r3, #4
 8006154:	b2db      	uxtb	r3, r3
 8006156:	e00e      	b.n	8006176 <put_fat+0x138>
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	781b      	ldrb	r3, [r3, #0]
 800615c:	b25b      	sxtb	r3, r3
 800615e:	f023 030f 	bic.w	r3, r3, #15
 8006162:	b25a      	sxtb	r2, r3
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	0a1b      	lsrs	r3, r3, #8
 8006168:	b25b      	sxtb	r3, r3
 800616a:	f003 030f 	and.w	r3, r3, #15
 800616e:	b25b      	sxtb	r3, r3
 8006170:	4313      	orrs	r3, r2
 8006172:	b25b      	sxtb	r3, r3
 8006174:	b2db      	uxtb	r3, r3
 8006176:	697a      	ldr	r2, [r7, #20]
 8006178:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	2201      	movs	r2, #1
 800617e:	70da      	strb	r2, [r3, #3]
			break;
 8006180:	e072      	b.n	8006268 <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	899b      	ldrh	r3, [r3, #12]
 800618a:	085b      	lsrs	r3, r3, #1
 800618c:	b29b      	uxth	r3, r3
 800618e:	4619      	mov	r1, r3
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	fbb3 f3f1 	udiv	r3, r3, r1
 8006196:	4413      	add	r3, r2
 8006198:	4619      	mov	r1, r3
 800619a:	68f8      	ldr	r0, [r7, #12]
 800619c:	f7ff fdbe 	bl	8005d1c <move_window>
 80061a0:	4603      	mov	r3, r0
 80061a2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80061a4:	7ffb      	ldrb	r3, [r7, #31]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d15b      	bne.n	8006262 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	005b      	lsls	r3, r3, #1
 80061b4:	68fa      	ldr	r2, [r7, #12]
 80061b6:	8992      	ldrh	r2, [r2, #12]
 80061b8:	fbb3 f0f2 	udiv	r0, r3, r2
 80061bc:	fb00 f202 	mul.w	r2, r0, r2
 80061c0:	1a9b      	subs	r3, r3, r2
 80061c2:	440b      	add	r3, r1
 80061c4:	687a      	ldr	r2, [r7, #4]
 80061c6:	b292      	uxth	r2, r2
 80061c8:	4611      	mov	r1, r2
 80061ca:	4618      	mov	r0, r3
 80061cc:	f7ff fb31 	bl	8005832 <st_word>
			fs->wflag = 1;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	2201      	movs	r2, #1
 80061d4:	70da      	strb	r2, [r3, #3]
			break;
 80061d6:	e047      	b.n	8006268 <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	899b      	ldrh	r3, [r3, #12]
 80061e0:	089b      	lsrs	r3, r3, #2
 80061e2:	b29b      	uxth	r3, r3
 80061e4:	4619      	mov	r1, r3
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	fbb3 f3f1 	udiv	r3, r3, r1
 80061ec:	4413      	add	r3, r2
 80061ee:	4619      	mov	r1, r3
 80061f0:	68f8      	ldr	r0, [r7, #12]
 80061f2:	f7ff fd93 	bl	8005d1c <move_window>
 80061f6:	4603      	mov	r3, r0
 80061f8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80061fa:	7ffb      	ldrb	r3, [r7, #31]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d132      	bne.n	8006266 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	009b      	lsls	r3, r3, #2
 8006210:	68fa      	ldr	r2, [r7, #12]
 8006212:	8992      	ldrh	r2, [r2, #12]
 8006214:	fbb3 f0f2 	udiv	r0, r3, r2
 8006218:	fb00 f202 	mul.w	r2, r0, r2
 800621c:	1a9b      	subs	r3, r3, r2
 800621e:	440b      	add	r3, r1
 8006220:	4618      	mov	r0, r3
 8006222:	f7ff fae3 	bl	80057ec <ld_dword>
 8006226:	4603      	mov	r3, r0
 8006228:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800622c:	4323      	orrs	r3, r4
 800622e:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	009b      	lsls	r3, r3, #2
 800623a:	68fa      	ldr	r2, [r7, #12]
 800623c:	8992      	ldrh	r2, [r2, #12]
 800623e:	fbb3 f0f2 	udiv	r0, r3, r2
 8006242:	fb00 f202 	mul.w	r2, r0, r2
 8006246:	1a9b      	subs	r3, r3, r2
 8006248:	440b      	add	r3, r1
 800624a:	6879      	ldr	r1, [r7, #4]
 800624c:	4618      	mov	r0, r3
 800624e:	f7ff fb0b 	bl	8005868 <st_dword>
			fs->wflag = 1;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	2201      	movs	r2, #1
 8006256:	70da      	strb	r2, [r3, #3]
			break;
 8006258:	e006      	b.n	8006268 <put_fat+0x22a>
			if (res != FR_OK) break;
 800625a:	bf00      	nop
 800625c:	e004      	b.n	8006268 <put_fat+0x22a>
			if (res != FR_OK) break;
 800625e:	bf00      	nop
 8006260:	e002      	b.n	8006268 <put_fat+0x22a>
			if (res != FR_OK) break;
 8006262:	bf00      	nop
 8006264:	e000      	b.n	8006268 <put_fat+0x22a>
			if (res != FR_OK) break;
 8006266:	bf00      	nop
		}
	}
	return res;
 8006268:	7ffb      	ldrb	r3, [r7, #31]
}
 800626a:	4618      	mov	r0, r3
 800626c:	3724      	adds	r7, #36	; 0x24
 800626e:	46bd      	mov	sp, r7
 8006270:	bd90      	pop	{r4, r7, pc}

08006272 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8006272:	b580      	push	{r7, lr}
 8006274:	b088      	sub	sp, #32
 8006276:	af00      	add	r7, sp, #0
 8006278:	60f8      	str	r0, [r7, #12]
 800627a:	60b9      	str	r1, [r7, #8]
 800627c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800627e:	2300      	movs	r3, #0
 8006280:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	2b01      	cmp	r3, #1
 800628c:	d904      	bls.n	8006298 <remove_chain+0x26>
 800628e:	69bb      	ldr	r3, [r7, #24]
 8006290:	69db      	ldr	r3, [r3, #28]
 8006292:	68ba      	ldr	r2, [r7, #8]
 8006294:	429a      	cmp	r2, r3
 8006296:	d301      	bcc.n	800629c <remove_chain+0x2a>
 8006298:	2302      	movs	r3, #2
 800629a:	e04b      	b.n	8006334 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d00c      	beq.n	80062bc <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80062a2:	f04f 32ff 	mov.w	r2, #4294967295
 80062a6:	6879      	ldr	r1, [r7, #4]
 80062a8:	69b8      	ldr	r0, [r7, #24]
 80062aa:	f7ff fec8 	bl	800603e <put_fat>
 80062ae:	4603      	mov	r3, r0
 80062b0:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80062b2:	7ffb      	ldrb	r3, [r7, #31]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d001      	beq.n	80062bc <remove_chain+0x4a>
 80062b8:	7ffb      	ldrb	r3, [r7, #31]
 80062ba:	e03b      	b.n	8006334 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80062bc:	68b9      	ldr	r1, [r7, #8]
 80062be:	68f8      	ldr	r0, [r7, #12]
 80062c0:	f7ff fde9 	bl	8005e96 <get_fat>
 80062c4:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80062c6:	697b      	ldr	r3, [r7, #20]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d031      	beq.n	8006330 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80062cc:	697b      	ldr	r3, [r7, #20]
 80062ce:	2b01      	cmp	r3, #1
 80062d0:	d101      	bne.n	80062d6 <remove_chain+0x64>
 80062d2:	2302      	movs	r3, #2
 80062d4:	e02e      	b.n	8006334 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80062d6:	697b      	ldr	r3, [r7, #20]
 80062d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062dc:	d101      	bne.n	80062e2 <remove_chain+0x70>
 80062de:	2301      	movs	r3, #1
 80062e0:	e028      	b.n	8006334 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80062e2:	2200      	movs	r2, #0
 80062e4:	68b9      	ldr	r1, [r7, #8]
 80062e6:	69b8      	ldr	r0, [r7, #24]
 80062e8:	f7ff fea9 	bl	800603e <put_fat>
 80062ec:	4603      	mov	r3, r0
 80062ee:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80062f0:	7ffb      	ldrb	r3, [r7, #31]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d001      	beq.n	80062fa <remove_chain+0x88>
 80062f6:	7ffb      	ldrb	r3, [r7, #31]
 80062f8:	e01c      	b.n	8006334 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80062fa:	69bb      	ldr	r3, [r7, #24]
 80062fc:	699a      	ldr	r2, [r3, #24]
 80062fe:	69bb      	ldr	r3, [r7, #24]
 8006300:	69db      	ldr	r3, [r3, #28]
 8006302:	3b02      	subs	r3, #2
 8006304:	429a      	cmp	r2, r3
 8006306:	d20b      	bcs.n	8006320 <remove_chain+0xae>
			fs->free_clst++;
 8006308:	69bb      	ldr	r3, [r7, #24]
 800630a:	699b      	ldr	r3, [r3, #24]
 800630c:	1c5a      	adds	r2, r3, #1
 800630e:	69bb      	ldr	r3, [r7, #24]
 8006310:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8006312:	69bb      	ldr	r3, [r7, #24]
 8006314:	791b      	ldrb	r3, [r3, #4]
 8006316:	f043 0301 	orr.w	r3, r3, #1
 800631a:	b2da      	uxtb	r2, r3
 800631c:	69bb      	ldr	r3, [r7, #24]
 800631e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8006320:	697b      	ldr	r3, [r7, #20]
 8006322:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8006324:	69bb      	ldr	r3, [r7, #24]
 8006326:	69db      	ldr	r3, [r3, #28]
 8006328:	68ba      	ldr	r2, [r7, #8]
 800632a:	429a      	cmp	r2, r3
 800632c:	d3c6      	bcc.n	80062bc <remove_chain+0x4a>
 800632e:	e000      	b.n	8006332 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8006330:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8006332:	2300      	movs	r3, #0
}
 8006334:	4618      	mov	r0, r3
 8006336:	3720      	adds	r7, #32
 8006338:	46bd      	mov	sp, r7
 800633a:	bd80      	pop	{r7, pc}

0800633c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b088      	sub	sp, #32
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
 8006344:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d10d      	bne.n	800636e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8006352:	693b      	ldr	r3, [r7, #16]
 8006354:	695b      	ldr	r3, [r3, #20]
 8006356:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8006358:	69bb      	ldr	r3, [r7, #24]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d004      	beq.n	8006368 <create_chain+0x2c>
 800635e:	693b      	ldr	r3, [r7, #16]
 8006360:	69db      	ldr	r3, [r3, #28]
 8006362:	69ba      	ldr	r2, [r7, #24]
 8006364:	429a      	cmp	r2, r3
 8006366:	d31b      	bcc.n	80063a0 <create_chain+0x64>
 8006368:	2301      	movs	r3, #1
 800636a:	61bb      	str	r3, [r7, #24]
 800636c:	e018      	b.n	80063a0 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800636e:	6839      	ldr	r1, [r7, #0]
 8006370:	6878      	ldr	r0, [r7, #4]
 8006372:	f7ff fd90 	bl	8005e96 <get_fat>
 8006376:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	2b01      	cmp	r3, #1
 800637c:	d801      	bhi.n	8006382 <create_chain+0x46>
 800637e:	2301      	movs	r3, #1
 8006380:	e070      	b.n	8006464 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006388:	d101      	bne.n	800638e <create_chain+0x52>
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	e06a      	b.n	8006464 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800638e:	693b      	ldr	r3, [r7, #16]
 8006390:	69db      	ldr	r3, [r3, #28]
 8006392:	68fa      	ldr	r2, [r7, #12]
 8006394:	429a      	cmp	r2, r3
 8006396:	d201      	bcs.n	800639c <create_chain+0x60>
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	e063      	b.n	8006464 <create_chain+0x128>
		scl = clst;
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80063a0:	69bb      	ldr	r3, [r7, #24]
 80063a2:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80063a4:	69fb      	ldr	r3, [r7, #28]
 80063a6:	3301      	adds	r3, #1
 80063a8:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80063aa:	693b      	ldr	r3, [r7, #16]
 80063ac:	69db      	ldr	r3, [r3, #28]
 80063ae:	69fa      	ldr	r2, [r7, #28]
 80063b0:	429a      	cmp	r2, r3
 80063b2:	d307      	bcc.n	80063c4 <create_chain+0x88>
				ncl = 2;
 80063b4:	2302      	movs	r3, #2
 80063b6:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80063b8:	69fa      	ldr	r2, [r7, #28]
 80063ba:	69bb      	ldr	r3, [r7, #24]
 80063bc:	429a      	cmp	r2, r3
 80063be:	d901      	bls.n	80063c4 <create_chain+0x88>
 80063c0:	2300      	movs	r3, #0
 80063c2:	e04f      	b.n	8006464 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80063c4:	69f9      	ldr	r1, [r7, #28]
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f7ff fd65 	bl	8005e96 <get_fat>
 80063cc:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d00e      	beq.n	80063f2 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	2b01      	cmp	r3, #1
 80063d8:	d003      	beq.n	80063e2 <create_chain+0xa6>
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063e0:	d101      	bne.n	80063e6 <create_chain+0xaa>
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	e03e      	b.n	8006464 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80063e6:	69fa      	ldr	r2, [r7, #28]
 80063e8:	69bb      	ldr	r3, [r7, #24]
 80063ea:	429a      	cmp	r2, r3
 80063ec:	d1da      	bne.n	80063a4 <create_chain+0x68>
 80063ee:	2300      	movs	r3, #0
 80063f0:	e038      	b.n	8006464 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80063f2:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80063f4:	f04f 32ff 	mov.w	r2, #4294967295
 80063f8:	69f9      	ldr	r1, [r7, #28]
 80063fa:	6938      	ldr	r0, [r7, #16]
 80063fc:	f7ff fe1f 	bl	800603e <put_fat>
 8006400:	4603      	mov	r3, r0
 8006402:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8006404:	7dfb      	ldrb	r3, [r7, #23]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d109      	bne.n	800641e <create_chain+0xe2>
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d006      	beq.n	800641e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8006410:	69fa      	ldr	r2, [r7, #28]
 8006412:	6839      	ldr	r1, [r7, #0]
 8006414:	6938      	ldr	r0, [r7, #16]
 8006416:	f7ff fe12 	bl	800603e <put_fat>
 800641a:	4603      	mov	r3, r0
 800641c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800641e:	7dfb      	ldrb	r3, [r7, #23]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d116      	bne.n	8006452 <create_chain+0x116>
		fs->last_clst = ncl;
 8006424:	693b      	ldr	r3, [r7, #16]
 8006426:	69fa      	ldr	r2, [r7, #28]
 8006428:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800642a:	693b      	ldr	r3, [r7, #16]
 800642c:	699a      	ldr	r2, [r3, #24]
 800642e:	693b      	ldr	r3, [r7, #16]
 8006430:	69db      	ldr	r3, [r3, #28]
 8006432:	3b02      	subs	r3, #2
 8006434:	429a      	cmp	r2, r3
 8006436:	d804      	bhi.n	8006442 <create_chain+0x106>
 8006438:	693b      	ldr	r3, [r7, #16]
 800643a:	699b      	ldr	r3, [r3, #24]
 800643c:	1e5a      	subs	r2, r3, #1
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8006442:	693b      	ldr	r3, [r7, #16]
 8006444:	791b      	ldrb	r3, [r3, #4]
 8006446:	f043 0301 	orr.w	r3, r3, #1
 800644a:	b2da      	uxtb	r2, r3
 800644c:	693b      	ldr	r3, [r7, #16]
 800644e:	711a      	strb	r2, [r3, #4]
 8006450:	e007      	b.n	8006462 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8006452:	7dfb      	ldrb	r3, [r7, #23]
 8006454:	2b01      	cmp	r3, #1
 8006456:	d102      	bne.n	800645e <create_chain+0x122>
 8006458:	f04f 33ff 	mov.w	r3, #4294967295
 800645c:	e000      	b.n	8006460 <create_chain+0x124>
 800645e:	2301      	movs	r3, #1
 8006460:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8006462:	69fb      	ldr	r3, [r7, #28]
}
 8006464:	4618      	mov	r0, r3
 8006466:	3720      	adds	r7, #32
 8006468:	46bd      	mov	sp, r7
 800646a:	bd80      	pop	{r7, pc}

0800646c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800646c:	b480      	push	{r7}
 800646e:	b087      	sub	sp, #28
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
 8006474:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006480:	3304      	adds	r3, #4
 8006482:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	899b      	ldrh	r3, [r3, #12]
 8006488:	461a      	mov	r2, r3
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006490:	68fa      	ldr	r2, [r7, #12]
 8006492:	8952      	ldrh	r2, [r2, #10]
 8006494:	fbb3 f3f2 	udiv	r3, r3, r2
 8006498:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800649a:	693b      	ldr	r3, [r7, #16]
 800649c:	1d1a      	adds	r2, r3, #4
 800649e:	613a      	str	r2, [r7, #16]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d101      	bne.n	80064ae <clmt_clust+0x42>
 80064aa:	2300      	movs	r3, #0
 80064ac:	e010      	b.n	80064d0 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 80064ae:	697a      	ldr	r2, [r7, #20]
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	429a      	cmp	r2, r3
 80064b4:	d307      	bcc.n	80064c6 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 80064b6:	697a      	ldr	r2, [r7, #20]
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	1ad3      	subs	r3, r2, r3
 80064bc:	617b      	str	r3, [r7, #20]
 80064be:	693b      	ldr	r3, [r7, #16]
 80064c0:	3304      	adds	r3, #4
 80064c2:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80064c4:	e7e9      	b.n	800649a <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 80064c6:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80064c8:	693b      	ldr	r3, [r7, #16]
 80064ca:	681a      	ldr	r2, [r3, #0]
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	4413      	add	r3, r2
}
 80064d0:	4618      	mov	r0, r3
 80064d2:	371c      	adds	r7, #28
 80064d4:	46bd      	mov	sp, r7
 80064d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064da:	4770      	bx	lr

080064dc <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b086      	sub	sp, #24
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
 80064e4:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80064f2:	d204      	bcs.n	80064fe <dir_sdi+0x22>
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	f003 031f 	and.w	r3, r3, #31
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d001      	beq.n	8006502 <dir_sdi+0x26>
		return FR_INT_ERR;
 80064fe:	2302      	movs	r3, #2
 8006500:	e071      	b.n	80065e6 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	683a      	ldr	r2, [r7, #0]
 8006506:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	689b      	ldr	r3, [r3, #8]
 800650c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800650e:	697b      	ldr	r3, [r7, #20]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d106      	bne.n	8006522 <dir_sdi+0x46>
 8006514:	693b      	ldr	r3, [r7, #16]
 8006516:	781b      	ldrb	r3, [r3, #0]
 8006518:	2b02      	cmp	r3, #2
 800651a:	d902      	bls.n	8006522 <dir_sdi+0x46>
		clst = fs->dirbase;
 800651c:	693b      	ldr	r3, [r7, #16]
 800651e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006520:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8006522:	697b      	ldr	r3, [r7, #20]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d10c      	bne.n	8006542 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	095b      	lsrs	r3, r3, #5
 800652c:	693a      	ldr	r2, [r7, #16]
 800652e:	8912      	ldrh	r2, [r2, #8]
 8006530:	4293      	cmp	r3, r2
 8006532:	d301      	bcc.n	8006538 <dir_sdi+0x5c>
 8006534:	2302      	movs	r3, #2
 8006536:	e056      	b.n	80065e6 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8006538:	693b      	ldr	r3, [r7, #16]
 800653a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	61da      	str	r2, [r3, #28]
 8006540:	e02d      	b.n	800659e <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8006542:	693b      	ldr	r3, [r7, #16]
 8006544:	895b      	ldrh	r3, [r3, #10]
 8006546:	461a      	mov	r2, r3
 8006548:	693b      	ldr	r3, [r7, #16]
 800654a:	899b      	ldrh	r3, [r3, #12]
 800654c:	fb02 f303 	mul.w	r3, r2, r3
 8006550:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006552:	e019      	b.n	8006588 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6979      	ldr	r1, [r7, #20]
 8006558:	4618      	mov	r0, r3
 800655a:	f7ff fc9c 	bl	8005e96 <get_fat>
 800655e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006560:	697b      	ldr	r3, [r7, #20]
 8006562:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006566:	d101      	bne.n	800656c <dir_sdi+0x90>
 8006568:	2301      	movs	r3, #1
 800656a:	e03c      	b.n	80065e6 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800656c:	697b      	ldr	r3, [r7, #20]
 800656e:	2b01      	cmp	r3, #1
 8006570:	d904      	bls.n	800657c <dir_sdi+0xa0>
 8006572:	693b      	ldr	r3, [r7, #16]
 8006574:	69db      	ldr	r3, [r3, #28]
 8006576:	697a      	ldr	r2, [r7, #20]
 8006578:	429a      	cmp	r2, r3
 800657a:	d301      	bcc.n	8006580 <dir_sdi+0xa4>
 800657c:	2302      	movs	r3, #2
 800657e:	e032      	b.n	80065e6 <dir_sdi+0x10a>
			ofs -= csz;
 8006580:	683a      	ldr	r2, [r7, #0]
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	1ad3      	subs	r3, r2, r3
 8006586:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006588:	683a      	ldr	r2, [r7, #0]
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	429a      	cmp	r2, r3
 800658e:	d2e1      	bcs.n	8006554 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8006590:	6979      	ldr	r1, [r7, #20]
 8006592:	6938      	ldr	r0, [r7, #16]
 8006594:	f7ff fc60 	bl	8005e58 <clust2sect>
 8006598:	4602      	mov	r2, r0
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	697a      	ldr	r2, [r7, #20]
 80065a2:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	69db      	ldr	r3, [r3, #28]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d101      	bne.n	80065b0 <dir_sdi+0xd4>
 80065ac:	2302      	movs	r3, #2
 80065ae:	e01a      	b.n	80065e6 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	69da      	ldr	r2, [r3, #28]
 80065b4:	693b      	ldr	r3, [r7, #16]
 80065b6:	899b      	ldrh	r3, [r3, #12]
 80065b8:	4619      	mov	r1, r3
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	fbb3 f3f1 	udiv	r3, r3, r1
 80065c0:	441a      	add	r2, r3
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80065c6:	693b      	ldr	r3, [r7, #16]
 80065c8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80065cc:	693b      	ldr	r3, [r7, #16]
 80065ce:	899b      	ldrh	r3, [r3, #12]
 80065d0:	461a      	mov	r2, r3
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	fbb3 f0f2 	udiv	r0, r3, r2
 80065d8:	fb00 f202 	mul.w	r2, r0, r2
 80065dc:	1a9b      	subs	r3, r3, r2
 80065de:	18ca      	adds	r2, r1, r3
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80065e4:	2300      	movs	r3, #0
}
 80065e6:	4618      	mov	r0, r3
 80065e8:	3718      	adds	r7, #24
 80065ea:	46bd      	mov	sp, r7
 80065ec:	bd80      	pop	{r7, pc}

080065ee <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80065ee:	b580      	push	{r7, lr}
 80065f0:	b086      	sub	sp, #24
 80065f2:	af00      	add	r7, sp, #0
 80065f4:	6078      	str	r0, [r7, #4]
 80065f6:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	695b      	ldr	r3, [r3, #20]
 8006602:	3320      	adds	r3, #32
 8006604:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	69db      	ldr	r3, [r3, #28]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d003      	beq.n	8006616 <dir_next+0x28>
 800660e:	68bb      	ldr	r3, [r7, #8]
 8006610:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006614:	d301      	bcc.n	800661a <dir_next+0x2c>
 8006616:	2304      	movs	r3, #4
 8006618:	e0bb      	b.n	8006792 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	899b      	ldrh	r3, [r3, #12]
 800661e:	461a      	mov	r2, r3
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	fbb3 f1f2 	udiv	r1, r3, r2
 8006626:	fb01 f202 	mul.w	r2, r1, r2
 800662a:	1a9b      	subs	r3, r3, r2
 800662c:	2b00      	cmp	r3, #0
 800662e:	f040 809d 	bne.w	800676c <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	69db      	ldr	r3, [r3, #28]
 8006636:	1c5a      	adds	r2, r3, #1
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	699b      	ldr	r3, [r3, #24]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d10b      	bne.n	800665c <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	095b      	lsrs	r3, r3, #5
 8006648:	68fa      	ldr	r2, [r7, #12]
 800664a:	8912      	ldrh	r2, [r2, #8]
 800664c:	4293      	cmp	r3, r2
 800664e:	f0c0 808d 	bcc.w	800676c <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2200      	movs	r2, #0
 8006656:	61da      	str	r2, [r3, #28]
 8006658:	2304      	movs	r3, #4
 800665a:	e09a      	b.n	8006792 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	899b      	ldrh	r3, [r3, #12]
 8006660:	461a      	mov	r2, r3
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	fbb3 f3f2 	udiv	r3, r3, r2
 8006668:	68fa      	ldr	r2, [r7, #12]
 800666a:	8952      	ldrh	r2, [r2, #10]
 800666c:	3a01      	subs	r2, #1
 800666e:	4013      	ands	r3, r2
 8006670:	2b00      	cmp	r3, #0
 8006672:	d17b      	bne.n	800676c <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8006674:	687a      	ldr	r2, [r7, #4]
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	699b      	ldr	r3, [r3, #24]
 800667a:	4619      	mov	r1, r3
 800667c:	4610      	mov	r0, r2
 800667e:	f7ff fc0a 	bl	8005e96 <get_fat>
 8006682:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8006684:	697b      	ldr	r3, [r7, #20]
 8006686:	2b01      	cmp	r3, #1
 8006688:	d801      	bhi.n	800668e <dir_next+0xa0>
 800668a:	2302      	movs	r3, #2
 800668c:	e081      	b.n	8006792 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800668e:	697b      	ldr	r3, [r7, #20]
 8006690:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006694:	d101      	bne.n	800669a <dir_next+0xac>
 8006696:	2301      	movs	r3, #1
 8006698:	e07b      	b.n	8006792 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	69db      	ldr	r3, [r3, #28]
 800669e:	697a      	ldr	r2, [r7, #20]
 80066a0:	429a      	cmp	r2, r3
 80066a2:	d359      	bcc.n	8006758 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d104      	bne.n	80066b4 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2200      	movs	r2, #0
 80066ae:	61da      	str	r2, [r3, #28]
 80066b0:	2304      	movs	r3, #4
 80066b2:	e06e      	b.n	8006792 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80066b4:	687a      	ldr	r2, [r7, #4]
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	699b      	ldr	r3, [r3, #24]
 80066ba:	4619      	mov	r1, r3
 80066bc:	4610      	mov	r0, r2
 80066be:	f7ff fe3d 	bl	800633c <create_chain>
 80066c2:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80066c4:	697b      	ldr	r3, [r7, #20]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d101      	bne.n	80066ce <dir_next+0xe0>
 80066ca:	2307      	movs	r3, #7
 80066cc:	e061      	b.n	8006792 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80066ce:	697b      	ldr	r3, [r7, #20]
 80066d0:	2b01      	cmp	r3, #1
 80066d2:	d101      	bne.n	80066d8 <dir_next+0xea>
 80066d4:	2302      	movs	r3, #2
 80066d6:	e05c      	b.n	8006792 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80066d8:	697b      	ldr	r3, [r7, #20]
 80066da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066de:	d101      	bne.n	80066e4 <dir_next+0xf6>
 80066e0:	2301      	movs	r3, #1
 80066e2:	e056      	b.n	8006792 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80066e4:	68f8      	ldr	r0, [r7, #12]
 80066e6:	f7ff fad5 	bl	8005c94 <sync_window>
 80066ea:	4603      	mov	r3, r0
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d001      	beq.n	80066f4 <dir_next+0x106>
 80066f0:	2301      	movs	r3, #1
 80066f2:	e04e      	b.n	8006792 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	899b      	ldrh	r3, [r3, #12]
 80066fe:	461a      	mov	r2, r3
 8006700:	2100      	movs	r1, #0
 8006702:	f7ff f8fe 	bl	8005902 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006706:	2300      	movs	r3, #0
 8006708:	613b      	str	r3, [r7, #16]
 800670a:	6979      	ldr	r1, [r7, #20]
 800670c:	68f8      	ldr	r0, [r7, #12]
 800670e:	f7ff fba3 	bl	8005e58 <clust2sect>
 8006712:	4602      	mov	r2, r0
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	635a      	str	r2, [r3, #52]	; 0x34
 8006718:	e012      	b.n	8006740 <dir_next+0x152>
						fs->wflag = 1;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	2201      	movs	r2, #1
 800671e:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8006720:	68f8      	ldr	r0, [r7, #12]
 8006722:	f7ff fab7 	bl	8005c94 <sync_window>
 8006726:	4603      	mov	r3, r0
 8006728:	2b00      	cmp	r3, #0
 800672a:	d001      	beq.n	8006730 <dir_next+0x142>
 800672c:	2301      	movs	r3, #1
 800672e:	e030      	b.n	8006792 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006730:	693b      	ldr	r3, [r7, #16]
 8006732:	3301      	adds	r3, #1
 8006734:	613b      	str	r3, [r7, #16]
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800673a:	1c5a      	adds	r2, r3, #1
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	635a      	str	r2, [r3, #52]	; 0x34
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	895b      	ldrh	r3, [r3, #10]
 8006744:	461a      	mov	r2, r3
 8006746:	693b      	ldr	r3, [r7, #16]
 8006748:	4293      	cmp	r3, r2
 800674a:	d3e6      	bcc.n	800671a <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006750:	693b      	ldr	r3, [r7, #16]
 8006752:	1ad2      	subs	r2, r2, r3
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	697a      	ldr	r2, [r7, #20]
 800675c:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800675e:	6979      	ldr	r1, [r7, #20]
 8006760:	68f8      	ldr	r0, [r7, #12]
 8006762:	f7ff fb79 	bl	8005e58 <clust2sect>
 8006766:	4602      	mov	r2, r0
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	68ba      	ldr	r2, [r7, #8]
 8006770:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	899b      	ldrh	r3, [r3, #12]
 800677c:	461a      	mov	r2, r3
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	fbb3 f0f2 	udiv	r0, r3, r2
 8006784:	fb00 f202 	mul.w	r2, r0, r2
 8006788:	1a9b      	subs	r3, r3, r2
 800678a:	18ca      	adds	r2, r1, r3
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006790:	2300      	movs	r3, #0
}
 8006792:	4618      	mov	r0, r3
 8006794:	3718      	adds	r7, #24
 8006796:	46bd      	mov	sp, r7
 8006798:	bd80      	pop	{r7, pc}

0800679a <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800679a:	b580      	push	{r7, lr}
 800679c:	b086      	sub	sp, #24
 800679e:	af00      	add	r7, sp, #0
 80067a0:	6078      	str	r0, [r7, #4]
 80067a2:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80067aa:	2100      	movs	r1, #0
 80067ac:	6878      	ldr	r0, [r7, #4]
 80067ae:	f7ff fe95 	bl	80064dc <dir_sdi>
 80067b2:	4603      	mov	r3, r0
 80067b4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80067b6:	7dfb      	ldrb	r3, [r7, #23]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d12b      	bne.n	8006814 <dir_alloc+0x7a>
		n = 0;
 80067bc:	2300      	movs	r3, #0
 80067be:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	69db      	ldr	r3, [r3, #28]
 80067c4:	4619      	mov	r1, r3
 80067c6:	68f8      	ldr	r0, [r7, #12]
 80067c8:	f7ff faa8 	bl	8005d1c <move_window>
 80067cc:	4603      	mov	r3, r0
 80067ce:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80067d0:	7dfb      	ldrb	r3, [r7, #23]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d11d      	bne.n	8006812 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6a1b      	ldr	r3, [r3, #32]
 80067da:	781b      	ldrb	r3, [r3, #0]
 80067dc:	2be5      	cmp	r3, #229	; 0xe5
 80067de:	d004      	beq.n	80067ea <dir_alloc+0x50>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6a1b      	ldr	r3, [r3, #32]
 80067e4:	781b      	ldrb	r3, [r3, #0]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d107      	bne.n	80067fa <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80067ea:	693b      	ldr	r3, [r7, #16]
 80067ec:	3301      	adds	r3, #1
 80067ee:	613b      	str	r3, [r7, #16]
 80067f0:	693a      	ldr	r2, [r7, #16]
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	429a      	cmp	r2, r3
 80067f6:	d102      	bne.n	80067fe <dir_alloc+0x64>
 80067f8:	e00c      	b.n	8006814 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80067fa:	2300      	movs	r3, #0
 80067fc:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80067fe:	2101      	movs	r1, #1
 8006800:	6878      	ldr	r0, [r7, #4]
 8006802:	f7ff fef4 	bl	80065ee <dir_next>
 8006806:	4603      	mov	r3, r0
 8006808:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800680a:	7dfb      	ldrb	r3, [r7, #23]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d0d7      	beq.n	80067c0 <dir_alloc+0x26>
 8006810:	e000      	b.n	8006814 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8006812:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8006814:	7dfb      	ldrb	r3, [r7, #23]
 8006816:	2b04      	cmp	r3, #4
 8006818:	d101      	bne.n	800681e <dir_alloc+0x84>
 800681a:	2307      	movs	r3, #7
 800681c:	75fb      	strb	r3, [r7, #23]
	return res;
 800681e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006820:	4618      	mov	r0, r3
 8006822:	3718      	adds	r7, #24
 8006824:	46bd      	mov	sp, r7
 8006826:	bd80      	pop	{r7, pc}

08006828 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b084      	sub	sp, #16
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
 8006830:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	331a      	adds	r3, #26
 8006836:	4618      	mov	r0, r3
 8006838:	f7fe ffc0 	bl	80057bc <ld_word>
 800683c:	4603      	mov	r3, r0
 800683e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	781b      	ldrb	r3, [r3, #0]
 8006844:	2b03      	cmp	r3, #3
 8006846:	d109      	bne.n	800685c <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	3314      	adds	r3, #20
 800684c:	4618      	mov	r0, r3
 800684e:	f7fe ffb5 	bl	80057bc <ld_word>
 8006852:	4603      	mov	r3, r0
 8006854:	041b      	lsls	r3, r3, #16
 8006856:	68fa      	ldr	r2, [r7, #12]
 8006858:	4313      	orrs	r3, r2
 800685a:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800685c:	68fb      	ldr	r3, [r7, #12]
}
 800685e:	4618      	mov	r0, r3
 8006860:	3710      	adds	r7, #16
 8006862:	46bd      	mov	sp, r7
 8006864:	bd80      	pop	{r7, pc}

08006866 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8006866:	b580      	push	{r7, lr}
 8006868:	b084      	sub	sp, #16
 800686a:	af00      	add	r7, sp, #0
 800686c:	60f8      	str	r0, [r7, #12]
 800686e:	60b9      	str	r1, [r7, #8]
 8006870:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8006872:	68bb      	ldr	r3, [r7, #8]
 8006874:	331a      	adds	r3, #26
 8006876:	687a      	ldr	r2, [r7, #4]
 8006878:	b292      	uxth	r2, r2
 800687a:	4611      	mov	r1, r2
 800687c:	4618      	mov	r0, r3
 800687e:	f7fe ffd8 	bl	8005832 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	781b      	ldrb	r3, [r3, #0]
 8006886:	2b03      	cmp	r3, #3
 8006888:	d109      	bne.n	800689e <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800688a:	68bb      	ldr	r3, [r7, #8]
 800688c:	f103 0214 	add.w	r2, r3, #20
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	0c1b      	lsrs	r3, r3, #16
 8006894:	b29b      	uxth	r3, r3
 8006896:	4619      	mov	r1, r3
 8006898:	4610      	mov	r0, r2
 800689a:	f7fe ffca 	bl	8005832 <st_word>
	}
}
 800689e:	bf00      	nop
 80068a0:	3710      	adds	r7, #16
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd80      	pop	{r7, pc}
	...

080068a8 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 80068a8:	b590      	push	{r4, r7, lr}
 80068aa:	b087      	sub	sp, #28
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
 80068b0:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	331a      	adds	r3, #26
 80068b6:	4618      	mov	r0, r3
 80068b8:	f7fe ff80 	bl	80057bc <ld_word>
 80068bc:	4603      	mov	r3, r0
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d001      	beq.n	80068c6 <cmp_lfn+0x1e>
 80068c2:	2300      	movs	r3, #0
 80068c4:	e059      	b.n	800697a <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	781b      	ldrb	r3, [r3, #0]
 80068ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80068ce:	1e5a      	subs	r2, r3, #1
 80068d0:	4613      	mov	r3, r2
 80068d2:	005b      	lsls	r3, r3, #1
 80068d4:	4413      	add	r3, r2
 80068d6:	009b      	lsls	r3, r3, #2
 80068d8:	4413      	add	r3, r2
 80068da:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80068dc:	2301      	movs	r3, #1
 80068de:	81fb      	strh	r3, [r7, #14]
 80068e0:	2300      	movs	r3, #0
 80068e2:	613b      	str	r3, [r7, #16]
 80068e4:	e033      	b.n	800694e <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80068e6:	4a27      	ldr	r2, [pc, #156]	; (8006984 <cmp_lfn+0xdc>)
 80068e8:	693b      	ldr	r3, [r7, #16]
 80068ea:	4413      	add	r3, r2
 80068ec:	781b      	ldrb	r3, [r3, #0]
 80068ee:	461a      	mov	r2, r3
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	4413      	add	r3, r2
 80068f4:	4618      	mov	r0, r3
 80068f6:	f7fe ff61 	bl	80057bc <ld_word>
 80068fa:	4603      	mov	r3, r0
 80068fc:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 80068fe:	89fb      	ldrh	r3, [r7, #14]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d01a      	beq.n	800693a <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8006904:	697b      	ldr	r3, [r7, #20]
 8006906:	2bfe      	cmp	r3, #254	; 0xfe
 8006908:	d812      	bhi.n	8006930 <cmp_lfn+0x88>
 800690a:	89bb      	ldrh	r3, [r7, #12]
 800690c:	4618      	mov	r0, r3
 800690e:	f002 f861 	bl	80089d4 <ff_wtoupper>
 8006912:	4603      	mov	r3, r0
 8006914:	461c      	mov	r4, r3
 8006916:	697b      	ldr	r3, [r7, #20]
 8006918:	1c5a      	adds	r2, r3, #1
 800691a:	617a      	str	r2, [r7, #20]
 800691c:	005b      	lsls	r3, r3, #1
 800691e:	687a      	ldr	r2, [r7, #4]
 8006920:	4413      	add	r3, r2
 8006922:	881b      	ldrh	r3, [r3, #0]
 8006924:	4618      	mov	r0, r3
 8006926:	f002 f855 	bl	80089d4 <ff_wtoupper>
 800692a:	4603      	mov	r3, r0
 800692c:	429c      	cmp	r4, r3
 800692e:	d001      	beq.n	8006934 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8006930:	2300      	movs	r3, #0
 8006932:	e022      	b.n	800697a <cmp_lfn+0xd2>
			}
			wc = uc;
 8006934:	89bb      	ldrh	r3, [r7, #12]
 8006936:	81fb      	strh	r3, [r7, #14]
 8006938:	e006      	b.n	8006948 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800693a:	89bb      	ldrh	r3, [r7, #12]
 800693c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006940:	4293      	cmp	r3, r2
 8006942:	d001      	beq.n	8006948 <cmp_lfn+0xa0>
 8006944:	2300      	movs	r3, #0
 8006946:	e018      	b.n	800697a <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006948:	693b      	ldr	r3, [r7, #16]
 800694a:	3301      	adds	r3, #1
 800694c:	613b      	str	r3, [r7, #16]
 800694e:	693b      	ldr	r3, [r7, #16]
 8006950:	2b0c      	cmp	r3, #12
 8006952:	d9c8      	bls.n	80068e6 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	781b      	ldrb	r3, [r3, #0]
 8006958:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800695c:	2b00      	cmp	r3, #0
 800695e:	d00b      	beq.n	8006978 <cmp_lfn+0xd0>
 8006960:	89fb      	ldrh	r3, [r7, #14]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d008      	beq.n	8006978 <cmp_lfn+0xd0>
 8006966:	697b      	ldr	r3, [r7, #20]
 8006968:	005b      	lsls	r3, r3, #1
 800696a:	687a      	ldr	r2, [r7, #4]
 800696c:	4413      	add	r3, r2
 800696e:	881b      	ldrh	r3, [r3, #0]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d001      	beq.n	8006978 <cmp_lfn+0xd0>
 8006974:	2300      	movs	r3, #0
 8006976:	e000      	b.n	800697a <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8006978:	2301      	movs	r3, #1
}
 800697a:	4618      	mov	r0, r3
 800697c:	371c      	adds	r7, #28
 800697e:	46bd      	mov	sp, r7
 8006980:	bd90      	pop	{r4, r7, pc}
 8006982:	bf00      	nop
 8006984:	08009724 	.word	0x08009724

08006988 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b088      	sub	sp, #32
 800698c:	af00      	add	r7, sp, #0
 800698e:	60f8      	str	r0, [r7, #12]
 8006990:	60b9      	str	r1, [r7, #8]
 8006992:	4611      	mov	r1, r2
 8006994:	461a      	mov	r2, r3
 8006996:	460b      	mov	r3, r1
 8006998:	71fb      	strb	r3, [r7, #7]
 800699a:	4613      	mov	r3, r2
 800699c:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800699e:	68bb      	ldr	r3, [r7, #8]
 80069a0:	330d      	adds	r3, #13
 80069a2:	79ba      	ldrb	r2, [r7, #6]
 80069a4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	330b      	adds	r3, #11
 80069aa:	220f      	movs	r2, #15
 80069ac:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	330c      	adds	r3, #12
 80069b2:	2200      	movs	r2, #0
 80069b4:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 80069b6:	68bb      	ldr	r3, [r7, #8]
 80069b8:	331a      	adds	r3, #26
 80069ba:	2100      	movs	r1, #0
 80069bc:	4618      	mov	r0, r3
 80069be:	f7fe ff38 	bl	8005832 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80069c2:	79fb      	ldrb	r3, [r7, #7]
 80069c4:	1e5a      	subs	r2, r3, #1
 80069c6:	4613      	mov	r3, r2
 80069c8:	005b      	lsls	r3, r3, #1
 80069ca:	4413      	add	r3, r2
 80069cc:	009b      	lsls	r3, r3, #2
 80069ce:	4413      	add	r3, r2
 80069d0:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80069d2:	2300      	movs	r3, #0
 80069d4:	82fb      	strh	r3, [r7, #22]
 80069d6:	2300      	movs	r3, #0
 80069d8:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80069da:	8afb      	ldrh	r3, [r7, #22]
 80069dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d007      	beq.n	80069f4 <put_lfn+0x6c>
 80069e4:	69fb      	ldr	r3, [r7, #28]
 80069e6:	1c5a      	adds	r2, r3, #1
 80069e8:	61fa      	str	r2, [r7, #28]
 80069ea:	005b      	lsls	r3, r3, #1
 80069ec:	68fa      	ldr	r2, [r7, #12]
 80069ee:	4413      	add	r3, r2
 80069f0:	881b      	ldrh	r3, [r3, #0]
 80069f2:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 80069f4:	4a17      	ldr	r2, [pc, #92]	; (8006a54 <put_lfn+0xcc>)
 80069f6:	69bb      	ldr	r3, [r7, #24]
 80069f8:	4413      	add	r3, r2
 80069fa:	781b      	ldrb	r3, [r3, #0]
 80069fc:	461a      	mov	r2, r3
 80069fe:	68bb      	ldr	r3, [r7, #8]
 8006a00:	4413      	add	r3, r2
 8006a02:	8afa      	ldrh	r2, [r7, #22]
 8006a04:	4611      	mov	r1, r2
 8006a06:	4618      	mov	r0, r3
 8006a08:	f7fe ff13 	bl	8005832 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8006a0c:	8afb      	ldrh	r3, [r7, #22]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d102      	bne.n	8006a18 <put_lfn+0x90>
 8006a12:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006a16:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8006a18:	69bb      	ldr	r3, [r7, #24]
 8006a1a:	3301      	adds	r3, #1
 8006a1c:	61bb      	str	r3, [r7, #24]
 8006a1e:	69bb      	ldr	r3, [r7, #24]
 8006a20:	2b0c      	cmp	r3, #12
 8006a22:	d9da      	bls.n	80069da <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8006a24:	8afb      	ldrh	r3, [r7, #22]
 8006a26:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d006      	beq.n	8006a3c <put_lfn+0xb4>
 8006a2e:	69fb      	ldr	r3, [r7, #28]
 8006a30:	005b      	lsls	r3, r3, #1
 8006a32:	68fa      	ldr	r2, [r7, #12]
 8006a34:	4413      	add	r3, r2
 8006a36:	881b      	ldrh	r3, [r3, #0]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d103      	bne.n	8006a44 <put_lfn+0xbc>
 8006a3c:	79fb      	ldrb	r3, [r7, #7]
 8006a3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a42:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	79fa      	ldrb	r2, [r7, #7]
 8006a48:	701a      	strb	r2, [r3, #0]
}
 8006a4a:	bf00      	nop
 8006a4c:	3720      	adds	r7, #32
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	bd80      	pop	{r7, pc}
 8006a52:	bf00      	nop
 8006a54:	08009724 	.word	0x08009724

08006a58 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b08c      	sub	sp, #48	; 0x30
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	60f8      	str	r0, [r7, #12]
 8006a60:	60b9      	str	r1, [r7, #8]
 8006a62:	607a      	str	r2, [r7, #4]
 8006a64:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8006a66:	220b      	movs	r2, #11
 8006a68:	68b9      	ldr	r1, [r7, #8]
 8006a6a:	68f8      	ldr	r0, [r7, #12]
 8006a6c:	f7fe ff28 	bl	80058c0 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	2b05      	cmp	r3, #5
 8006a74:	d929      	bls.n	8006aca <gen_numname+0x72>
		sr = seq;
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8006a7a:	e020      	b.n	8006abe <gen_numname+0x66>
			wc = *lfn++;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	1c9a      	adds	r2, r3, #2
 8006a80:	607a      	str	r2, [r7, #4]
 8006a82:	881b      	ldrh	r3, [r3, #0]
 8006a84:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8006a86:	2300      	movs	r3, #0
 8006a88:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a8a:	e015      	b.n	8006ab8 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 8006a8c:	69fb      	ldr	r3, [r7, #28]
 8006a8e:	005a      	lsls	r2, r3, #1
 8006a90:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006a92:	f003 0301 	and.w	r3, r3, #1
 8006a96:	4413      	add	r3, r2
 8006a98:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8006a9a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006a9c:	085b      	lsrs	r3, r3, #1
 8006a9e:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8006aa0:	69fb      	ldr	r3, [r7, #28]
 8006aa2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d003      	beq.n	8006ab2 <gen_numname+0x5a>
 8006aaa:	69fa      	ldr	r2, [r7, #28]
 8006aac:	4b30      	ldr	r3, [pc, #192]	; (8006b70 <gen_numname+0x118>)
 8006aae:	4053      	eors	r3, r2
 8006ab0:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8006ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ab4:	3301      	adds	r3, #1
 8006ab6:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aba:	2b0f      	cmp	r3, #15
 8006abc:	d9e6      	bls.n	8006a8c <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	881b      	ldrh	r3, [r3, #0]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d1da      	bne.n	8006a7c <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8006ac6:	69fb      	ldr	r3, [r7, #28]
 8006ac8:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8006aca:	2307      	movs	r3, #7
 8006acc:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	b2db      	uxtb	r3, r3
 8006ad2:	f003 030f 	and.w	r3, r3, #15
 8006ad6:	b2db      	uxtb	r3, r3
 8006ad8:	3330      	adds	r3, #48	; 0x30
 8006ada:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8006ade:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006ae2:	2b39      	cmp	r3, #57	; 0x39
 8006ae4:	d904      	bls.n	8006af0 <gen_numname+0x98>
 8006ae6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006aea:	3307      	adds	r3, #7
 8006aec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8006af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006af2:	1e5a      	subs	r2, r3, #1
 8006af4:	62ba      	str	r2, [r7, #40]	; 0x28
 8006af6:	3330      	adds	r3, #48	; 0x30
 8006af8:	443b      	add	r3, r7
 8006afa:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8006afe:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	091b      	lsrs	r3, r3, #4
 8006b06:	603b      	str	r3, [r7, #0]
	} while (seq);
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d1df      	bne.n	8006ace <gen_numname+0x76>
	ns[i] = '~';
 8006b0e:	f107 0214 	add.w	r2, r7, #20
 8006b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b14:	4413      	add	r3, r2
 8006b16:	227e      	movs	r2, #126	; 0x7e
 8006b18:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	627b      	str	r3, [r7, #36]	; 0x24
 8006b1e:	e002      	b.n	8006b26 <gen_numname+0xce>
 8006b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b22:	3301      	adds	r3, #1
 8006b24:	627b      	str	r3, [r7, #36]	; 0x24
 8006b26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b2a:	429a      	cmp	r2, r3
 8006b2c:	d205      	bcs.n	8006b3a <gen_numname+0xe2>
 8006b2e:	68fa      	ldr	r2, [r7, #12]
 8006b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b32:	4413      	add	r3, r2
 8006b34:	781b      	ldrb	r3, [r3, #0]
 8006b36:	2b20      	cmp	r3, #32
 8006b38:	d1f2      	bne.n	8006b20 <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8006b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b3c:	2b07      	cmp	r3, #7
 8006b3e:	d807      	bhi.n	8006b50 <gen_numname+0xf8>
 8006b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b42:	1c5a      	adds	r2, r3, #1
 8006b44:	62ba      	str	r2, [r7, #40]	; 0x28
 8006b46:	3330      	adds	r3, #48	; 0x30
 8006b48:	443b      	add	r3, r7
 8006b4a:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8006b4e:	e000      	b.n	8006b52 <gen_numname+0xfa>
 8006b50:	2120      	movs	r1, #32
 8006b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b54:	1c5a      	adds	r2, r3, #1
 8006b56:	627a      	str	r2, [r7, #36]	; 0x24
 8006b58:	68fa      	ldr	r2, [r7, #12]
 8006b5a:	4413      	add	r3, r2
 8006b5c:	460a      	mov	r2, r1
 8006b5e:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8006b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b62:	2b07      	cmp	r3, #7
 8006b64:	d9e9      	bls.n	8006b3a <gen_numname+0xe2>
}
 8006b66:	bf00      	nop
 8006b68:	bf00      	nop
 8006b6a:	3730      	adds	r7, #48	; 0x30
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	bd80      	pop	{r7, pc}
 8006b70:	00011021 	.word	0x00011021

08006b74 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8006b74:	b480      	push	{r7}
 8006b76:	b085      	sub	sp, #20
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8006b80:	230b      	movs	r3, #11
 8006b82:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8006b84:	7bfb      	ldrb	r3, [r7, #15]
 8006b86:	b2da      	uxtb	r2, r3
 8006b88:	0852      	lsrs	r2, r2, #1
 8006b8a:	01db      	lsls	r3, r3, #7
 8006b8c:	4313      	orrs	r3, r2
 8006b8e:	b2da      	uxtb	r2, r3
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	1c59      	adds	r1, r3, #1
 8006b94:	6079      	str	r1, [r7, #4]
 8006b96:	781b      	ldrb	r3, [r3, #0]
 8006b98:	4413      	add	r3, r2
 8006b9a:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	3b01      	subs	r3, #1
 8006ba0:	60bb      	str	r3, [r7, #8]
 8006ba2:	68bb      	ldr	r3, [r7, #8]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d1ed      	bne.n	8006b84 <sum_sfn+0x10>
	return sum;
 8006ba8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006baa:	4618      	mov	r0, r3
 8006bac:	3714      	adds	r7, #20
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb4:	4770      	bx	lr

08006bb6 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8006bb6:	b580      	push	{r7, lr}
 8006bb8:	b086      	sub	sp, #24
 8006bba:	af00      	add	r7, sp, #0
 8006bbc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006bc4:	2100      	movs	r1, #0
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	f7ff fc88 	bl	80064dc <dir_sdi>
 8006bcc:	4603      	mov	r3, r0
 8006bce:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8006bd0:	7dfb      	ldrb	r3, [r7, #23]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d001      	beq.n	8006bda <dir_find+0x24>
 8006bd6:	7dfb      	ldrb	r3, [r7, #23]
 8006bd8:	e0a9      	b.n	8006d2e <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006bda:	23ff      	movs	r3, #255	; 0xff
 8006bdc:	753b      	strb	r3, [r7, #20]
 8006bde:	7d3b      	ldrb	r3, [r7, #20]
 8006be0:	757b      	strb	r3, [r7, #21]
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	f04f 32ff 	mov.w	r2, #4294967295
 8006be8:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	69db      	ldr	r3, [r3, #28]
 8006bee:	4619      	mov	r1, r3
 8006bf0:	6938      	ldr	r0, [r7, #16]
 8006bf2:	f7ff f893 	bl	8005d1c <move_window>
 8006bf6:	4603      	mov	r3, r0
 8006bf8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006bfa:	7dfb      	ldrb	r3, [r7, #23]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	f040 8090 	bne.w	8006d22 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6a1b      	ldr	r3, [r3, #32]
 8006c06:	781b      	ldrb	r3, [r3, #0]
 8006c08:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006c0a:	7dbb      	ldrb	r3, [r7, #22]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d102      	bne.n	8006c16 <dir_find+0x60>
 8006c10:	2304      	movs	r3, #4
 8006c12:	75fb      	strb	r3, [r7, #23]
 8006c14:	e08a      	b.n	8006d2c <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6a1b      	ldr	r3, [r3, #32]
 8006c1a:	330b      	adds	r3, #11
 8006c1c:	781b      	ldrb	r3, [r3, #0]
 8006c1e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006c22:	73fb      	strb	r3, [r7, #15]
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	7bfa      	ldrb	r2, [r7, #15]
 8006c28:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8006c2a:	7dbb      	ldrb	r3, [r7, #22]
 8006c2c:	2be5      	cmp	r3, #229	; 0xe5
 8006c2e:	d007      	beq.n	8006c40 <dir_find+0x8a>
 8006c30:	7bfb      	ldrb	r3, [r7, #15]
 8006c32:	f003 0308 	and.w	r3, r3, #8
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d009      	beq.n	8006c4e <dir_find+0x98>
 8006c3a:	7bfb      	ldrb	r3, [r7, #15]
 8006c3c:	2b0f      	cmp	r3, #15
 8006c3e:	d006      	beq.n	8006c4e <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006c40:	23ff      	movs	r3, #255	; 0xff
 8006c42:	757b      	strb	r3, [r7, #21]
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	f04f 32ff 	mov.w	r2, #4294967295
 8006c4a:	631a      	str	r2, [r3, #48]	; 0x30
 8006c4c:	e05e      	b.n	8006d0c <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8006c4e:	7bfb      	ldrb	r3, [r7, #15]
 8006c50:	2b0f      	cmp	r3, #15
 8006c52:	d136      	bne.n	8006cc2 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006c5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d154      	bne.n	8006d0c <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8006c62:	7dbb      	ldrb	r3, [r7, #22]
 8006c64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d00d      	beq.n	8006c88 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6a1b      	ldr	r3, [r3, #32]
 8006c70:	7b5b      	ldrb	r3, [r3, #13]
 8006c72:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8006c74:	7dbb      	ldrb	r3, [r7, #22]
 8006c76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c7a:	75bb      	strb	r3, [r7, #22]
 8006c7c:	7dbb      	ldrb	r3, [r7, #22]
 8006c7e:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	695a      	ldr	r2, [r3, #20]
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8006c88:	7dba      	ldrb	r2, [r7, #22]
 8006c8a:	7d7b      	ldrb	r3, [r7, #21]
 8006c8c:	429a      	cmp	r2, r3
 8006c8e:	d115      	bne.n	8006cbc <dir_find+0x106>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6a1b      	ldr	r3, [r3, #32]
 8006c94:	330d      	adds	r3, #13
 8006c96:	781b      	ldrb	r3, [r3, #0]
 8006c98:	7d3a      	ldrb	r2, [r7, #20]
 8006c9a:	429a      	cmp	r2, r3
 8006c9c:	d10e      	bne.n	8006cbc <dir_find+0x106>
 8006c9e:	693b      	ldr	r3, [r7, #16]
 8006ca0:	691a      	ldr	r2, [r3, #16]
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6a1b      	ldr	r3, [r3, #32]
 8006ca6:	4619      	mov	r1, r3
 8006ca8:	4610      	mov	r0, r2
 8006caa:	f7ff fdfd 	bl	80068a8 <cmp_lfn>
 8006cae:	4603      	mov	r3, r0
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d003      	beq.n	8006cbc <dir_find+0x106>
 8006cb4:	7d7b      	ldrb	r3, [r7, #21]
 8006cb6:	3b01      	subs	r3, #1
 8006cb8:	b2db      	uxtb	r3, r3
 8006cba:	e000      	b.n	8006cbe <dir_find+0x108>
 8006cbc:	23ff      	movs	r3, #255	; 0xff
 8006cbe:	757b      	strb	r3, [r7, #21]
 8006cc0:	e024      	b.n	8006d0c <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8006cc2:	7d7b      	ldrb	r3, [r7, #21]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d109      	bne.n	8006cdc <dir_find+0x126>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6a1b      	ldr	r3, [r3, #32]
 8006ccc:	4618      	mov	r0, r3
 8006cce:	f7ff ff51 	bl	8006b74 <sum_sfn>
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	461a      	mov	r2, r3
 8006cd6:	7d3b      	ldrb	r3, [r7, #20]
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d024      	beq.n	8006d26 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006ce2:	f003 0301 	and.w	r3, r3, #1
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d10a      	bne.n	8006d00 <dir_find+0x14a>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6a18      	ldr	r0, [r3, #32]
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	3324      	adds	r3, #36	; 0x24
 8006cf2:	220b      	movs	r2, #11
 8006cf4:	4619      	mov	r1, r3
 8006cf6:	f7fe fe1f 	bl	8005938 <mem_cmp>
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d014      	beq.n	8006d2a <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006d00:	23ff      	movs	r3, #255	; 0xff
 8006d02:	757b      	strb	r3, [r7, #21]
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	f04f 32ff 	mov.w	r2, #4294967295
 8006d0a:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8006d0c:	2100      	movs	r1, #0
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f7ff fc6d 	bl	80065ee <dir_next>
 8006d14:	4603      	mov	r3, r0
 8006d16:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8006d18:	7dfb      	ldrb	r3, [r7, #23]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	f43f af65 	beq.w	8006bea <dir_find+0x34>
 8006d20:	e004      	b.n	8006d2c <dir_find+0x176>
		if (res != FR_OK) break;
 8006d22:	bf00      	nop
 8006d24:	e002      	b.n	8006d2c <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8006d26:	bf00      	nop
 8006d28:	e000      	b.n	8006d2c <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8006d2a:	bf00      	nop

	return res;
 8006d2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d2e:	4618      	mov	r0, r3
 8006d30:	3718      	adds	r7, #24
 8006d32:	46bd      	mov	sp, r7
 8006d34:	bd80      	pop	{r7, pc}
	...

08006d38 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b08c      	sub	sp, #48	; 0x30
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006d4c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d001      	beq.n	8006d58 <dir_register+0x20>
 8006d54:	2306      	movs	r3, #6
 8006d56:	e0e0      	b.n	8006f1a <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8006d58:	2300      	movs	r3, #0
 8006d5a:	627b      	str	r3, [r7, #36]	; 0x24
 8006d5c:	e002      	b.n	8006d64 <dir_register+0x2c>
 8006d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d60:	3301      	adds	r3, #1
 8006d62:	627b      	str	r3, [r7, #36]	; 0x24
 8006d64:	69fb      	ldr	r3, [r7, #28]
 8006d66:	691a      	ldr	r2, [r3, #16]
 8006d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d6a:	005b      	lsls	r3, r3, #1
 8006d6c:	4413      	add	r3, r2
 8006d6e:	881b      	ldrh	r3, [r3, #0]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d1f4      	bne.n	8006d5e <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8006d7a:	f107 030c 	add.w	r3, r7, #12
 8006d7e:	220c      	movs	r2, #12
 8006d80:	4618      	mov	r0, r3
 8006d82:	f7fe fd9d 	bl	80058c0 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8006d86:	7dfb      	ldrb	r3, [r7, #23]
 8006d88:	f003 0301 	and.w	r3, r3, #1
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d032      	beq.n	8006df6 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2240      	movs	r2, #64	; 0x40
 8006d94:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8006d98:	2301      	movs	r3, #1
 8006d9a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d9c:	e016      	b.n	8006dcc <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8006da4:	69fb      	ldr	r3, [r7, #28]
 8006da6:	691a      	ldr	r2, [r3, #16]
 8006da8:	f107 010c 	add.w	r1, r7, #12
 8006dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dae:	f7ff fe53 	bl	8006a58 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8006db2:	6878      	ldr	r0, [r7, #4]
 8006db4:	f7ff feff 	bl	8006bb6 <dir_find>
 8006db8:	4603      	mov	r3, r0
 8006dba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8006dbe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d106      	bne.n	8006dd4 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8006dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dc8:	3301      	adds	r3, #1
 8006dca:	62bb      	str	r3, [r7, #40]	; 0x28
 8006dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dce:	2b63      	cmp	r3, #99	; 0x63
 8006dd0:	d9e5      	bls.n	8006d9e <dir_register+0x66>
 8006dd2:	e000      	b.n	8006dd6 <dir_register+0x9e>
			if (res != FR_OK) break;
 8006dd4:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8006dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dd8:	2b64      	cmp	r3, #100	; 0x64
 8006dda:	d101      	bne.n	8006de0 <dir_register+0xa8>
 8006ddc:	2307      	movs	r3, #7
 8006dde:	e09c      	b.n	8006f1a <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8006de0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006de4:	2b04      	cmp	r3, #4
 8006de6:	d002      	beq.n	8006dee <dir_register+0xb6>
 8006de8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006dec:	e095      	b.n	8006f1a <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8006dee:	7dfa      	ldrb	r2, [r7, #23]
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8006df6:	7dfb      	ldrb	r3, [r7, #23]
 8006df8:	f003 0302 	and.w	r3, r3, #2
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d007      	beq.n	8006e10 <dir_register+0xd8>
 8006e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e02:	330c      	adds	r3, #12
 8006e04:	4a47      	ldr	r2, [pc, #284]	; (8006f24 <dir_register+0x1ec>)
 8006e06:	fba2 2303 	umull	r2, r3, r2, r3
 8006e0a:	089b      	lsrs	r3, r3, #2
 8006e0c:	3301      	adds	r3, #1
 8006e0e:	e000      	b.n	8006e12 <dir_register+0xda>
 8006e10:	2301      	movs	r3, #1
 8006e12:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8006e14:	6a39      	ldr	r1, [r7, #32]
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	f7ff fcbf 	bl	800679a <dir_alloc>
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8006e22:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d148      	bne.n	8006ebc <dir_register+0x184>
 8006e2a:	6a3b      	ldr	r3, [r7, #32]
 8006e2c:	3b01      	subs	r3, #1
 8006e2e:	623b      	str	r3, [r7, #32]
 8006e30:	6a3b      	ldr	r3, [r7, #32]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d042      	beq.n	8006ebc <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	695a      	ldr	r2, [r3, #20]
 8006e3a:	6a3b      	ldr	r3, [r7, #32]
 8006e3c:	015b      	lsls	r3, r3, #5
 8006e3e:	1ad3      	subs	r3, r2, r3
 8006e40:	4619      	mov	r1, r3
 8006e42:	6878      	ldr	r0, [r7, #4]
 8006e44:	f7ff fb4a 	bl	80064dc <dir_sdi>
 8006e48:	4603      	mov	r3, r0
 8006e4a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8006e4e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d132      	bne.n	8006ebc <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	3324      	adds	r3, #36	; 0x24
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	f7ff fe8a 	bl	8006b74 <sum_sfn>
 8006e60:	4603      	mov	r3, r0
 8006e62:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	69db      	ldr	r3, [r3, #28]
 8006e68:	4619      	mov	r1, r3
 8006e6a:	69f8      	ldr	r0, [r7, #28]
 8006e6c:	f7fe ff56 	bl	8005d1c <move_window>
 8006e70:	4603      	mov	r3, r0
 8006e72:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8006e76:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d11d      	bne.n	8006eba <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8006e7e:	69fb      	ldr	r3, [r7, #28]
 8006e80:	6918      	ldr	r0, [r3, #16]
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6a19      	ldr	r1, [r3, #32]
 8006e86:	6a3b      	ldr	r3, [r7, #32]
 8006e88:	b2da      	uxtb	r2, r3
 8006e8a:	7efb      	ldrb	r3, [r7, #27]
 8006e8c:	f7ff fd7c 	bl	8006988 <put_lfn>
				fs->wflag = 1;
 8006e90:	69fb      	ldr	r3, [r7, #28]
 8006e92:	2201      	movs	r2, #1
 8006e94:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8006e96:	2100      	movs	r1, #0
 8006e98:	6878      	ldr	r0, [r7, #4]
 8006e9a:	f7ff fba8 	bl	80065ee <dir_next>
 8006e9e:	4603      	mov	r3, r0
 8006ea0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8006ea4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d107      	bne.n	8006ebc <dir_register+0x184>
 8006eac:	6a3b      	ldr	r3, [r7, #32]
 8006eae:	3b01      	subs	r3, #1
 8006eb0:	623b      	str	r3, [r7, #32]
 8006eb2:	6a3b      	ldr	r3, [r7, #32]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d1d5      	bne.n	8006e64 <dir_register+0x12c>
 8006eb8:	e000      	b.n	8006ebc <dir_register+0x184>
				if (res != FR_OK) break;
 8006eba:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8006ebc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d128      	bne.n	8006f16 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	69db      	ldr	r3, [r3, #28]
 8006ec8:	4619      	mov	r1, r3
 8006eca:	69f8      	ldr	r0, [r7, #28]
 8006ecc:	f7fe ff26 	bl	8005d1c <move_window>
 8006ed0:	4603      	mov	r3, r0
 8006ed2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8006ed6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d11b      	bne.n	8006f16 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6a1b      	ldr	r3, [r3, #32]
 8006ee2:	2220      	movs	r2, #32
 8006ee4:	2100      	movs	r1, #0
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	f7fe fd0b 	bl	8005902 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	6a18      	ldr	r0, [r3, #32]
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	3324      	adds	r3, #36	; 0x24
 8006ef4:	220b      	movs	r2, #11
 8006ef6:	4619      	mov	r1, r3
 8006ef8:	f7fe fce2 	bl	80058c0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6a1b      	ldr	r3, [r3, #32]
 8006f06:	330c      	adds	r3, #12
 8006f08:	f002 0218 	and.w	r2, r2, #24
 8006f0c:	b2d2      	uxtb	r2, r2
 8006f0e:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8006f10:	69fb      	ldr	r3, [r7, #28]
 8006f12:	2201      	movs	r2, #1
 8006f14:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8006f16:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	3730      	adds	r7, #48	; 0x30
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	bd80      	pop	{r7, pc}
 8006f22:	bf00      	nop
 8006f24:	4ec4ec4f 	.word	0x4ec4ec4f

08006f28 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b08a      	sub	sp, #40	; 0x28
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
 8006f30:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	613b      	str	r3, [r7, #16]
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	691b      	ldr	r3, [r3, #16]
 8006f3e:	60fb      	str	r3, [r7, #12]
 8006f40:	2300      	movs	r3, #0
 8006f42:	617b      	str	r3, [r7, #20]
 8006f44:	697b      	ldr	r3, [r7, #20]
 8006f46:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8006f48:	69bb      	ldr	r3, [r7, #24]
 8006f4a:	1c5a      	adds	r2, r3, #1
 8006f4c:	61ba      	str	r2, [r7, #24]
 8006f4e:	693a      	ldr	r2, [r7, #16]
 8006f50:	4413      	add	r3, r2
 8006f52:	781b      	ldrb	r3, [r3, #0]
 8006f54:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8006f56:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006f58:	2b1f      	cmp	r3, #31
 8006f5a:	d940      	bls.n	8006fde <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8006f5c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006f5e:	2b2f      	cmp	r3, #47	; 0x2f
 8006f60:	d006      	beq.n	8006f70 <create_name+0x48>
 8006f62:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006f64:	2b5c      	cmp	r3, #92	; 0x5c
 8006f66:	d110      	bne.n	8006f8a <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8006f68:	e002      	b.n	8006f70 <create_name+0x48>
 8006f6a:	69bb      	ldr	r3, [r7, #24]
 8006f6c:	3301      	adds	r3, #1
 8006f6e:	61bb      	str	r3, [r7, #24]
 8006f70:	693a      	ldr	r2, [r7, #16]
 8006f72:	69bb      	ldr	r3, [r7, #24]
 8006f74:	4413      	add	r3, r2
 8006f76:	781b      	ldrb	r3, [r3, #0]
 8006f78:	2b2f      	cmp	r3, #47	; 0x2f
 8006f7a:	d0f6      	beq.n	8006f6a <create_name+0x42>
 8006f7c:	693a      	ldr	r2, [r7, #16]
 8006f7e:	69bb      	ldr	r3, [r7, #24]
 8006f80:	4413      	add	r3, r2
 8006f82:	781b      	ldrb	r3, [r3, #0]
 8006f84:	2b5c      	cmp	r3, #92	; 0x5c
 8006f86:	d0f0      	beq.n	8006f6a <create_name+0x42>
			break;
 8006f88:	e02a      	b.n	8006fe0 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8006f8a:	697b      	ldr	r3, [r7, #20]
 8006f8c:	2bfe      	cmp	r3, #254	; 0xfe
 8006f8e:	d901      	bls.n	8006f94 <create_name+0x6c>
 8006f90:	2306      	movs	r3, #6
 8006f92:	e17d      	b.n	8007290 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8006f94:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006f96:	b2db      	uxtb	r3, r3
 8006f98:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8006f9a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006f9c:	2101      	movs	r1, #1
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	f001 fcdc 	bl	800895c <ff_convert>
 8006fa4:	4603      	mov	r3, r0
 8006fa6:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8006fa8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d101      	bne.n	8006fb2 <create_name+0x8a>
 8006fae:	2306      	movs	r3, #6
 8006fb0:	e16e      	b.n	8007290 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8006fb2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006fb4:	2b7f      	cmp	r3, #127	; 0x7f
 8006fb6:	d809      	bhi.n	8006fcc <create_name+0xa4>
 8006fb8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006fba:	4619      	mov	r1, r3
 8006fbc:	488d      	ldr	r0, [pc, #564]	; (80071f4 <create_name+0x2cc>)
 8006fbe:	f7fe fce2 	bl	8005986 <chk_chr>
 8006fc2:	4603      	mov	r3, r0
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d001      	beq.n	8006fcc <create_name+0xa4>
 8006fc8:	2306      	movs	r3, #6
 8006fca:	e161      	b.n	8007290 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8006fcc:	697b      	ldr	r3, [r7, #20]
 8006fce:	1c5a      	adds	r2, r3, #1
 8006fd0:	617a      	str	r2, [r7, #20]
 8006fd2:	005b      	lsls	r3, r3, #1
 8006fd4:	68fa      	ldr	r2, [r7, #12]
 8006fd6:	4413      	add	r3, r2
 8006fd8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006fda:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8006fdc:	e7b4      	b.n	8006f48 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8006fde:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8006fe0:	693a      	ldr	r2, [r7, #16]
 8006fe2:	69bb      	ldr	r3, [r7, #24]
 8006fe4:	441a      	add	r2, r3
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8006fea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006fec:	2b1f      	cmp	r3, #31
 8006fee:	d801      	bhi.n	8006ff4 <create_name+0xcc>
 8006ff0:	2304      	movs	r3, #4
 8006ff2:	e000      	b.n	8006ff6 <create_name+0xce>
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8006ffa:	e011      	b.n	8007020 <create_name+0xf8>
		w = lfn[di - 1];
 8006ffc:	697a      	ldr	r2, [r7, #20]
 8006ffe:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8007002:	4413      	add	r3, r2
 8007004:	005b      	lsls	r3, r3, #1
 8007006:	68fa      	ldr	r2, [r7, #12]
 8007008:	4413      	add	r3, r2
 800700a:	881b      	ldrh	r3, [r3, #0]
 800700c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800700e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007010:	2b20      	cmp	r3, #32
 8007012:	d002      	beq.n	800701a <create_name+0xf2>
 8007014:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007016:	2b2e      	cmp	r3, #46	; 0x2e
 8007018:	d106      	bne.n	8007028 <create_name+0x100>
		di--;
 800701a:	697b      	ldr	r3, [r7, #20]
 800701c:	3b01      	subs	r3, #1
 800701e:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8007020:	697b      	ldr	r3, [r7, #20]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d1ea      	bne.n	8006ffc <create_name+0xd4>
 8007026:	e000      	b.n	800702a <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8007028:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800702a:	697b      	ldr	r3, [r7, #20]
 800702c:	005b      	lsls	r3, r3, #1
 800702e:	68fa      	ldr	r2, [r7, #12]
 8007030:	4413      	add	r3, r2
 8007032:	2200      	movs	r2, #0
 8007034:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8007036:	697b      	ldr	r3, [r7, #20]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d101      	bne.n	8007040 <create_name+0x118>
 800703c:	2306      	movs	r3, #6
 800703e:	e127      	b.n	8007290 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	3324      	adds	r3, #36	; 0x24
 8007044:	220b      	movs	r2, #11
 8007046:	2120      	movs	r1, #32
 8007048:	4618      	mov	r0, r3
 800704a:	f7fe fc5a 	bl	8005902 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800704e:	2300      	movs	r3, #0
 8007050:	61bb      	str	r3, [r7, #24]
 8007052:	e002      	b.n	800705a <create_name+0x132>
 8007054:	69bb      	ldr	r3, [r7, #24]
 8007056:	3301      	adds	r3, #1
 8007058:	61bb      	str	r3, [r7, #24]
 800705a:	69bb      	ldr	r3, [r7, #24]
 800705c:	005b      	lsls	r3, r3, #1
 800705e:	68fa      	ldr	r2, [r7, #12]
 8007060:	4413      	add	r3, r2
 8007062:	881b      	ldrh	r3, [r3, #0]
 8007064:	2b20      	cmp	r3, #32
 8007066:	d0f5      	beq.n	8007054 <create_name+0x12c>
 8007068:	69bb      	ldr	r3, [r7, #24]
 800706a:	005b      	lsls	r3, r3, #1
 800706c:	68fa      	ldr	r2, [r7, #12]
 800706e:	4413      	add	r3, r2
 8007070:	881b      	ldrh	r3, [r3, #0]
 8007072:	2b2e      	cmp	r3, #46	; 0x2e
 8007074:	d0ee      	beq.n	8007054 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8007076:	69bb      	ldr	r3, [r7, #24]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d009      	beq.n	8007090 <create_name+0x168>
 800707c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007080:	f043 0303 	orr.w	r3, r3, #3
 8007084:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8007088:	e002      	b.n	8007090 <create_name+0x168>
 800708a:	697b      	ldr	r3, [r7, #20]
 800708c:	3b01      	subs	r3, #1
 800708e:	617b      	str	r3, [r7, #20]
 8007090:	697b      	ldr	r3, [r7, #20]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d009      	beq.n	80070aa <create_name+0x182>
 8007096:	697a      	ldr	r2, [r7, #20]
 8007098:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800709c:	4413      	add	r3, r2
 800709e:	005b      	lsls	r3, r3, #1
 80070a0:	68fa      	ldr	r2, [r7, #12]
 80070a2:	4413      	add	r3, r2
 80070a4:	881b      	ldrh	r3, [r3, #0]
 80070a6:	2b2e      	cmp	r3, #46	; 0x2e
 80070a8:	d1ef      	bne.n	800708a <create_name+0x162>

	i = b = 0; ni = 8;
 80070aa:	2300      	movs	r3, #0
 80070ac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80070b0:	2300      	movs	r3, #0
 80070b2:	623b      	str	r3, [r7, #32]
 80070b4:	2308      	movs	r3, #8
 80070b6:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 80070b8:	69bb      	ldr	r3, [r7, #24]
 80070ba:	1c5a      	adds	r2, r3, #1
 80070bc:	61ba      	str	r2, [r7, #24]
 80070be:	005b      	lsls	r3, r3, #1
 80070c0:	68fa      	ldr	r2, [r7, #12]
 80070c2:	4413      	add	r3, r2
 80070c4:	881b      	ldrh	r3, [r3, #0]
 80070c6:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 80070c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	f000 8090 	beq.w	80071f0 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80070d0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80070d2:	2b20      	cmp	r3, #32
 80070d4:	d006      	beq.n	80070e4 <create_name+0x1bc>
 80070d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80070d8:	2b2e      	cmp	r3, #46	; 0x2e
 80070da:	d10a      	bne.n	80070f2 <create_name+0x1ca>
 80070dc:	69ba      	ldr	r2, [r7, #24]
 80070de:	697b      	ldr	r3, [r7, #20]
 80070e0:	429a      	cmp	r2, r3
 80070e2:	d006      	beq.n	80070f2 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 80070e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80070e8:	f043 0303 	orr.w	r3, r3, #3
 80070ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80070f0:	e07d      	b.n	80071ee <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 80070f2:	6a3a      	ldr	r2, [r7, #32]
 80070f4:	69fb      	ldr	r3, [r7, #28]
 80070f6:	429a      	cmp	r2, r3
 80070f8:	d203      	bcs.n	8007102 <create_name+0x1da>
 80070fa:	69ba      	ldr	r2, [r7, #24]
 80070fc:	697b      	ldr	r3, [r7, #20]
 80070fe:	429a      	cmp	r2, r3
 8007100:	d123      	bne.n	800714a <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8007102:	69fb      	ldr	r3, [r7, #28]
 8007104:	2b0b      	cmp	r3, #11
 8007106:	d106      	bne.n	8007116 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8007108:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800710c:	f043 0303 	orr.w	r3, r3, #3
 8007110:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007114:	e075      	b.n	8007202 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8007116:	69ba      	ldr	r2, [r7, #24]
 8007118:	697b      	ldr	r3, [r7, #20]
 800711a:	429a      	cmp	r2, r3
 800711c:	d005      	beq.n	800712a <create_name+0x202>
 800711e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007122:	f043 0303 	orr.w	r3, r3, #3
 8007126:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800712a:	69ba      	ldr	r2, [r7, #24]
 800712c:	697b      	ldr	r3, [r7, #20]
 800712e:	429a      	cmp	r2, r3
 8007130:	d866      	bhi.n	8007200 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8007132:	697b      	ldr	r3, [r7, #20]
 8007134:	61bb      	str	r3, [r7, #24]
 8007136:	2308      	movs	r3, #8
 8007138:	623b      	str	r3, [r7, #32]
 800713a:	230b      	movs	r3, #11
 800713c:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800713e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007142:	009b      	lsls	r3, r3, #2
 8007144:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007148:	e051      	b.n	80071ee <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800714a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800714c:	2b7f      	cmp	r3, #127	; 0x7f
 800714e:	d914      	bls.n	800717a <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8007150:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007152:	2100      	movs	r1, #0
 8007154:	4618      	mov	r0, r3
 8007156:	f001 fc01 	bl	800895c <ff_convert>
 800715a:	4603      	mov	r3, r0
 800715c:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800715e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007160:	2b00      	cmp	r3, #0
 8007162:	d004      	beq.n	800716e <create_name+0x246>
 8007164:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007166:	3b80      	subs	r3, #128	; 0x80
 8007168:	4a23      	ldr	r2, [pc, #140]	; (80071f8 <create_name+0x2d0>)
 800716a:	5cd3      	ldrb	r3, [r2, r3]
 800716c:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800716e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007172:	f043 0302 	orr.w	r3, r3, #2
 8007176:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800717a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800717c:	2b00      	cmp	r3, #0
 800717e:	d007      	beq.n	8007190 <create_name+0x268>
 8007180:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007182:	4619      	mov	r1, r3
 8007184:	481d      	ldr	r0, [pc, #116]	; (80071fc <create_name+0x2d4>)
 8007186:	f7fe fbfe 	bl	8005986 <chk_chr>
 800718a:	4603      	mov	r3, r0
 800718c:	2b00      	cmp	r3, #0
 800718e:	d008      	beq.n	80071a2 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8007190:	235f      	movs	r3, #95	; 0x5f
 8007192:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007194:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007198:	f043 0303 	orr.w	r3, r3, #3
 800719c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80071a0:	e01b      	b.n	80071da <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 80071a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80071a4:	2b40      	cmp	r3, #64	; 0x40
 80071a6:	d909      	bls.n	80071bc <create_name+0x294>
 80071a8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80071aa:	2b5a      	cmp	r3, #90	; 0x5a
 80071ac:	d806      	bhi.n	80071bc <create_name+0x294>
					b |= 2;
 80071ae:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80071b2:	f043 0302 	orr.w	r3, r3, #2
 80071b6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80071ba:	e00e      	b.n	80071da <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 80071bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80071be:	2b60      	cmp	r3, #96	; 0x60
 80071c0:	d90b      	bls.n	80071da <create_name+0x2b2>
 80071c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80071c4:	2b7a      	cmp	r3, #122	; 0x7a
 80071c6:	d808      	bhi.n	80071da <create_name+0x2b2>
						b |= 1; w -= 0x20;
 80071c8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80071cc:	f043 0301 	orr.w	r3, r3, #1
 80071d0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80071d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80071d6:	3b20      	subs	r3, #32
 80071d8:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 80071da:	6a3b      	ldr	r3, [r7, #32]
 80071dc:	1c5a      	adds	r2, r3, #1
 80071de:	623a      	str	r2, [r7, #32]
 80071e0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80071e2:	b2d1      	uxtb	r1, r2
 80071e4:	687a      	ldr	r2, [r7, #4]
 80071e6:	4413      	add	r3, r2
 80071e8:	460a      	mov	r2, r1
 80071ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 80071ee:	e763      	b.n	80070b8 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 80071f0:	bf00      	nop
 80071f2:	e006      	b.n	8007202 <create_name+0x2da>
 80071f4:	08009644 	.word	0x08009644
 80071f8:	080096a4 	.word	0x080096a4
 80071fc:	08009650 	.word	0x08009650
			if (si > di) break;			/* No extension */
 8007200:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007208:	2be5      	cmp	r3, #229	; 0xe5
 800720a:	d103      	bne.n	8007214 <create_name+0x2ec>
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2205      	movs	r2, #5
 8007210:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8007214:	69fb      	ldr	r3, [r7, #28]
 8007216:	2b08      	cmp	r3, #8
 8007218:	d104      	bne.n	8007224 <create_name+0x2fc>
 800721a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800721e:	009b      	lsls	r3, r3, #2
 8007220:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8007224:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007228:	f003 030c 	and.w	r3, r3, #12
 800722c:	2b0c      	cmp	r3, #12
 800722e:	d005      	beq.n	800723c <create_name+0x314>
 8007230:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007234:	f003 0303 	and.w	r3, r3, #3
 8007238:	2b03      	cmp	r3, #3
 800723a:	d105      	bne.n	8007248 <create_name+0x320>
 800723c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007240:	f043 0302 	orr.w	r3, r3, #2
 8007244:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8007248:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800724c:	f003 0302 	and.w	r3, r3, #2
 8007250:	2b00      	cmp	r3, #0
 8007252:	d117      	bne.n	8007284 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8007254:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007258:	f003 0303 	and.w	r3, r3, #3
 800725c:	2b01      	cmp	r3, #1
 800725e:	d105      	bne.n	800726c <create_name+0x344>
 8007260:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007264:	f043 0310 	orr.w	r3, r3, #16
 8007268:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800726c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007270:	f003 030c 	and.w	r3, r3, #12
 8007274:	2b04      	cmp	r3, #4
 8007276:	d105      	bne.n	8007284 <create_name+0x35c>
 8007278:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800727c:	f043 0308 	orr.w	r3, r3, #8
 8007280:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800728a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800728e:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8007290:	4618      	mov	r0, r3
 8007292:	3728      	adds	r7, #40	; 0x28
 8007294:	46bd      	mov	sp, r7
 8007296:	bd80      	pop	{r7, pc}

08007298 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b086      	sub	sp, #24
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
 80072a0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80072a6:	693b      	ldr	r3, [r7, #16]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80072ac:	e002      	b.n	80072b4 <follow_path+0x1c>
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	3301      	adds	r3, #1
 80072b2:	603b      	str	r3, [r7, #0]
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	781b      	ldrb	r3, [r3, #0]
 80072b8:	2b2f      	cmp	r3, #47	; 0x2f
 80072ba:	d0f8      	beq.n	80072ae <follow_path+0x16>
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	781b      	ldrb	r3, [r3, #0]
 80072c0:	2b5c      	cmp	r3, #92	; 0x5c
 80072c2:	d0f4      	beq.n	80072ae <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80072c4:	693b      	ldr	r3, [r7, #16]
 80072c6:	2200      	movs	r2, #0
 80072c8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	781b      	ldrb	r3, [r3, #0]
 80072ce:	2b1f      	cmp	r3, #31
 80072d0:	d80a      	bhi.n	80072e8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2280      	movs	r2, #128	; 0x80
 80072d6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80072da:	2100      	movs	r1, #0
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	f7ff f8fd 	bl	80064dc <dir_sdi>
 80072e2:	4603      	mov	r3, r0
 80072e4:	75fb      	strb	r3, [r7, #23]
 80072e6:	e048      	b.n	800737a <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80072e8:	463b      	mov	r3, r7
 80072ea:	4619      	mov	r1, r3
 80072ec:	6878      	ldr	r0, [r7, #4]
 80072ee:	f7ff fe1b 	bl	8006f28 <create_name>
 80072f2:	4603      	mov	r3, r0
 80072f4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80072f6:	7dfb      	ldrb	r3, [r7, #23]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d139      	bne.n	8007370 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 80072fc:	6878      	ldr	r0, [r7, #4]
 80072fe:	f7ff fc5a 	bl	8006bb6 <dir_find>
 8007302:	4603      	mov	r3, r0
 8007304:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800730c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800730e:	7dfb      	ldrb	r3, [r7, #23]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d00a      	beq.n	800732a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007314:	7dfb      	ldrb	r3, [r7, #23]
 8007316:	2b04      	cmp	r3, #4
 8007318:	d12c      	bne.n	8007374 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800731a:	7afb      	ldrb	r3, [r7, #11]
 800731c:	f003 0304 	and.w	r3, r3, #4
 8007320:	2b00      	cmp	r3, #0
 8007322:	d127      	bne.n	8007374 <follow_path+0xdc>
 8007324:	2305      	movs	r3, #5
 8007326:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8007328:	e024      	b.n	8007374 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800732a:	7afb      	ldrb	r3, [r7, #11]
 800732c:	f003 0304 	and.w	r3, r3, #4
 8007330:	2b00      	cmp	r3, #0
 8007332:	d121      	bne.n	8007378 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8007334:	693b      	ldr	r3, [r7, #16]
 8007336:	799b      	ldrb	r3, [r3, #6]
 8007338:	f003 0310 	and.w	r3, r3, #16
 800733c:	2b00      	cmp	r3, #0
 800733e:	d102      	bne.n	8007346 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8007340:	2305      	movs	r3, #5
 8007342:	75fb      	strb	r3, [r7, #23]
 8007344:	e019      	b.n	800737a <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	695b      	ldr	r3, [r3, #20]
 8007350:	68fa      	ldr	r2, [r7, #12]
 8007352:	8992      	ldrh	r2, [r2, #12]
 8007354:	fbb3 f0f2 	udiv	r0, r3, r2
 8007358:	fb00 f202 	mul.w	r2, r0, r2
 800735c:	1a9b      	subs	r3, r3, r2
 800735e:	440b      	add	r3, r1
 8007360:	4619      	mov	r1, r3
 8007362:	68f8      	ldr	r0, [r7, #12]
 8007364:	f7ff fa60 	bl	8006828 <ld_clust>
 8007368:	4602      	mov	r2, r0
 800736a:	693b      	ldr	r3, [r7, #16]
 800736c:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800736e:	e7bb      	b.n	80072e8 <follow_path+0x50>
			if (res != FR_OK) break;
 8007370:	bf00      	nop
 8007372:	e002      	b.n	800737a <follow_path+0xe2>
				break;
 8007374:	bf00      	nop
 8007376:	e000      	b.n	800737a <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007378:	bf00      	nop
			}
		}
	}

	return res;
 800737a:	7dfb      	ldrb	r3, [r7, #23]
}
 800737c:	4618      	mov	r0, r3
 800737e:	3718      	adds	r7, #24
 8007380:	46bd      	mov	sp, r7
 8007382:	bd80      	pop	{r7, pc}

08007384 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007384:	b480      	push	{r7}
 8007386:	b087      	sub	sp, #28
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800738c:	f04f 33ff 	mov.w	r3, #4294967295
 8007390:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d031      	beq.n	80073fe <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	617b      	str	r3, [r7, #20]
 80073a0:	e002      	b.n	80073a8 <get_ldnumber+0x24>
 80073a2:	697b      	ldr	r3, [r7, #20]
 80073a4:	3301      	adds	r3, #1
 80073a6:	617b      	str	r3, [r7, #20]
 80073a8:	697b      	ldr	r3, [r7, #20]
 80073aa:	781b      	ldrb	r3, [r3, #0]
 80073ac:	2b1f      	cmp	r3, #31
 80073ae:	d903      	bls.n	80073b8 <get_ldnumber+0x34>
 80073b0:	697b      	ldr	r3, [r7, #20]
 80073b2:	781b      	ldrb	r3, [r3, #0]
 80073b4:	2b3a      	cmp	r3, #58	; 0x3a
 80073b6:	d1f4      	bne.n	80073a2 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80073b8:	697b      	ldr	r3, [r7, #20]
 80073ba:	781b      	ldrb	r3, [r3, #0]
 80073bc:	2b3a      	cmp	r3, #58	; 0x3a
 80073be:	d11c      	bne.n	80073fa <get_ldnumber+0x76>
			tp = *path;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	1c5a      	adds	r2, r3, #1
 80073ca:	60fa      	str	r2, [r7, #12]
 80073cc:	781b      	ldrb	r3, [r3, #0]
 80073ce:	3b30      	subs	r3, #48	; 0x30
 80073d0:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	2b09      	cmp	r3, #9
 80073d6:	d80e      	bhi.n	80073f6 <get_ldnumber+0x72>
 80073d8:	68fa      	ldr	r2, [r7, #12]
 80073da:	697b      	ldr	r3, [r7, #20]
 80073dc:	429a      	cmp	r2, r3
 80073de:	d10a      	bne.n	80073f6 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80073e0:	68bb      	ldr	r3, [r7, #8]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d107      	bne.n	80073f6 <get_ldnumber+0x72>
					vol = (int)i;
 80073e6:	68bb      	ldr	r3, [r7, #8]
 80073e8:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80073ea:	697b      	ldr	r3, [r7, #20]
 80073ec:	3301      	adds	r3, #1
 80073ee:	617b      	str	r3, [r7, #20]
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	697a      	ldr	r2, [r7, #20]
 80073f4:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80073f6:	693b      	ldr	r3, [r7, #16]
 80073f8:	e002      	b.n	8007400 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80073fa:	2300      	movs	r3, #0
 80073fc:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80073fe:	693b      	ldr	r3, [r7, #16]
}
 8007400:	4618      	mov	r0, r3
 8007402:	371c      	adds	r7, #28
 8007404:	46bd      	mov	sp, r7
 8007406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740a:	4770      	bx	lr

0800740c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b082      	sub	sp, #8
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
 8007414:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2200      	movs	r2, #0
 800741a:	70da      	strb	r2, [r3, #3]
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	f04f 32ff 	mov.w	r2, #4294967295
 8007422:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8007424:	6839      	ldr	r1, [r7, #0]
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	f7fe fc78 	bl	8005d1c <move_window>
 800742c:	4603      	mov	r3, r0
 800742e:	2b00      	cmp	r3, #0
 8007430:	d001      	beq.n	8007436 <check_fs+0x2a>
 8007432:	2304      	movs	r3, #4
 8007434:	e038      	b.n	80074a8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	3338      	adds	r3, #56	; 0x38
 800743a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800743e:	4618      	mov	r0, r3
 8007440:	f7fe f9bc 	bl	80057bc <ld_word>
 8007444:	4603      	mov	r3, r0
 8007446:	461a      	mov	r2, r3
 8007448:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800744c:	429a      	cmp	r2, r3
 800744e:	d001      	beq.n	8007454 <check_fs+0x48>
 8007450:	2303      	movs	r3, #3
 8007452:	e029      	b.n	80074a8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800745a:	2be9      	cmp	r3, #233	; 0xe9
 800745c:	d009      	beq.n	8007472 <check_fs+0x66>
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007464:	2beb      	cmp	r3, #235	; 0xeb
 8007466:	d11e      	bne.n	80074a6 <check_fs+0x9a>
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800746e:	2b90      	cmp	r3, #144	; 0x90
 8007470:	d119      	bne.n	80074a6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	3338      	adds	r3, #56	; 0x38
 8007476:	3336      	adds	r3, #54	; 0x36
 8007478:	4618      	mov	r0, r3
 800747a:	f7fe f9b7 	bl	80057ec <ld_dword>
 800747e:	4603      	mov	r3, r0
 8007480:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007484:	4a0a      	ldr	r2, [pc, #40]	; (80074b0 <check_fs+0xa4>)
 8007486:	4293      	cmp	r3, r2
 8007488:	d101      	bne.n	800748e <check_fs+0x82>
 800748a:	2300      	movs	r3, #0
 800748c:	e00c      	b.n	80074a8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	3338      	adds	r3, #56	; 0x38
 8007492:	3352      	adds	r3, #82	; 0x52
 8007494:	4618      	mov	r0, r3
 8007496:	f7fe f9a9 	bl	80057ec <ld_dword>
 800749a:	4603      	mov	r3, r0
 800749c:	4a05      	ldr	r2, [pc, #20]	; (80074b4 <check_fs+0xa8>)
 800749e:	4293      	cmp	r3, r2
 80074a0:	d101      	bne.n	80074a6 <check_fs+0x9a>
 80074a2:	2300      	movs	r3, #0
 80074a4:	e000      	b.n	80074a8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80074a6:	2302      	movs	r3, #2
}
 80074a8:	4618      	mov	r0, r3
 80074aa:	3708      	adds	r7, #8
 80074ac:	46bd      	mov	sp, r7
 80074ae:	bd80      	pop	{r7, pc}
 80074b0:	00544146 	.word	0x00544146
 80074b4:	33544146 	.word	0x33544146

080074b8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b096      	sub	sp, #88	; 0x58
 80074bc:	af00      	add	r7, sp, #0
 80074be:	60f8      	str	r0, [r7, #12]
 80074c0:	60b9      	str	r1, [r7, #8]
 80074c2:	4613      	mov	r3, r2
 80074c4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80074c6:	68bb      	ldr	r3, [r7, #8]
 80074c8:	2200      	movs	r2, #0
 80074ca:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80074cc:	68f8      	ldr	r0, [r7, #12]
 80074ce:	f7ff ff59 	bl	8007384 <get_ldnumber>
 80074d2:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80074d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	da01      	bge.n	80074de <find_volume+0x26>
 80074da:	230b      	movs	r3, #11
 80074dc:	e265      	b.n	80079aa <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80074de:	4a9f      	ldr	r2, [pc, #636]	; (800775c <find_volume+0x2a4>)
 80074e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80074e6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80074e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d101      	bne.n	80074f2 <find_volume+0x3a>
 80074ee:	230c      	movs	r3, #12
 80074f0:	e25b      	b.n	80079aa <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80074f2:	68bb      	ldr	r3, [r7, #8]
 80074f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80074f6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80074f8:	79fb      	ldrb	r3, [r7, #7]
 80074fa:	f023 0301 	bic.w	r3, r3, #1
 80074fe:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8007500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007502:	781b      	ldrb	r3, [r3, #0]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d01a      	beq.n	800753e <find_volume+0x86>
		stat = disk_status(fs->drv);
 8007508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800750a:	785b      	ldrb	r3, [r3, #1]
 800750c:	4618      	mov	r0, r3
 800750e:	f7fe f8b7 	bl	8005680 <disk_status>
 8007512:	4603      	mov	r3, r0
 8007514:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8007518:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800751c:	f003 0301 	and.w	r3, r3, #1
 8007520:	2b00      	cmp	r3, #0
 8007522:	d10c      	bne.n	800753e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8007524:	79fb      	ldrb	r3, [r7, #7]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d007      	beq.n	800753a <find_volume+0x82>
 800752a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800752e:	f003 0304 	and.w	r3, r3, #4
 8007532:	2b00      	cmp	r3, #0
 8007534:	d001      	beq.n	800753a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8007536:	230a      	movs	r3, #10
 8007538:	e237      	b.n	80079aa <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800753a:	2300      	movs	r3, #0
 800753c:	e235      	b.n	80079aa <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800753e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007540:	2200      	movs	r2, #0
 8007542:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007544:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007546:	b2da      	uxtb	r2, r3
 8007548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800754a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800754c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800754e:	785b      	ldrb	r3, [r3, #1]
 8007550:	4618      	mov	r0, r3
 8007552:	f7fe f8af 	bl	80056b4 <disk_initialize>
 8007556:	4603      	mov	r3, r0
 8007558:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800755c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007560:	f003 0301 	and.w	r3, r3, #1
 8007564:	2b00      	cmp	r3, #0
 8007566:	d001      	beq.n	800756c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007568:	2303      	movs	r3, #3
 800756a:	e21e      	b.n	80079aa <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800756c:	79fb      	ldrb	r3, [r7, #7]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d007      	beq.n	8007582 <find_volume+0xca>
 8007572:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007576:	f003 0304 	and.w	r3, r3, #4
 800757a:	2b00      	cmp	r3, #0
 800757c:	d001      	beq.n	8007582 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800757e:	230a      	movs	r3, #10
 8007580:	e213      	b.n	80079aa <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8007582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007584:	7858      	ldrb	r0, [r3, #1]
 8007586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007588:	330c      	adds	r3, #12
 800758a:	461a      	mov	r2, r3
 800758c:	2102      	movs	r1, #2
 800758e:	f7fe f8f7 	bl	8005780 <disk_ioctl>
 8007592:	4603      	mov	r3, r0
 8007594:	2b00      	cmp	r3, #0
 8007596:	d001      	beq.n	800759c <find_volume+0xe4>
 8007598:	2301      	movs	r3, #1
 800759a:	e206      	b.n	80079aa <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800759c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800759e:	899b      	ldrh	r3, [r3, #12]
 80075a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075a4:	d80d      	bhi.n	80075c2 <find_volume+0x10a>
 80075a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075a8:	899b      	ldrh	r3, [r3, #12]
 80075aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80075ae:	d308      	bcc.n	80075c2 <find_volume+0x10a>
 80075b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075b2:	899b      	ldrh	r3, [r3, #12]
 80075b4:	461a      	mov	r2, r3
 80075b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075b8:	899b      	ldrh	r3, [r3, #12]
 80075ba:	3b01      	subs	r3, #1
 80075bc:	4013      	ands	r3, r2
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d001      	beq.n	80075c6 <find_volume+0x10e>
 80075c2:	2301      	movs	r3, #1
 80075c4:	e1f1      	b.n	80079aa <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80075c6:	2300      	movs	r3, #0
 80075c8:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80075ca:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80075cc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80075ce:	f7ff ff1d 	bl	800740c <check_fs>
 80075d2:	4603      	mov	r3, r0
 80075d4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80075d8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80075dc:	2b02      	cmp	r3, #2
 80075de:	d149      	bne.n	8007674 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80075e0:	2300      	movs	r3, #0
 80075e2:	643b      	str	r3, [r7, #64]	; 0x40
 80075e4:	e01e      	b.n	8007624 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80075e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075e8:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80075ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80075ee:	011b      	lsls	r3, r3, #4
 80075f0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80075f4:	4413      	add	r3, r2
 80075f6:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80075f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075fa:	3304      	adds	r3, #4
 80075fc:	781b      	ldrb	r3, [r3, #0]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d006      	beq.n	8007610 <find_volume+0x158>
 8007602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007604:	3308      	adds	r3, #8
 8007606:	4618      	mov	r0, r3
 8007608:	f7fe f8f0 	bl	80057ec <ld_dword>
 800760c:	4602      	mov	r2, r0
 800760e:	e000      	b.n	8007612 <find_volume+0x15a>
 8007610:	2200      	movs	r2, #0
 8007612:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007614:	009b      	lsls	r3, r3, #2
 8007616:	3358      	adds	r3, #88	; 0x58
 8007618:	443b      	add	r3, r7
 800761a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800761e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007620:	3301      	adds	r3, #1
 8007622:	643b      	str	r3, [r7, #64]	; 0x40
 8007624:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007626:	2b03      	cmp	r3, #3
 8007628:	d9dd      	bls.n	80075e6 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800762a:	2300      	movs	r3, #0
 800762c:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800762e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007630:	2b00      	cmp	r3, #0
 8007632:	d002      	beq.n	800763a <find_volume+0x182>
 8007634:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007636:	3b01      	subs	r3, #1
 8007638:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800763a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800763c:	009b      	lsls	r3, r3, #2
 800763e:	3358      	adds	r3, #88	; 0x58
 8007640:	443b      	add	r3, r7
 8007642:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007646:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8007648:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800764a:	2b00      	cmp	r3, #0
 800764c:	d005      	beq.n	800765a <find_volume+0x1a2>
 800764e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007650:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007652:	f7ff fedb 	bl	800740c <check_fs>
 8007656:	4603      	mov	r3, r0
 8007658:	e000      	b.n	800765c <find_volume+0x1a4>
 800765a:	2303      	movs	r3, #3
 800765c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8007660:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007664:	2b01      	cmp	r3, #1
 8007666:	d905      	bls.n	8007674 <find_volume+0x1bc>
 8007668:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800766a:	3301      	adds	r3, #1
 800766c:	643b      	str	r3, [r7, #64]	; 0x40
 800766e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007670:	2b03      	cmp	r3, #3
 8007672:	d9e2      	bls.n	800763a <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007674:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007678:	2b04      	cmp	r3, #4
 800767a:	d101      	bne.n	8007680 <find_volume+0x1c8>
 800767c:	2301      	movs	r3, #1
 800767e:	e194      	b.n	80079aa <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8007680:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007684:	2b01      	cmp	r3, #1
 8007686:	d901      	bls.n	800768c <find_volume+0x1d4>
 8007688:	230d      	movs	r3, #13
 800768a:	e18e      	b.n	80079aa <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800768c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800768e:	3338      	adds	r3, #56	; 0x38
 8007690:	330b      	adds	r3, #11
 8007692:	4618      	mov	r0, r3
 8007694:	f7fe f892 	bl	80057bc <ld_word>
 8007698:	4603      	mov	r3, r0
 800769a:	461a      	mov	r2, r3
 800769c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800769e:	899b      	ldrh	r3, [r3, #12]
 80076a0:	429a      	cmp	r2, r3
 80076a2:	d001      	beq.n	80076a8 <find_volume+0x1f0>
 80076a4:	230d      	movs	r3, #13
 80076a6:	e180      	b.n	80079aa <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80076a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076aa:	3338      	adds	r3, #56	; 0x38
 80076ac:	3316      	adds	r3, #22
 80076ae:	4618      	mov	r0, r3
 80076b0:	f7fe f884 	bl	80057bc <ld_word>
 80076b4:	4603      	mov	r3, r0
 80076b6:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80076b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d106      	bne.n	80076cc <find_volume+0x214>
 80076be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076c0:	3338      	adds	r3, #56	; 0x38
 80076c2:	3324      	adds	r3, #36	; 0x24
 80076c4:	4618      	mov	r0, r3
 80076c6:	f7fe f891 	bl	80057ec <ld_dword>
 80076ca:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80076cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076ce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80076d0:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80076d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076d4:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 80076d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076da:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80076dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076de:	789b      	ldrb	r3, [r3, #2]
 80076e0:	2b01      	cmp	r3, #1
 80076e2:	d005      	beq.n	80076f0 <find_volume+0x238>
 80076e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076e6:	789b      	ldrb	r3, [r3, #2]
 80076e8:	2b02      	cmp	r3, #2
 80076ea:	d001      	beq.n	80076f0 <find_volume+0x238>
 80076ec:	230d      	movs	r3, #13
 80076ee:	e15c      	b.n	80079aa <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80076f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076f2:	789b      	ldrb	r3, [r3, #2]
 80076f4:	461a      	mov	r2, r3
 80076f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076f8:	fb02 f303 	mul.w	r3, r2, r3
 80076fc:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80076fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007700:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007704:	b29a      	uxth	r2, r3
 8007706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007708:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800770a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800770c:	895b      	ldrh	r3, [r3, #10]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d008      	beq.n	8007724 <find_volume+0x26c>
 8007712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007714:	895b      	ldrh	r3, [r3, #10]
 8007716:	461a      	mov	r2, r3
 8007718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800771a:	895b      	ldrh	r3, [r3, #10]
 800771c:	3b01      	subs	r3, #1
 800771e:	4013      	ands	r3, r2
 8007720:	2b00      	cmp	r3, #0
 8007722:	d001      	beq.n	8007728 <find_volume+0x270>
 8007724:	230d      	movs	r3, #13
 8007726:	e140      	b.n	80079aa <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8007728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800772a:	3338      	adds	r3, #56	; 0x38
 800772c:	3311      	adds	r3, #17
 800772e:	4618      	mov	r0, r3
 8007730:	f7fe f844 	bl	80057bc <ld_word>
 8007734:	4603      	mov	r3, r0
 8007736:	461a      	mov	r2, r3
 8007738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800773a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800773c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800773e:	891b      	ldrh	r3, [r3, #8]
 8007740:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007742:	8992      	ldrh	r2, [r2, #12]
 8007744:	0952      	lsrs	r2, r2, #5
 8007746:	b292      	uxth	r2, r2
 8007748:	fbb3 f1f2 	udiv	r1, r3, r2
 800774c:	fb01 f202 	mul.w	r2, r1, r2
 8007750:	1a9b      	subs	r3, r3, r2
 8007752:	b29b      	uxth	r3, r3
 8007754:	2b00      	cmp	r3, #0
 8007756:	d003      	beq.n	8007760 <find_volume+0x2a8>
 8007758:	230d      	movs	r3, #13
 800775a:	e126      	b.n	80079aa <find_volume+0x4f2>
 800775c:	2000277c 	.word	0x2000277c

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8007760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007762:	3338      	adds	r3, #56	; 0x38
 8007764:	3313      	adds	r3, #19
 8007766:	4618      	mov	r0, r3
 8007768:	f7fe f828 	bl	80057bc <ld_word>
 800776c:	4603      	mov	r3, r0
 800776e:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8007770:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007772:	2b00      	cmp	r3, #0
 8007774:	d106      	bne.n	8007784 <find_volume+0x2cc>
 8007776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007778:	3338      	adds	r3, #56	; 0x38
 800777a:	3320      	adds	r3, #32
 800777c:	4618      	mov	r0, r3
 800777e:	f7fe f835 	bl	80057ec <ld_dword>
 8007782:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8007784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007786:	3338      	adds	r3, #56	; 0x38
 8007788:	330e      	adds	r3, #14
 800778a:	4618      	mov	r0, r3
 800778c:	f7fe f816 	bl	80057bc <ld_word>
 8007790:	4603      	mov	r3, r0
 8007792:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8007794:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007796:	2b00      	cmp	r3, #0
 8007798:	d101      	bne.n	800779e <find_volume+0x2e6>
 800779a:	230d      	movs	r3, #13
 800779c:	e105      	b.n	80079aa <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800779e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80077a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077a2:	4413      	add	r3, r2
 80077a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80077a6:	8911      	ldrh	r1, [r2, #8]
 80077a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80077aa:	8992      	ldrh	r2, [r2, #12]
 80077ac:	0952      	lsrs	r2, r2, #5
 80077ae:	b292      	uxth	r2, r2
 80077b0:	fbb1 f2f2 	udiv	r2, r1, r2
 80077b4:	b292      	uxth	r2, r2
 80077b6:	4413      	add	r3, r2
 80077b8:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80077ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80077bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077be:	429a      	cmp	r2, r3
 80077c0:	d201      	bcs.n	80077c6 <find_volume+0x30e>
 80077c2:	230d      	movs	r3, #13
 80077c4:	e0f1      	b.n	80079aa <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80077c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80077c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077ca:	1ad3      	subs	r3, r2, r3
 80077cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80077ce:	8952      	ldrh	r2, [r2, #10]
 80077d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80077d4:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80077d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d101      	bne.n	80077e0 <find_volume+0x328>
 80077dc:	230d      	movs	r3, #13
 80077de:	e0e4      	b.n	80079aa <find_volume+0x4f2>
		fmt = FS_FAT32;
 80077e0:	2303      	movs	r3, #3
 80077e2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80077e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077e8:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80077ec:	4293      	cmp	r3, r2
 80077ee:	d802      	bhi.n	80077f6 <find_volume+0x33e>
 80077f0:	2302      	movs	r3, #2
 80077f2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80077f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077f8:	f640 72f5 	movw	r2, #4085	; 0xff5
 80077fc:	4293      	cmp	r3, r2
 80077fe:	d802      	bhi.n	8007806 <find_volume+0x34e>
 8007800:	2301      	movs	r3, #1
 8007802:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8007806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007808:	1c9a      	adds	r2, r3, #2
 800780a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800780c:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800780e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007810:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007812:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8007814:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007816:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007818:	441a      	add	r2, r3
 800781a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800781c:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800781e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007822:	441a      	add	r2, r3
 8007824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007826:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8007828:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800782c:	2b03      	cmp	r3, #3
 800782e:	d11e      	bne.n	800786e <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8007830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007832:	3338      	adds	r3, #56	; 0x38
 8007834:	332a      	adds	r3, #42	; 0x2a
 8007836:	4618      	mov	r0, r3
 8007838:	f7fd ffc0 	bl	80057bc <ld_word>
 800783c:	4603      	mov	r3, r0
 800783e:	2b00      	cmp	r3, #0
 8007840:	d001      	beq.n	8007846 <find_volume+0x38e>
 8007842:	230d      	movs	r3, #13
 8007844:	e0b1      	b.n	80079aa <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8007846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007848:	891b      	ldrh	r3, [r3, #8]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d001      	beq.n	8007852 <find_volume+0x39a>
 800784e:	230d      	movs	r3, #13
 8007850:	e0ab      	b.n	80079aa <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8007852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007854:	3338      	adds	r3, #56	; 0x38
 8007856:	332c      	adds	r3, #44	; 0x2c
 8007858:	4618      	mov	r0, r3
 800785a:	f7fd ffc7 	bl	80057ec <ld_dword>
 800785e:	4602      	mov	r2, r0
 8007860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007862:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8007864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007866:	69db      	ldr	r3, [r3, #28]
 8007868:	009b      	lsls	r3, r3, #2
 800786a:	647b      	str	r3, [r7, #68]	; 0x44
 800786c:	e01f      	b.n	80078ae <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800786e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007870:	891b      	ldrh	r3, [r3, #8]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d101      	bne.n	800787a <find_volume+0x3c2>
 8007876:	230d      	movs	r3, #13
 8007878:	e097      	b.n	80079aa <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800787a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800787c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800787e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007880:	441a      	add	r2, r3
 8007882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007884:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007886:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800788a:	2b02      	cmp	r3, #2
 800788c:	d103      	bne.n	8007896 <find_volume+0x3de>
 800788e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007890:	69db      	ldr	r3, [r3, #28]
 8007892:	005b      	lsls	r3, r3, #1
 8007894:	e00a      	b.n	80078ac <find_volume+0x3f4>
 8007896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007898:	69da      	ldr	r2, [r3, #28]
 800789a:	4613      	mov	r3, r2
 800789c:	005b      	lsls	r3, r3, #1
 800789e:	4413      	add	r3, r2
 80078a0:	085a      	lsrs	r2, r3, #1
 80078a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078a4:	69db      	ldr	r3, [r3, #28]
 80078a6:	f003 0301 	and.w	r3, r3, #1
 80078aa:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80078ac:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80078ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078b0:	6a1a      	ldr	r2, [r3, #32]
 80078b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078b4:	899b      	ldrh	r3, [r3, #12]
 80078b6:	4619      	mov	r1, r3
 80078b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80078ba:	440b      	add	r3, r1
 80078bc:	3b01      	subs	r3, #1
 80078be:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80078c0:	8989      	ldrh	r1, [r1, #12]
 80078c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80078c6:	429a      	cmp	r2, r3
 80078c8:	d201      	bcs.n	80078ce <find_volume+0x416>
 80078ca:	230d      	movs	r3, #13
 80078cc:	e06d      	b.n	80079aa <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80078ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078d0:	f04f 32ff 	mov.w	r2, #4294967295
 80078d4:	619a      	str	r2, [r3, #24]
 80078d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078d8:	699a      	ldr	r2, [r3, #24]
 80078da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078dc:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 80078de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078e0:	2280      	movs	r2, #128	; 0x80
 80078e2:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80078e4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80078e8:	2b03      	cmp	r3, #3
 80078ea:	d149      	bne.n	8007980 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80078ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078ee:	3338      	adds	r3, #56	; 0x38
 80078f0:	3330      	adds	r3, #48	; 0x30
 80078f2:	4618      	mov	r0, r3
 80078f4:	f7fd ff62 	bl	80057bc <ld_word>
 80078f8:	4603      	mov	r3, r0
 80078fa:	2b01      	cmp	r3, #1
 80078fc:	d140      	bne.n	8007980 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 80078fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007900:	3301      	adds	r3, #1
 8007902:	4619      	mov	r1, r3
 8007904:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007906:	f7fe fa09 	bl	8005d1c <move_window>
 800790a:	4603      	mov	r3, r0
 800790c:	2b00      	cmp	r3, #0
 800790e:	d137      	bne.n	8007980 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8007910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007912:	2200      	movs	r2, #0
 8007914:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007918:	3338      	adds	r3, #56	; 0x38
 800791a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800791e:	4618      	mov	r0, r3
 8007920:	f7fd ff4c 	bl	80057bc <ld_word>
 8007924:	4603      	mov	r3, r0
 8007926:	461a      	mov	r2, r3
 8007928:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800792c:	429a      	cmp	r2, r3
 800792e:	d127      	bne.n	8007980 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8007930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007932:	3338      	adds	r3, #56	; 0x38
 8007934:	4618      	mov	r0, r3
 8007936:	f7fd ff59 	bl	80057ec <ld_dword>
 800793a:	4603      	mov	r3, r0
 800793c:	4a1d      	ldr	r2, [pc, #116]	; (80079b4 <find_volume+0x4fc>)
 800793e:	4293      	cmp	r3, r2
 8007940:	d11e      	bne.n	8007980 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8007942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007944:	3338      	adds	r3, #56	; 0x38
 8007946:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800794a:	4618      	mov	r0, r3
 800794c:	f7fd ff4e 	bl	80057ec <ld_dword>
 8007950:	4603      	mov	r3, r0
 8007952:	4a19      	ldr	r2, [pc, #100]	; (80079b8 <find_volume+0x500>)
 8007954:	4293      	cmp	r3, r2
 8007956:	d113      	bne.n	8007980 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8007958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800795a:	3338      	adds	r3, #56	; 0x38
 800795c:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8007960:	4618      	mov	r0, r3
 8007962:	f7fd ff43 	bl	80057ec <ld_dword>
 8007966:	4602      	mov	r2, r0
 8007968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800796a:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800796c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800796e:	3338      	adds	r3, #56	; 0x38
 8007970:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8007974:	4618      	mov	r0, r3
 8007976:	f7fd ff39 	bl	80057ec <ld_dword>
 800797a:	4602      	mov	r2, r0
 800797c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800797e:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8007980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007982:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8007986:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8007988:	4b0c      	ldr	r3, [pc, #48]	; (80079bc <find_volume+0x504>)
 800798a:	881b      	ldrh	r3, [r3, #0]
 800798c:	3301      	adds	r3, #1
 800798e:	b29a      	uxth	r2, r3
 8007990:	4b0a      	ldr	r3, [pc, #40]	; (80079bc <find_volume+0x504>)
 8007992:	801a      	strh	r2, [r3, #0]
 8007994:	4b09      	ldr	r3, [pc, #36]	; (80079bc <find_volume+0x504>)
 8007996:	881a      	ldrh	r2, [r3, #0]
 8007998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800799a:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800799c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800799e:	4a08      	ldr	r2, [pc, #32]	; (80079c0 <find_volume+0x508>)
 80079a0:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80079a2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80079a4:	f7fe f952 	bl	8005c4c <clear_lock>
#endif
	return FR_OK;
 80079a8:	2300      	movs	r3, #0
}
 80079aa:	4618      	mov	r0, r3
 80079ac:	3758      	adds	r7, #88	; 0x58
 80079ae:	46bd      	mov	sp, r7
 80079b0:	bd80      	pop	{r7, pc}
 80079b2:	bf00      	nop
 80079b4:	41615252 	.word	0x41615252
 80079b8:	61417272 	.word	0x61417272
 80079bc:	20002780 	.word	0x20002780
 80079c0:	200027a4 	.word	0x200027a4

080079c4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b084      	sub	sp, #16
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
 80079cc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80079ce:	2309      	movs	r3, #9
 80079d0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d01c      	beq.n	8007a12 <validate+0x4e>
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d018      	beq.n	8007a12 <validate+0x4e>
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	781b      	ldrb	r3, [r3, #0]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d013      	beq.n	8007a12 <validate+0x4e>
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	889a      	ldrh	r2, [r3, #4]
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	88db      	ldrh	r3, [r3, #6]
 80079f4:	429a      	cmp	r2, r3
 80079f6:	d10c      	bne.n	8007a12 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	785b      	ldrb	r3, [r3, #1]
 80079fe:	4618      	mov	r0, r3
 8007a00:	f7fd fe3e 	bl	8005680 <disk_status>
 8007a04:	4603      	mov	r3, r0
 8007a06:	f003 0301 	and.w	r3, r3, #1
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d101      	bne.n	8007a12 <validate+0x4e>
			res = FR_OK;
 8007a0e:	2300      	movs	r3, #0
 8007a10:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8007a12:	7bfb      	ldrb	r3, [r7, #15]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d102      	bne.n	8007a1e <validate+0x5a>
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	e000      	b.n	8007a20 <validate+0x5c>
 8007a1e:	2300      	movs	r3, #0
 8007a20:	683a      	ldr	r2, [r7, #0]
 8007a22:	6013      	str	r3, [r2, #0]
	return res;
 8007a24:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a26:	4618      	mov	r0, r3
 8007a28:	3710      	adds	r7, #16
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	bd80      	pop	{r7, pc}
	...

08007a30 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b088      	sub	sp, #32
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	60f8      	str	r0, [r7, #12]
 8007a38:	60b9      	str	r1, [r7, #8]
 8007a3a:	4613      	mov	r3, r2
 8007a3c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8007a3e:	68bb      	ldr	r3, [r7, #8]
 8007a40:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8007a42:	f107 0310 	add.w	r3, r7, #16
 8007a46:	4618      	mov	r0, r3
 8007a48:	f7ff fc9c 	bl	8007384 <get_ldnumber>
 8007a4c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8007a4e:	69fb      	ldr	r3, [r7, #28]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	da01      	bge.n	8007a58 <f_mount+0x28>
 8007a54:	230b      	movs	r3, #11
 8007a56:	e02b      	b.n	8007ab0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8007a58:	4a17      	ldr	r2, [pc, #92]	; (8007ab8 <f_mount+0x88>)
 8007a5a:	69fb      	ldr	r3, [r7, #28]
 8007a5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a60:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8007a62:	69bb      	ldr	r3, [r7, #24]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d005      	beq.n	8007a74 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8007a68:	69b8      	ldr	r0, [r7, #24]
 8007a6a:	f7fe f8ef 	bl	8005c4c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8007a6e:	69bb      	ldr	r3, [r7, #24]
 8007a70:	2200      	movs	r2, #0
 8007a72:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d002      	beq.n	8007a80 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8007a80:	68fa      	ldr	r2, [r7, #12]
 8007a82:	490d      	ldr	r1, [pc, #52]	; (8007ab8 <f_mount+0x88>)
 8007a84:	69fb      	ldr	r3, [r7, #28]
 8007a86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d002      	beq.n	8007a96 <f_mount+0x66>
 8007a90:	79fb      	ldrb	r3, [r7, #7]
 8007a92:	2b01      	cmp	r3, #1
 8007a94:	d001      	beq.n	8007a9a <f_mount+0x6a>
 8007a96:	2300      	movs	r3, #0
 8007a98:	e00a      	b.n	8007ab0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8007a9a:	f107 010c 	add.w	r1, r7, #12
 8007a9e:	f107 0308 	add.w	r3, r7, #8
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	f7ff fd07 	bl	80074b8 <find_volume>
 8007aaa:	4603      	mov	r3, r0
 8007aac:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8007aae:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	3720      	adds	r7, #32
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	bd80      	pop	{r7, pc}
 8007ab8:	2000277c 	.word	0x2000277c

08007abc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b09a      	sub	sp, #104	; 0x68
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	60f8      	str	r0, [r7, #12]
 8007ac4:	60b9      	str	r1, [r7, #8]
 8007ac6:	4613      	mov	r3, r2
 8007ac8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d101      	bne.n	8007ad4 <f_open+0x18>
 8007ad0:	2309      	movs	r3, #9
 8007ad2:	e1bb      	b.n	8007e4c <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8007ad4:	79fb      	ldrb	r3, [r7, #7]
 8007ad6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007ada:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8007adc:	79fa      	ldrb	r2, [r7, #7]
 8007ade:	f107 0114 	add.w	r1, r7, #20
 8007ae2:	f107 0308 	add.w	r3, r7, #8
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	f7ff fce6 	bl	80074b8 <find_volume>
 8007aec:	4603      	mov	r3, r0
 8007aee:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8007af2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	f040 819f 	bne.w	8007e3a <f_open+0x37e>
		dj.obj.fs = fs;
 8007afc:	697b      	ldr	r3, [r7, #20]
 8007afe:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8007b00:	68ba      	ldr	r2, [r7, #8]
 8007b02:	f107 0318 	add.w	r3, r7, #24
 8007b06:	4611      	mov	r1, r2
 8007b08:	4618      	mov	r0, r3
 8007b0a:	f7ff fbc5 	bl	8007298 <follow_path>
 8007b0e:	4603      	mov	r3, r0
 8007b10:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8007b14:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d11a      	bne.n	8007b52 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8007b1c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007b20:	b25b      	sxtb	r3, r3
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	da03      	bge.n	8007b2e <f_open+0x72>
				res = FR_INVALID_NAME;
 8007b26:	2306      	movs	r3, #6
 8007b28:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8007b2c:	e011      	b.n	8007b52 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007b2e:	79fb      	ldrb	r3, [r7, #7]
 8007b30:	f023 0301 	bic.w	r3, r3, #1
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	bf14      	ite	ne
 8007b38:	2301      	movne	r3, #1
 8007b3a:	2300      	moveq	r3, #0
 8007b3c:	b2db      	uxtb	r3, r3
 8007b3e:	461a      	mov	r2, r3
 8007b40:	f107 0318 	add.w	r3, r7, #24
 8007b44:	4611      	mov	r1, r2
 8007b46:	4618      	mov	r0, r3
 8007b48:	f7fd ff38 	bl	80059bc <chk_lock>
 8007b4c:	4603      	mov	r3, r0
 8007b4e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8007b52:	79fb      	ldrb	r3, [r7, #7]
 8007b54:	f003 031c 	and.w	r3, r3, #28
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d07f      	beq.n	8007c5c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8007b5c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d017      	beq.n	8007b94 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8007b64:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007b68:	2b04      	cmp	r3, #4
 8007b6a:	d10e      	bne.n	8007b8a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8007b6c:	f7fd ff82 	bl	8005a74 <enq_lock>
 8007b70:	4603      	mov	r3, r0
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d006      	beq.n	8007b84 <f_open+0xc8>
 8007b76:	f107 0318 	add.w	r3, r7, #24
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	f7ff f8dc 	bl	8006d38 <dir_register>
 8007b80:	4603      	mov	r3, r0
 8007b82:	e000      	b.n	8007b86 <f_open+0xca>
 8007b84:	2312      	movs	r3, #18
 8007b86:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8007b8a:	79fb      	ldrb	r3, [r7, #7]
 8007b8c:	f043 0308 	orr.w	r3, r3, #8
 8007b90:	71fb      	strb	r3, [r7, #7]
 8007b92:	e010      	b.n	8007bb6 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8007b94:	7fbb      	ldrb	r3, [r7, #30]
 8007b96:	f003 0311 	and.w	r3, r3, #17
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d003      	beq.n	8007ba6 <f_open+0xea>
					res = FR_DENIED;
 8007b9e:	2307      	movs	r3, #7
 8007ba0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8007ba4:	e007      	b.n	8007bb6 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8007ba6:	79fb      	ldrb	r3, [r7, #7]
 8007ba8:	f003 0304 	and.w	r3, r3, #4
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d002      	beq.n	8007bb6 <f_open+0xfa>
 8007bb0:	2308      	movs	r3, #8
 8007bb2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8007bb6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d168      	bne.n	8007c90 <f_open+0x1d4>
 8007bbe:	79fb      	ldrb	r3, [r7, #7]
 8007bc0:	f003 0308 	and.w	r3, r3, #8
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d063      	beq.n	8007c90 <f_open+0x1d4>
				dw = GET_FATTIME();
 8007bc8:	f7fd fcfc 	bl	80055c4 <get_fattime>
 8007bcc:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8007bce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bd0:	330e      	adds	r3, #14
 8007bd2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	f7fd fe47 	bl	8005868 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8007bda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bdc:	3316      	adds	r3, #22
 8007bde:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007be0:	4618      	mov	r0, r3
 8007be2:	f7fd fe41 	bl	8005868 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8007be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007be8:	330b      	adds	r3, #11
 8007bea:	2220      	movs	r2, #32
 8007bec:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8007bee:	697b      	ldr	r3, [r7, #20]
 8007bf0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007bf2:	4611      	mov	r1, r2
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	f7fe fe17 	bl	8006828 <ld_clust>
 8007bfa:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8007bfc:	697b      	ldr	r3, [r7, #20]
 8007bfe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007c00:	2200      	movs	r2, #0
 8007c02:	4618      	mov	r0, r3
 8007c04:	f7fe fe2f 	bl	8006866 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8007c08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c0a:	331c      	adds	r3, #28
 8007c0c:	2100      	movs	r1, #0
 8007c0e:	4618      	mov	r0, r3
 8007c10:	f7fd fe2a 	bl	8005868 <st_dword>
					fs->wflag = 1;
 8007c14:	697b      	ldr	r3, [r7, #20]
 8007c16:	2201      	movs	r2, #1
 8007c18:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8007c1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d037      	beq.n	8007c90 <f_open+0x1d4>
						dw = fs->winsect;
 8007c20:	697b      	ldr	r3, [r7, #20]
 8007c22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c24:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8007c26:	f107 0318 	add.w	r3, r7, #24
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007c2e:	4618      	mov	r0, r3
 8007c30:	f7fe fb1f 	bl	8006272 <remove_chain>
 8007c34:	4603      	mov	r3, r0
 8007c36:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 8007c3a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d126      	bne.n	8007c90 <f_open+0x1d4>
							res = move_window(fs, dw);
 8007c42:	697b      	ldr	r3, [r7, #20]
 8007c44:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007c46:	4618      	mov	r0, r3
 8007c48:	f7fe f868 	bl	8005d1c <move_window>
 8007c4c:	4603      	mov	r3, r0
 8007c4e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8007c52:	697b      	ldr	r3, [r7, #20]
 8007c54:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007c56:	3a01      	subs	r2, #1
 8007c58:	615a      	str	r2, [r3, #20]
 8007c5a:	e019      	b.n	8007c90 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8007c5c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d115      	bne.n	8007c90 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8007c64:	7fbb      	ldrb	r3, [r7, #30]
 8007c66:	f003 0310 	and.w	r3, r3, #16
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d003      	beq.n	8007c76 <f_open+0x1ba>
					res = FR_NO_FILE;
 8007c6e:	2304      	movs	r3, #4
 8007c70:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8007c74:	e00c      	b.n	8007c90 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8007c76:	79fb      	ldrb	r3, [r7, #7]
 8007c78:	f003 0302 	and.w	r3, r3, #2
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d007      	beq.n	8007c90 <f_open+0x1d4>
 8007c80:	7fbb      	ldrb	r3, [r7, #30]
 8007c82:	f003 0301 	and.w	r3, r3, #1
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d002      	beq.n	8007c90 <f_open+0x1d4>
						res = FR_DENIED;
 8007c8a:	2307      	movs	r3, #7
 8007c8c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8007c90:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d128      	bne.n	8007cea <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8007c98:	79fb      	ldrb	r3, [r7, #7]
 8007c9a:	f003 0308 	and.w	r3, r3, #8
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d003      	beq.n	8007caa <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8007ca2:	79fb      	ldrb	r3, [r7, #7]
 8007ca4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ca8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8007caa:	697b      	ldr	r3, [r7, #20]
 8007cac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8007cb2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007cb8:	79fb      	ldrb	r3, [r7, #7]
 8007cba:	f023 0301 	bic.w	r3, r3, #1
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	bf14      	ite	ne
 8007cc2:	2301      	movne	r3, #1
 8007cc4:	2300      	moveq	r3, #0
 8007cc6:	b2db      	uxtb	r3, r3
 8007cc8:	461a      	mov	r2, r3
 8007cca:	f107 0318 	add.w	r3, r7, #24
 8007cce:	4611      	mov	r1, r2
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	f7fd fef1 	bl	8005ab8 <inc_lock>
 8007cd6:	4602      	mov	r2, r0
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	691b      	ldr	r3, [r3, #16]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d102      	bne.n	8007cea <f_open+0x22e>
 8007ce4:	2302      	movs	r3, #2
 8007ce6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8007cea:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	f040 80a3 	bne.w	8007e3a <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8007cf4:	697b      	ldr	r3, [r7, #20]
 8007cf6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007cf8:	4611      	mov	r1, r2
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	f7fe fd94 	bl	8006828 <ld_clust>
 8007d00:	4602      	mov	r2, r0
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8007d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d08:	331c      	adds	r3, #28
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	f7fd fd6e 	bl	80057ec <ld_dword>
 8007d10:	4602      	mov	r2, r0
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	2200      	movs	r2, #0
 8007d1a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8007d1c:	697a      	ldr	r2, [r7, #20]
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8007d22:	697b      	ldr	r3, [r7, #20]
 8007d24:	88da      	ldrh	r2, [r3, #6]
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	79fa      	ldrb	r2, [r7, #7]
 8007d2e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	2200      	movs	r2, #0
 8007d34:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	2200      	movs	r2, #0
 8007d3a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	2200      	movs	r2, #0
 8007d40:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	3330      	adds	r3, #48	; 0x30
 8007d46:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007d4a:	2100      	movs	r1, #0
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	f7fd fdd8 	bl	8005902 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8007d52:	79fb      	ldrb	r3, [r7, #7]
 8007d54:	f003 0320 	and.w	r3, r3, #32
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d06e      	beq.n	8007e3a <f_open+0x37e>
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	68db      	ldr	r3, [r3, #12]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d06a      	beq.n	8007e3a <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	68da      	ldr	r2, [r3, #12]
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8007d6c:	697b      	ldr	r3, [r7, #20]
 8007d6e:	895b      	ldrh	r3, [r3, #10]
 8007d70:	461a      	mov	r2, r3
 8007d72:	697b      	ldr	r3, [r7, #20]
 8007d74:	899b      	ldrh	r3, [r3, #12]
 8007d76:	fb02 f303 	mul.w	r3, r2, r3
 8007d7a:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	689b      	ldr	r3, [r3, #8]
 8007d80:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	68db      	ldr	r3, [r3, #12]
 8007d86:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007d88:	e016      	b.n	8007db8 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8007d8e:	4618      	mov	r0, r3
 8007d90:	f7fe f881 	bl	8005e96 <get_fat>
 8007d94:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8007d96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007d98:	2b01      	cmp	r3, #1
 8007d9a:	d802      	bhi.n	8007da2 <f_open+0x2e6>
 8007d9c:	2302      	movs	r3, #2
 8007d9e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8007da2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007da4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007da8:	d102      	bne.n	8007db0 <f_open+0x2f4>
 8007daa:	2301      	movs	r3, #1
 8007dac:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007db0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007db2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007db4:	1ad3      	subs	r3, r2, r3
 8007db6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007db8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d103      	bne.n	8007dc8 <f_open+0x30c>
 8007dc0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007dc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007dc4:	429a      	cmp	r2, r3
 8007dc6:	d8e0      	bhi.n	8007d8a <f_open+0x2ce>
				}
				fp->clust = clst;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007dcc:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8007dce:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d131      	bne.n	8007e3a <f_open+0x37e>
 8007dd6:	697b      	ldr	r3, [r7, #20]
 8007dd8:	899b      	ldrh	r3, [r3, #12]
 8007dda:	461a      	mov	r2, r3
 8007ddc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007dde:	fbb3 f1f2 	udiv	r1, r3, r2
 8007de2:	fb01 f202 	mul.w	r2, r1, r2
 8007de6:	1a9b      	subs	r3, r3, r2
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d026      	beq.n	8007e3a <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8007dec:	697b      	ldr	r3, [r7, #20]
 8007dee:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8007df0:	4618      	mov	r0, r3
 8007df2:	f7fe f831 	bl	8005e58 <clust2sect>
 8007df6:	64f8      	str	r0, [r7, #76]	; 0x4c
 8007df8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d103      	bne.n	8007e06 <f_open+0x34a>
						res = FR_INT_ERR;
 8007dfe:	2302      	movs	r3, #2
 8007e00:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8007e04:	e019      	b.n	8007e3a <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8007e06:	697b      	ldr	r3, [r7, #20]
 8007e08:	899b      	ldrh	r3, [r3, #12]
 8007e0a:	461a      	mov	r2, r3
 8007e0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007e0e:	fbb3 f2f2 	udiv	r2, r3, r2
 8007e12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e14:	441a      	add	r2, r3
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8007e1a:	697b      	ldr	r3, [r7, #20]
 8007e1c:	7858      	ldrb	r0, [r3, #1]
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	6a1a      	ldr	r2, [r3, #32]
 8007e28:	2301      	movs	r3, #1
 8007e2a:	f7fd fc69 	bl	8005700 <disk_read>
 8007e2e:	4603      	mov	r3, r0
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d002      	beq.n	8007e3a <f_open+0x37e>
 8007e34:	2301      	movs	r3, #1
 8007e36:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8007e3a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d002      	beq.n	8007e48 <f_open+0x38c>
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	2200      	movs	r2, #0
 8007e46:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8007e48:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	3768      	adds	r7, #104	; 0x68
 8007e50:	46bd      	mov	sp, r7
 8007e52:	bd80      	pop	{r7, pc}

08007e54 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b08e      	sub	sp, #56	; 0x38
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	60f8      	str	r0, [r7, #12]
 8007e5c:	60b9      	str	r1, [r7, #8]
 8007e5e:	607a      	str	r2, [r7, #4]
 8007e60:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8007e62:	68bb      	ldr	r3, [r7, #8]
 8007e64:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	2200      	movs	r2, #0
 8007e6a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	f107 0214 	add.w	r2, r7, #20
 8007e72:	4611      	mov	r1, r2
 8007e74:	4618      	mov	r0, r3
 8007e76:	f7ff fda5 	bl	80079c4 <validate>
 8007e7a:	4603      	mov	r3, r0
 8007e7c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8007e80:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d107      	bne.n	8007e98 <f_read+0x44>
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	7d5b      	ldrb	r3, [r3, #21]
 8007e8c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8007e90:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d002      	beq.n	8007e9e <f_read+0x4a>
 8007e98:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007e9c:	e135      	b.n	800810a <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	7d1b      	ldrb	r3, [r3, #20]
 8007ea2:	f003 0301 	and.w	r3, r3, #1
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d101      	bne.n	8007eae <f_read+0x5a>
 8007eaa:	2307      	movs	r3, #7
 8007eac:	e12d      	b.n	800810a <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	68da      	ldr	r2, [r3, #12]
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	699b      	ldr	r3, [r3, #24]
 8007eb6:	1ad3      	subs	r3, r2, r3
 8007eb8:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8007eba:	687a      	ldr	r2, [r7, #4]
 8007ebc:	6a3b      	ldr	r3, [r7, #32]
 8007ebe:	429a      	cmp	r2, r3
 8007ec0:	f240 811e 	bls.w	8008100 <f_read+0x2ac>
 8007ec4:	6a3b      	ldr	r3, [r7, #32]
 8007ec6:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8007ec8:	e11a      	b.n	8008100 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	699b      	ldr	r3, [r3, #24]
 8007ece:	697a      	ldr	r2, [r7, #20]
 8007ed0:	8992      	ldrh	r2, [r2, #12]
 8007ed2:	fbb3 f1f2 	udiv	r1, r3, r2
 8007ed6:	fb01 f202 	mul.w	r2, r1, r2
 8007eda:	1a9b      	subs	r3, r3, r2
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	f040 80d5 	bne.w	800808c <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	699b      	ldr	r3, [r3, #24]
 8007ee6:	697a      	ldr	r2, [r7, #20]
 8007ee8:	8992      	ldrh	r2, [r2, #12]
 8007eea:	fbb3 f3f2 	udiv	r3, r3, r2
 8007eee:	697a      	ldr	r2, [r7, #20]
 8007ef0:	8952      	ldrh	r2, [r2, #10]
 8007ef2:	3a01      	subs	r2, #1
 8007ef4:	4013      	ands	r3, r2
 8007ef6:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8007ef8:	69fb      	ldr	r3, [r7, #28]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d12f      	bne.n	8007f5e <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	699b      	ldr	r3, [r3, #24]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d103      	bne.n	8007f0e <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	689b      	ldr	r3, [r3, #8]
 8007f0a:	633b      	str	r3, [r7, #48]	; 0x30
 8007f0c:	e013      	b.n	8007f36 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d007      	beq.n	8007f26 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	699b      	ldr	r3, [r3, #24]
 8007f1a:	4619      	mov	r1, r3
 8007f1c:	68f8      	ldr	r0, [r7, #12]
 8007f1e:	f7fe faa5 	bl	800646c <clmt_clust>
 8007f22:	6338      	str	r0, [r7, #48]	; 0x30
 8007f24:	e007      	b.n	8007f36 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8007f26:	68fa      	ldr	r2, [r7, #12]
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	69db      	ldr	r3, [r3, #28]
 8007f2c:	4619      	mov	r1, r3
 8007f2e:	4610      	mov	r0, r2
 8007f30:	f7fd ffb1 	bl	8005e96 <get_fat>
 8007f34:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8007f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f38:	2b01      	cmp	r3, #1
 8007f3a:	d804      	bhi.n	8007f46 <f_read+0xf2>
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	2202      	movs	r2, #2
 8007f40:	755a      	strb	r2, [r3, #21]
 8007f42:	2302      	movs	r3, #2
 8007f44:	e0e1      	b.n	800810a <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f4c:	d104      	bne.n	8007f58 <f_read+0x104>
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	2201      	movs	r2, #1
 8007f52:	755a      	strb	r2, [r3, #21]
 8007f54:	2301      	movs	r3, #1
 8007f56:	e0d8      	b.n	800810a <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f5c:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8007f5e:	697a      	ldr	r2, [r7, #20]
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	69db      	ldr	r3, [r3, #28]
 8007f64:	4619      	mov	r1, r3
 8007f66:	4610      	mov	r0, r2
 8007f68:	f7fd ff76 	bl	8005e58 <clust2sect>
 8007f6c:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8007f6e:	69bb      	ldr	r3, [r7, #24]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d104      	bne.n	8007f7e <f_read+0x12a>
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	2202      	movs	r2, #2
 8007f78:	755a      	strb	r2, [r3, #21]
 8007f7a:	2302      	movs	r3, #2
 8007f7c:	e0c5      	b.n	800810a <f_read+0x2b6>
			sect += csect;
 8007f7e:	69ba      	ldr	r2, [r7, #24]
 8007f80:	69fb      	ldr	r3, [r7, #28]
 8007f82:	4413      	add	r3, r2
 8007f84:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8007f86:	697b      	ldr	r3, [r7, #20]
 8007f88:	899b      	ldrh	r3, [r3, #12]
 8007f8a:	461a      	mov	r2, r3
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007f92:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8007f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d041      	beq.n	800801e <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8007f9a:	69fa      	ldr	r2, [r7, #28]
 8007f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f9e:	4413      	add	r3, r2
 8007fa0:	697a      	ldr	r2, [r7, #20]
 8007fa2:	8952      	ldrh	r2, [r2, #10]
 8007fa4:	4293      	cmp	r3, r2
 8007fa6:	d905      	bls.n	8007fb4 <f_read+0x160>
					cc = fs->csize - csect;
 8007fa8:	697b      	ldr	r3, [r7, #20]
 8007faa:	895b      	ldrh	r3, [r3, #10]
 8007fac:	461a      	mov	r2, r3
 8007fae:	69fb      	ldr	r3, [r7, #28]
 8007fb0:	1ad3      	subs	r3, r2, r3
 8007fb2:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007fb4:	697b      	ldr	r3, [r7, #20]
 8007fb6:	7858      	ldrb	r0, [r3, #1]
 8007fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fba:	69ba      	ldr	r2, [r7, #24]
 8007fbc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007fbe:	f7fd fb9f 	bl	8005700 <disk_read>
 8007fc2:	4603      	mov	r3, r0
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d004      	beq.n	8007fd2 <f_read+0x17e>
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	2201      	movs	r2, #1
 8007fcc:	755a      	strb	r2, [r3, #21]
 8007fce:	2301      	movs	r3, #1
 8007fd0:	e09b      	b.n	800810a <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	7d1b      	ldrb	r3, [r3, #20]
 8007fd6:	b25b      	sxtb	r3, r3
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	da18      	bge.n	800800e <f_read+0x1ba>
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	6a1a      	ldr	r2, [r3, #32]
 8007fe0:	69bb      	ldr	r3, [r7, #24]
 8007fe2:	1ad3      	subs	r3, r2, r3
 8007fe4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007fe6:	429a      	cmp	r2, r3
 8007fe8:	d911      	bls.n	800800e <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	6a1a      	ldr	r2, [r3, #32]
 8007fee:	69bb      	ldr	r3, [r7, #24]
 8007ff0:	1ad3      	subs	r3, r2, r3
 8007ff2:	697a      	ldr	r2, [r7, #20]
 8007ff4:	8992      	ldrh	r2, [r2, #12]
 8007ff6:	fb02 f303 	mul.w	r3, r2, r3
 8007ffa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ffc:	18d0      	adds	r0, r2, r3
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008004:	697b      	ldr	r3, [r7, #20]
 8008006:	899b      	ldrh	r3, [r3, #12]
 8008008:	461a      	mov	r2, r3
 800800a:	f7fd fc59 	bl	80058c0 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800800e:	697b      	ldr	r3, [r7, #20]
 8008010:	899b      	ldrh	r3, [r3, #12]
 8008012:	461a      	mov	r2, r3
 8008014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008016:	fb02 f303 	mul.w	r3, r2, r3
 800801a:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800801c:	e05c      	b.n	80080d8 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	6a1b      	ldr	r3, [r3, #32]
 8008022:	69ba      	ldr	r2, [r7, #24]
 8008024:	429a      	cmp	r2, r3
 8008026:	d02e      	beq.n	8008086 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	7d1b      	ldrb	r3, [r3, #20]
 800802c:	b25b      	sxtb	r3, r3
 800802e:	2b00      	cmp	r3, #0
 8008030:	da18      	bge.n	8008064 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008032:	697b      	ldr	r3, [r7, #20]
 8008034:	7858      	ldrb	r0, [r3, #1]
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	6a1a      	ldr	r2, [r3, #32]
 8008040:	2301      	movs	r3, #1
 8008042:	f7fd fb7d 	bl	8005740 <disk_write>
 8008046:	4603      	mov	r3, r0
 8008048:	2b00      	cmp	r3, #0
 800804a:	d004      	beq.n	8008056 <f_read+0x202>
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	2201      	movs	r2, #1
 8008050:	755a      	strb	r2, [r3, #21]
 8008052:	2301      	movs	r3, #1
 8008054:	e059      	b.n	800810a <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	7d1b      	ldrb	r3, [r3, #20]
 800805a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800805e:	b2da      	uxtb	r2, r3
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8008064:	697b      	ldr	r3, [r7, #20]
 8008066:	7858      	ldrb	r0, [r3, #1]
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800806e:	2301      	movs	r3, #1
 8008070:	69ba      	ldr	r2, [r7, #24]
 8008072:	f7fd fb45 	bl	8005700 <disk_read>
 8008076:	4603      	mov	r3, r0
 8008078:	2b00      	cmp	r3, #0
 800807a:	d004      	beq.n	8008086 <f_read+0x232>
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	2201      	movs	r2, #1
 8008080:	755a      	strb	r2, [r3, #21]
 8008082:	2301      	movs	r3, #1
 8008084:	e041      	b.n	800810a <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	69ba      	ldr	r2, [r7, #24]
 800808a:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800808c:	697b      	ldr	r3, [r7, #20]
 800808e:	899b      	ldrh	r3, [r3, #12]
 8008090:	4618      	mov	r0, r3
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	699b      	ldr	r3, [r3, #24]
 8008096:	697a      	ldr	r2, [r7, #20]
 8008098:	8992      	ldrh	r2, [r2, #12]
 800809a:	fbb3 f1f2 	udiv	r1, r3, r2
 800809e:	fb01 f202 	mul.w	r2, r1, r2
 80080a2:	1a9b      	subs	r3, r3, r2
 80080a4:	1ac3      	subs	r3, r0, r3
 80080a6:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80080a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	429a      	cmp	r2, r3
 80080ae:	d901      	bls.n	80080b4 <f_read+0x260>
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	699b      	ldr	r3, [r3, #24]
 80080be:	697a      	ldr	r2, [r7, #20]
 80080c0:	8992      	ldrh	r2, [r2, #12]
 80080c2:	fbb3 f0f2 	udiv	r0, r3, r2
 80080c6:	fb00 f202 	mul.w	r2, r0, r2
 80080ca:	1a9b      	subs	r3, r3, r2
 80080cc:	440b      	add	r3, r1
 80080ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80080d0:	4619      	mov	r1, r3
 80080d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80080d4:	f7fd fbf4 	bl	80058c0 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80080d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080dc:	4413      	add	r3, r2
 80080de:	627b      	str	r3, [r7, #36]	; 0x24
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	699a      	ldr	r2, [r3, #24]
 80080e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080e6:	441a      	add	r2, r3
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	619a      	str	r2, [r3, #24]
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	681a      	ldr	r2, [r3, #0]
 80080f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080f2:	441a      	add	r2, r3
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	601a      	str	r2, [r3, #0]
 80080f8:	687a      	ldr	r2, [r7, #4]
 80080fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080fc:	1ad3      	subs	r3, r2, r3
 80080fe:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2b00      	cmp	r3, #0
 8008104:	f47f aee1 	bne.w	8007eca <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8008108:	2300      	movs	r3, #0
}
 800810a:	4618      	mov	r0, r3
 800810c:	3738      	adds	r7, #56	; 0x38
 800810e:	46bd      	mov	sp, r7
 8008110:	bd80      	pop	{r7, pc}

08008112 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8008112:	b580      	push	{r7, lr}
 8008114:	b08c      	sub	sp, #48	; 0x30
 8008116:	af00      	add	r7, sp, #0
 8008118:	60f8      	str	r0, [r7, #12]
 800811a:	60b9      	str	r1, [r7, #8]
 800811c:	607a      	str	r2, [r7, #4]
 800811e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8008120:	68bb      	ldr	r3, [r7, #8]
 8008122:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	2200      	movs	r2, #0
 8008128:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	f107 0210 	add.w	r2, r7, #16
 8008130:	4611      	mov	r1, r2
 8008132:	4618      	mov	r0, r3
 8008134:	f7ff fc46 	bl	80079c4 <validate>
 8008138:	4603      	mov	r3, r0
 800813a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800813e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008142:	2b00      	cmp	r3, #0
 8008144:	d107      	bne.n	8008156 <f_write+0x44>
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	7d5b      	ldrb	r3, [r3, #21]
 800814a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800814e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008152:	2b00      	cmp	r3, #0
 8008154:	d002      	beq.n	800815c <f_write+0x4a>
 8008156:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800815a:	e16a      	b.n	8008432 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	7d1b      	ldrb	r3, [r3, #20]
 8008160:	f003 0302 	and.w	r3, r3, #2
 8008164:	2b00      	cmp	r3, #0
 8008166:	d101      	bne.n	800816c <f_write+0x5a>
 8008168:	2307      	movs	r3, #7
 800816a:	e162      	b.n	8008432 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	699a      	ldr	r2, [r3, #24]
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	441a      	add	r2, r3
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	699b      	ldr	r3, [r3, #24]
 8008178:	429a      	cmp	r2, r3
 800817a:	f080 814c 	bcs.w	8008416 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	699b      	ldr	r3, [r3, #24]
 8008182:	43db      	mvns	r3, r3
 8008184:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8008186:	e146      	b.n	8008416 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	699b      	ldr	r3, [r3, #24]
 800818c:	693a      	ldr	r2, [r7, #16]
 800818e:	8992      	ldrh	r2, [r2, #12]
 8008190:	fbb3 f1f2 	udiv	r1, r3, r2
 8008194:	fb01 f202 	mul.w	r2, r1, r2
 8008198:	1a9b      	subs	r3, r3, r2
 800819a:	2b00      	cmp	r3, #0
 800819c:	f040 80f1 	bne.w	8008382 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	699b      	ldr	r3, [r3, #24]
 80081a4:	693a      	ldr	r2, [r7, #16]
 80081a6:	8992      	ldrh	r2, [r2, #12]
 80081a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80081ac:	693a      	ldr	r2, [r7, #16]
 80081ae:	8952      	ldrh	r2, [r2, #10]
 80081b0:	3a01      	subs	r2, #1
 80081b2:	4013      	ands	r3, r2
 80081b4:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80081b6:	69bb      	ldr	r3, [r7, #24]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d143      	bne.n	8008244 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	699b      	ldr	r3, [r3, #24]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d10c      	bne.n	80081de <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	689b      	ldr	r3, [r3, #8]
 80081c8:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80081ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d11a      	bne.n	8008206 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	2100      	movs	r1, #0
 80081d4:	4618      	mov	r0, r3
 80081d6:	f7fe f8b1 	bl	800633c <create_chain>
 80081da:	62b8      	str	r0, [r7, #40]	; 0x28
 80081dc:	e013      	b.n	8008206 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d007      	beq.n	80081f6 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	699b      	ldr	r3, [r3, #24]
 80081ea:	4619      	mov	r1, r3
 80081ec:	68f8      	ldr	r0, [r7, #12]
 80081ee:	f7fe f93d 	bl	800646c <clmt_clust>
 80081f2:	62b8      	str	r0, [r7, #40]	; 0x28
 80081f4:	e007      	b.n	8008206 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80081f6:	68fa      	ldr	r2, [r7, #12]
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	69db      	ldr	r3, [r3, #28]
 80081fc:	4619      	mov	r1, r3
 80081fe:	4610      	mov	r0, r2
 8008200:	f7fe f89c 	bl	800633c <create_chain>
 8008204:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008208:	2b00      	cmp	r3, #0
 800820a:	f000 8109 	beq.w	8008420 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800820e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008210:	2b01      	cmp	r3, #1
 8008212:	d104      	bne.n	800821e <f_write+0x10c>
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	2202      	movs	r2, #2
 8008218:	755a      	strb	r2, [r3, #21]
 800821a:	2302      	movs	r3, #2
 800821c:	e109      	b.n	8008432 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800821e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008220:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008224:	d104      	bne.n	8008230 <f_write+0x11e>
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	2201      	movs	r2, #1
 800822a:	755a      	strb	r2, [r3, #21]
 800822c:	2301      	movs	r3, #1
 800822e:	e100      	b.n	8008432 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008234:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	689b      	ldr	r3, [r3, #8]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d102      	bne.n	8008244 <f_write+0x132>
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008242:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	7d1b      	ldrb	r3, [r3, #20]
 8008248:	b25b      	sxtb	r3, r3
 800824a:	2b00      	cmp	r3, #0
 800824c:	da18      	bge.n	8008280 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800824e:	693b      	ldr	r3, [r7, #16]
 8008250:	7858      	ldrb	r0, [r3, #1]
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	6a1a      	ldr	r2, [r3, #32]
 800825c:	2301      	movs	r3, #1
 800825e:	f7fd fa6f 	bl	8005740 <disk_write>
 8008262:	4603      	mov	r3, r0
 8008264:	2b00      	cmp	r3, #0
 8008266:	d004      	beq.n	8008272 <f_write+0x160>
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	2201      	movs	r2, #1
 800826c:	755a      	strb	r2, [r3, #21]
 800826e:	2301      	movs	r3, #1
 8008270:	e0df      	b.n	8008432 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	7d1b      	ldrb	r3, [r3, #20]
 8008276:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800827a:	b2da      	uxtb	r2, r3
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008280:	693a      	ldr	r2, [r7, #16]
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	69db      	ldr	r3, [r3, #28]
 8008286:	4619      	mov	r1, r3
 8008288:	4610      	mov	r0, r2
 800828a:	f7fd fde5 	bl	8005e58 <clust2sect>
 800828e:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008290:	697b      	ldr	r3, [r7, #20]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d104      	bne.n	80082a0 <f_write+0x18e>
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	2202      	movs	r2, #2
 800829a:	755a      	strb	r2, [r3, #21]
 800829c:	2302      	movs	r3, #2
 800829e:	e0c8      	b.n	8008432 <f_write+0x320>
			sect += csect;
 80082a0:	697a      	ldr	r2, [r7, #20]
 80082a2:	69bb      	ldr	r3, [r7, #24]
 80082a4:	4413      	add	r3, r2
 80082a6:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80082a8:	693b      	ldr	r3, [r7, #16]
 80082aa:	899b      	ldrh	r3, [r3, #12]
 80082ac:	461a      	mov	r2, r3
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80082b4:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80082b6:	6a3b      	ldr	r3, [r7, #32]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d043      	beq.n	8008344 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80082bc:	69ba      	ldr	r2, [r7, #24]
 80082be:	6a3b      	ldr	r3, [r7, #32]
 80082c0:	4413      	add	r3, r2
 80082c2:	693a      	ldr	r2, [r7, #16]
 80082c4:	8952      	ldrh	r2, [r2, #10]
 80082c6:	4293      	cmp	r3, r2
 80082c8:	d905      	bls.n	80082d6 <f_write+0x1c4>
					cc = fs->csize - csect;
 80082ca:	693b      	ldr	r3, [r7, #16]
 80082cc:	895b      	ldrh	r3, [r3, #10]
 80082ce:	461a      	mov	r2, r3
 80082d0:	69bb      	ldr	r3, [r7, #24]
 80082d2:	1ad3      	subs	r3, r2, r3
 80082d4:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80082d6:	693b      	ldr	r3, [r7, #16]
 80082d8:	7858      	ldrb	r0, [r3, #1]
 80082da:	6a3b      	ldr	r3, [r7, #32]
 80082dc:	697a      	ldr	r2, [r7, #20]
 80082de:	69f9      	ldr	r1, [r7, #28]
 80082e0:	f7fd fa2e 	bl	8005740 <disk_write>
 80082e4:	4603      	mov	r3, r0
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d004      	beq.n	80082f4 <f_write+0x1e2>
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	2201      	movs	r2, #1
 80082ee:	755a      	strb	r2, [r3, #21]
 80082f0:	2301      	movs	r3, #1
 80082f2:	e09e      	b.n	8008432 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	6a1a      	ldr	r2, [r3, #32]
 80082f8:	697b      	ldr	r3, [r7, #20]
 80082fa:	1ad3      	subs	r3, r2, r3
 80082fc:	6a3a      	ldr	r2, [r7, #32]
 80082fe:	429a      	cmp	r2, r3
 8008300:	d918      	bls.n	8008334 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	6a1a      	ldr	r2, [r3, #32]
 800830c:	697b      	ldr	r3, [r7, #20]
 800830e:	1ad3      	subs	r3, r2, r3
 8008310:	693a      	ldr	r2, [r7, #16]
 8008312:	8992      	ldrh	r2, [r2, #12]
 8008314:	fb02 f303 	mul.w	r3, r2, r3
 8008318:	69fa      	ldr	r2, [r7, #28]
 800831a:	18d1      	adds	r1, r2, r3
 800831c:	693b      	ldr	r3, [r7, #16]
 800831e:	899b      	ldrh	r3, [r3, #12]
 8008320:	461a      	mov	r2, r3
 8008322:	f7fd facd 	bl	80058c0 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	7d1b      	ldrb	r3, [r3, #20]
 800832a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800832e:	b2da      	uxtb	r2, r3
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8008334:	693b      	ldr	r3, [r7, #16]
 8008336:	899b      	ldrh	r3, [r3, #12]
 8008338:	461a      	mov	r2, r3
 800833a:	6a3b      	ldr	r3, [r7, #32]
 800833c:	fb02 f303 	mul.w	r3, r2, r3
 8008340:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8008342:	e04b      	b.n	80083dc <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	6a1b      	ldr	r3, [r3, #32]
 8008348:	697a      	ldr	r2, [r7, #20]
 800834a:	429a      	cmp	r2, r3
 800834c:	d016      	beq.n	800837c <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	699a      	ldr	r2, [r3, #24]
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008356:	429a      	cmp	r2, r3
 8008358:	d210      	bcs.n	800837c <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800835a:	693b      	ldr	r3, [r7, #16]
 800835c:	7858      	ldrb	r0, [r3, #1]
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008364:	2301      	movs	r3, #1
 8008366:	697a      	ldr	r2, [r7, #20]
 8008368:	f7fd f9ca 	bl	8005700 <disk_read>
 800836c:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800836e:	2b00      	cmp	r3, #0
 8008370:	d004      	beq.n	800837c <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	2201      	movs	r2, #1
 8008376:	755a      	strb	r2, [r3, #21]
 8008378:	2301      	movs	r3, #1
 800837a:	e05a      	b.n	8008432 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	697a      	ldr	r2, [r7, #20]
 8008380:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008382:	693b      	ldr	r3, [r7, #16]
 8008384:	899b      	ldrh	r3, [r3, #12]
 8008386:	4618      	mov	r0, r3
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	699b      	ldr	r3, [r3, #24]
 800838c:	693a      	ldr	r2, [r7, #16]
 800838e:	8992      	ldrh	r2, [r2, #12]
 8008390:	fbb3 f1f2 	udiv	r1, r3, r2
 8008394:	fb01 f202 	mul.w	r2, r1, r2
 8008398:	1a9b      	subs	r3, r3, r2
 800839a:	1ac3      	subs	r3, r0, r3
 800839c:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800839e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	429a      	cmp	r2, r3
 80083a4:	d901      	bls.n	80083aa <f_write+0x298>
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	699b      	ldr	r3, [r3, #24]
 80083b4:	693a      	ldr	r2, [r7, #16]
 80083b6:	8992      	ldrh	r2, [r2, #12]
 80083b8:	fbb3 f0f2 	udiv	r0, r3, r2
 80083bc:	fb00 f202 	mul.w	r2, r0, r2
 80083c0:	1a9b      	subs	r3, r3, r2
 80083c2:	440b      	add	r3, r1
 80083c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083c6:	69f9      	ldr	r1, [r7, #28]
 80083c8:	4618      	mov	r0, r3
 80083ca:	f7fd fa79 	bl	80058c0 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	7d1b      	ldrb	r3, [r3, #20]
 80083d2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80083d6:	b2da      	uxtb	r2, r3
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80083dc:	69fa      	ldr	r2, [r7, #28]
 80083de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083e0:	4413      	add	r3, r2
 80083e2:	61fb      	str	r3, [r7, #28]
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	699a      	ldr	r2, [r3, #24]
 80083e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ea:	441a      	add	r2, r3
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	619a      	str	r2, [r3, #24]
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	68da      	ldr	r2, [r3, #12]
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	699b      	ldr	r3, [r3, #24]
 80083f8:	429a      	cmp	r2, r3
 80083fa:	bf38      	it	cc
 80083fc:	461a      	movcc	r2, r3
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	60da      	str	r2, [r3, #12]
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	681a      	ldr	r2, [r3, #0]
 8008406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008408:	441a      	add	r2, r3
 800840a:	683b      	ldr	r3, [r7, #0]
 800840c:	601a      	str	r2, [r3, #0]
 800840e:	687a      	ldr	r2, [r7, #4]
 8008410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008412:	1ad3      	subs	r3, r2, r3
 8008414:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	2b00      	cmp	r3, #0
 800841a:	f47f aeb5 	bne.w	8008188 <f_write+0x76>
 800841e:	e000      	b.n	8008422 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008420:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	7d1b      	ldrb	r3, [r3, #20]
 8008426:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800842a:	b2da      	uxtb	r2, r3
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8008430:	2300      	movs	r3, #0
}
 8008432:	4618      	mov	r0, r3
 8008434:	3730      	adds	r7, #48	; 0x30
 8008436:	46bd      	mov	sp, r7
 8008438:	bd80      	pop	{r7, pc}

0800843a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800843a:	b580      	push	{r7, lr}
 800843c:	b086      	sub	sp, #24
 800843e:	af00      	add	r7, sp, #0
 8008440:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	f107 0208 	add.w	r2, r7, #8
 8008448:	4611      	mov	r1, r2
 800844a:	4618      	mov	r0, r3
 800844c:	f7ff faba 	bl	80079c4 <validate>
 8008450:	4603      	mov	r3, r0
 8008452:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008454:	7dfb      	ldrb	r3, [r7, #23]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d168      	bne.n	800852c <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	7d1b      	ldrb	r3, [r3, #20]
 800845e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008462:	2b00      	cmp	r3, #0
 8008464:	d062      	beq.n	800852c <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	7d1b      	ldrb	r3, [r3, #20]
 800846a:	b25b      	sxtb	r3, r3
 800846c:	2b00      	cmp	r3, #0
 800846e:	da15      	bge.n	800849c <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008470:	68bb      	ldr	r3, [r7, #8]
 8008472:	7858      	ldrb	r0, [r3, #1]
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	6a1a      	ldr	r2, [r3, #32]
 800847e:	2301      	movs	r3, #1
 8008480:	f7fd f95e 	bl	8005740 <disk_write>
 8008484:	4603      	mov	r3, r0
 8008486:	2b00      	cmp	r3, #0
 8008488:	d001      	beq.n	800848e <f_sync+0x54>
 800848a:	2301      	movs	r3, #1
 800848c:	e04f      	b.n	800852e <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	7d1b      	ldrb	r3, [r3, #20]
 8008492:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008496:	b2da      	uxtb	r2, r3
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800849c:	f7fd f892 	bl	80055c4 <get_fattime>
 80084a0:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80084a2:	68ba      	ldr	r2, [r7, #8]
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084a8:	4619      	mov	r1, r3
 80084aa:	4610      	mov	r0, r2
 80084ac:	f7fd fc36 	bl	8005d1c <move_window>
 80084b0:	4603      	mov	r3, r0
 80084b2:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80084b4:	7dfb      	ldrb	r3, [r7, #23]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d138      	bne.n	800852c <f_sync+0xf2>
					dir = fp->dir_ptr;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084be:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	330b      	adds	r3, #11
 80084c4:	781a      	ldrb	r2, [r3, #0]
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	330b      	adds	r3, #11
 80084ca:	f042 0220 	orr.w	r2, r2, #32
 80084ce:	b2d2      	uxtb	r2, r2
 80084d0:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	6818      	ldr	r0, [r3, #0]
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	689b      	ldr	r3, [r3, #8]
 80084da:	461a      	mov	r2, r3
 80084dc:	68f9      	ldr	r1, [r7, #12]
 80084de:	f7fe f9c2 	bl	8006866 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	f103 021c 	add.w	r2, r3, #28
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	68db      	ldr	r3, [r3, #12]
 80084ec:	4619      	mov	r1, r3
 80084ee:	4610      	mov	r0, r2
 80084f0:	f7fd f9ba 	bl	8005868 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	3316      	adds	r3, #22
 80084f8:	6939      	ldr	r1, [r7, #16]
 80084fa:	4618      	mov	r0, r3
 80084fc:	f7fd f9b4 	bl	8005868 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	3312      	adds	r3, #18
 8008504:	2100      	movs	r1, #0
 8008506:	4618      	mov	r0, r3
 8008508:	f7fd f993 	bl	8005832 <st_word>
					fs->wflag = 1;
 800850c:	68bb      	ldr	r3, [r7, #8]
 800850e:	2201      	movs	r2, #1
 8008510:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8008512:	68bb      	ldr	r3, [r7, #8]
 8008514:	4618      	mov	r0, r3
 8008516:	f7fd fc2f 	bl	8005d78 <sync_fs>
 800851a:	4603      	mov	r3, r0
 800851c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	7d1b      	ldrb	r3, [r3, #20]
 8008522:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008526:	b2da      	uxtb	r2, r3
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800852c:	7dfb      	ldrb	r3, [r7, #23]
}
 800852e:	4618      	mov	r0, r3
 8008530:	3718      	adds	r7, #24
 8008532:	46bd      	mov	sp, r7
 8008534:	bd80      	pop	{r7, pc}

08008536 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8008536:	b580      	push	{r7, lr}
 8008538:	b084      	sub	sp, #16
 800853a:	af00      	add	r7, sp, #0
 800853c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800853e:	6878      	ldr	r0, [r7, #4]
 8008540:	f7ff ff7b 	bl	800843a <f_sync>
 8008544:	4603      	mov	r3, r0
 8008546:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8008548:	7bfb      	ldrb	r3, [r7, #15]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d118      	bne.n	8008580 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	f107 0208 	add.w	r2, r7, #8
 8008554:	4611      	mov	r1, r2
 8008556:	4618      	mov	r0, r3
 8008558:	f7ff fa34 	bl	80079c4 <validate>
 800855c:	4603      	mov	r3, r0
 800855e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008560:	7bfb      	ldrb	r3, [r7, #15]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d10c      	bne.n	8008580 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	691b      	ldr	r3, [r3, #16]
 800856a:	4618      	mov	r0, r3
 800856c:	f7fd fb32 	bl	8005bd4 <dec_lock>
 8008570:	4603      	mov	r3, r0
 8008572:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8008574:	7bfb      	ldrb	r3, [r7, #15]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d102      	bne.n	8008580 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	2200      	movs	r2, #0
 800857e:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8008580:	7bfb      	ldrb	r3, [r7, #15]
}
 8008582:	4618      	mov	r0, r3
 8008584:	3710      	adds	r7, #16
 8008586:	46bd      	mov	sp, r7
 8008588:	bd80      	pop	{r7, pc}

0800858a <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800858a:	b580      	push	{r7, lr}
 800858c:	b092      	sub	sp, #72	; 0x48
 800858e:	af00      	add	r7, sp, #0
 8008590:	60f8      	str	r0, [r7, #12]
 8008592:	60b9      	str	r1, [r7, #8]
 8008594:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8008596:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800859a:	f107 030c 	add.w	r3, r7, #12
 800859e:	2200      	movs	r2, #0
 80085a0:	4618      	mov	r0, r3
 80085a2:	f7fe ff89 	bl	80074b8 <find_volume>
 80085a6:	4603      	mov	r3, r0
 80085a8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 80085ac:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	f040 8099 	bne.w	80086e8 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 80085b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 80085bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085be:	699a      	ldr	r2, [r3, #24]
 80085c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085c2:	69db      	ldr	r3, [r3, #28]
 80085c4:	3b02      	subs	r3, #2
 80085c6:	429a      	cmp	r2, r3
 80085c8:	d804      	bhi.n	80085d4 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 80085ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085cc:	699a      	ldr	r2, [r3, #24]
 80085ce:	68bb      	ldr	r3, [r7, #8]
 80085d0:	601a      	str	r2, [r3, #0]
 80085d2:	e089      	b.n	80086e8 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 80085d4:	2300      	movs	r3, #0
 80085d6:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 80085d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085da:	781b      	ldrb	r3, [r3, #0]
 80085dc:	2b01      	cmp	r3, #1
 80085de:	d128      	bne.n	8008632 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 80085e0:	2302      	movs	r3, #2
 80085e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80085e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085e6:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 80085e8:	f107 0314 	add.w	r3, r7, #20
 80085ec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80085ee:	4618      	mov	r0, r3
 80085f0:	f7fd fc51 	bl	8005e96 <get_fat>
 80085f4:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 80085f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085fc:	d103      	bne.n	8008606 <f_getfree+0x7c>
 80085fe:	2301      	movs	r3, #1
 8008600:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008604:	e063      	b.n	80086ce <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8008606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008608:	2b01      	cmp	r3, #1
 800860a:	d103      	bne.n	8008614 <f_getfree+0x8a>
 800860c:	2302      	movs	r3, #2
 800860e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008612:	e05c      	b.n	80086ce <f_getfree+0x144>
					if (stat == 0) nfree++;
 8008614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008616:	2b00      	cmp	r3, #0
 8008618:	d102      	bne.n	8008620 <f_getfree+0x96>
 800861a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800861c:	3301      	adds	r3, #1
 800861e:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 8008620:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008622:	3301      	adds	r3, #1
 8008624:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008628:	69db      	ldr	r3, [r3, #28]
 800862a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800862c:	429a      	cmp	r2, r3
 800862e:	d3db      	bcc.n	80085e8 <f_getfree+0x5e>
 8008630:	e04d      	b.n	80086ce <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8008632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008634:	69db      	ldr	r3, [r3, #28]
 8008636:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800863a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800863c:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 800863e:	2300      	movs	r3, #0
 8008640:	637b      	str	r3, [r7, #52]	; 0x34
 8008642:	2300      	movs	r3, #0
 8008644:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 8008646:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008648:	2b00      	cmp	r3, #0
 800864a:	d113      	bne.n	8008674 <f_getfree+0xea>
							res = move_window(fs, sect++);
 800864c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800864e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008650:	1c5a      	adds	r2, r3, #1
 8008652:	63ba      	str	r2, [r7, #56]	; 0x38
 8008654:	4619      	mov	r1, r3
 8008656:	f7fd fb61 	bl	8005d1c <move_window>
 800865a:	4603      	mov	r3, r0
 800865c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 8008660:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008664:	2b00      	cmp	r3, #0
 8008666:	d131      	bne.n	80086cc <f_getfree+0x142>
							p = fs->win;
 8008668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800866a:	3338      	adds	r3, #56	; 0x38
 800866c:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 800866e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008670:	899b      	ldrh	r3, [r3, #12]
 8008672:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8008674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008676:	781b      	ldrb	r3, [r3, #0]
 8008678:	2b02      	cmp	r3, #2
 800867a:	d10f      	bne.n	800869c <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800867c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800867e:	f7fd f89d 	bl	80057bc <ld_word>
 8008682:	4603      	mov	r3, r0
 8008684:	2b00      	cmp	r3, #0
 8008686:	d102      	bne.n	800868e <f_getfree+0x104>
 8008688:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800868a:	3301      	adds	r3, #1
 800868c:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 800868e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008690:	3302      	adds	r3, #2
 8008692:	633b      	str	r3, [r7, #48]	; 0x30
 8008694:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008696:	3b02      	subs	r3, #2
 8008698:	637b      	str	r3, [r7, #52]	; 0x34
 800869a:	e010      	b.n	80086be <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800869c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800869e:	f7fd f8a5 	bl	80057ec <ld_dword>
 80086a2:	4603      	mov	r3, r0
 80086a4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d102      	bne.n	80086b2 <f_getfree+0x128>
 80086ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80086ae:	3301      	adds	r3, #1
 80086b0:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 80086b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086b4:	3304      	adds	r3, #4
 80086b6:	633b      	str	r3, [r7, #48]	; 0x30
 80086b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086ba:	3b04      	subs	r3, #4
 80086bc:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 80086be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086c0:	3b01      	subs	r3, #1
 80086c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80086c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d1bd      	bne.n	8008646 <f_getfree+0xbc>
 80086ca:	e000      	b.n	80086ce <f_getfree+0x144>
							if (res != FR_OK) break;
 80086cc:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 80086ce:	68bb      	ldr	r3, [r7, #8]
 80086d0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80086d2:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 80086d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086d6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80086d8:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 80086da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086dc:	791a      	ldrb	r2, [r3, #4]
 80086de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086e0:	f042 0201 	orr.w	r2, r2, #1
 80086e4:	b2d2      	uxtb	r2, r2
 80086e6:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 80086e8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80086ec:	4618      	mov	r0, r3
 80086ee:	3748      	adds	r7, #72	; 0x48
 80086f0:	46bd      	mov	sp, r7
 80086f2:	bd80      	pop	{r7, pc}

080086f4 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 80086f4:	b580      	push	{r7, lr}
 80086f6:	b088      	sub	sp, #32
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	60f8      	str	r0, [r7, #12]
 80086fc:	60b9      	str	r1, [r7, #8]
 80086fe:	607a      	str	r2, [r7, #4]
	int n = 0;
 8008700:	2300      	movs	r3, #0
 8008702:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8008708:	e01b      	b.n	8008742 <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 800870a:	f107 0310 	add.w	r3, r7, #16
 800870e:	f107 0114 	add.w	r1, r7, #20
 8008712:	2201      	movs	r2, #1
 8008714:	6878      	ldr	r0, [r7, #4]
 8008716:	f7ff fb9d 	bl	8007e54 <f_read>
		if (rc != 1) break;
 800871a:	693b      	ldr	r3, [r7, #16]
 800871c:	2b01      	cmp	r3, #1
 800871e:	d116      	bne.n	800874e <f_gets+0x5a>
		c = s[0];
 8008720:	7d3b      	ldrb	r3, [r7, #20]
 8008722:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8008724:	7dfb      	ldrb	r3, [r7, #23]
 8008726:	2b0d      	cmp	r3, #13
 8008728:	d100      	bne.n	800872c <f_gets+0x38>
 800872a:	e00a      	b.n	8008742 <f_gets+0x4e>
		*p++ = c;
 800872c:	69bb      	ldr	r3, [r7, #24]
 800872e:	1c5a      	adds	r2, r3, #1
 8008730:	61ba      	str	r2, [r7, #24]
 8008732:	7dfa      	ldrb	r2, [r7, #23]
 8008734:	701a      	strb	r2, [r3, #0]
		n++;
 8008736:	69fb      	ldr	r3, [r7, #28]
 8008738:	3301      	adds	r3, #1
 800873a:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 800873c:	7dfb      	ldrb	r3, [r7, #23]
 800873e:	2b0a      	cmp	r3, #10
 8008740:	d007      	beq.n	8008752 <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8008742:	68bb      	ldr	r3, [r7, #8]
 8008744:	3b01      	subs	r3, #1
 8008746:	69fa      	ldr	r2, [r7, #28]
 8008748:	429a      	cmp	r2, r3
 800874a:	dbde      	blt.n	800870a <f_gets+0x16>
 800874c:	e002      	b.n	8008754 <f_gets+0x60>
		if (rc != 1) break;
 800874e:	bf00      	nop
 8008750:	e000      	b.n	8008754 <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 8008752:	bf00      	nop
	}
	*p = 0;
 8008754:	69bb      	ldr	r3, [r7, #24]
 8008756:	2200      	movs	r2, #0
 8008758:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 800875a:	69fb      	ldr	r3, [r7, #28]
 800875c:	2b00      	cmp	r3, #0
 800875e:	d001      	beq.n	8008764 <f_gets+0x70>
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	e000      	b.n	8008766 <f_gets+0x72>
 8008764:	2300      	movs	r3, #0
}
 8008766:	4618      	mov	r0, r3
 8008768:	3720      	adds	r7, #32
 800876a:	46bd      	mov	sp, r7
 800876c:	bd80      	pop	{r7, pc}

0800876e <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800876e:	b580      	push	{r7, lr}
 8008770:	b084      	sub	sp, #16
 8008772:	af00      	add	r7, sp, #0
 8008774:	6078      	str	r0, [r7, #4]
 8008776:	460b      	mov	r3, r1
 8008778:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800877a:	78fb      	ldrb	r3, [r7, #3]
 800877c:	2b0a      	cmp	r3, #10
 800877e:	d103      	bne.n	8008788 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8008780:	210d      	movs	r1, #13
 8008782:	6878      	ldr	r0, [r7, #4]
 8008784:	f7ff fff3 	bl	800876e <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	685b      	ldr	r3, [r3, #4]
 800878c:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	2b00      	cmp	r3, #0
 8008792:	db25      	blt.n	80087e0 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	1c5a      	adds	r2, r3, #1
 8008798:	60fa      	str	r2, [r7, #12]
 800879a:	687a      	ldr	r2, [r7, #4]
 800879c:	4413      	add	r3, r2
 800879e:	78fa      	ldrb	r2, [r7, #3]
 80087a0:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	2b3c      	cmp	r3, #60	; 0x3c
 80087a6:	dd12      	ble.n	80087ce <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	6818      	ldr	r0, [r3, #0]
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	f103 010c 	add.w	r1, r3, #12
 80087b2:	68fa      	ldr	r2, [r7, #12]
 80087b4:	f107 0308 	add.w	r3, r7, #8
 80087b8:	f7ff fcab 	bl	8008112 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 80087bc:	68ba      	ldr	r2, [r7, #8]
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	429a      	cmp	r2, r3
 80087c2:	d101      	bne.n	80087c8 <putc_bfd+0x5a>
 80087c4:	2300      	movs	r3, #0
 80087c6:	e001      	b.n	80087cc <putc_bfd+0x5e>
 80087c8:	f04f 33ff 	mov.w	r3, #4294967295
 80087cc:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	68fa      	ldr	r2, [r7, #12]
 80087d2:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	689b      	ldr	r3, [r3, #8]
 80087d8:	1c5a      	adds	r2, r3, #1
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	609a      	str	r2, [r3, #8]
 80087de:	e000      	b.n	80087e2 <putc_bfd+0x74>
	if (i < 0) return;
 80087e0:	bf00      	nop
}
 80087e2:	3710      	adds	r7, #16
 80087e4:	46bd      	mov	sp, r7
 80087e6:	bd80      	pop	{r7, pc}

080087e8 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b084      	sub	sp, #16
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	685b      	ldr	r3, [r3, #4]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	db16      	blt.n	8008826 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	6818      	ldr	r0, [r3, #0]
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	f103 010c 	add.w	r1, r3, #12
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	685b      	ldr	r3, [r3, #4]
 8008806:	461a      	mov	r2, r3
 8008808:	f107 030c 	add.w	r3, r7, #12
 800880c:	f7ff fc81 	bl	8008112 <f_write>
 8008810:	4603      	mov	r3, r0
 8008812:	2b00      	cmp	r3, #0
 8008814:	d107      	bne.n	8008826 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	685b      	ldr	r3, [r3, #4]
 800881a:	68fa      	ldr	r2, [r7, #12]
 800881c:	4293      	cmp	r3, r2
 800881e:	d102      	bne.n	8008826 <putc_flush+0x3e>
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	689b      	ldr	r3, [r3, #8]
 8008824:	e001      	b.n	800882a <putc_flush+0x42>
	return EOF;
 8008826:	f04f 33ff 	mov.w	r3, #4294967295
}
 800882a:	4618      	mov	r0, r3
 800882c:	3710      	adds	r7, #16
 800882e:	46bd      	mov	sp, r7
 8008830:	bd80      	pop	{r7, pc}

08008832 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8008832:	b480      	push	{r7}
 8008834:	b083      	sub	sp, #12
 8008836:	af00      	add	r7, sp, #0
 8008838:	6078      	str	r0, [r7, #4]
 800883a:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	683a      	ldr	r2, [r7, #0]
 8008840:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	2200      	movs	r2, #0
 8008846:	605a      	str	r2, [r3, #4]
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	685a      	ldr	r2, [r3, #4]
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	609a      	str	r2, [r3, #8]
}
 8008850:	bf00      	nop
 8008852:	370c      	adds	r7, #12
 8008854:	46bd      	mov	sp, r7
 8008856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885a:	4770      	bx	lr

0800885c <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800885c:	b580      	push	{r7, lr}
 800885e:	b096      	sub	sp, #88	; 0x58
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
 8008864:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 8008866:	f107 030c 	add.w	r3, r7, #12
 800886a:	6839      	ldr	r1, [r7, #0]
 800886c:	4618      	mov	r0, r3
 800886e:	f7ff ffe0 	bl	8008832 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 8008872:	e009      	b.n	8008888 <f_puts+0x2c>
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	1c5a      	adds	r2, r3, #1
 8008878:	607a      	str	r2, [r7, #4]
 800887a:	781a      	ldrb	r2, [r3, #0]
 800887c:	f107 030c 	add.w	r3, r7, #12
 8008880:	4611      	mov	r1, r2
 8008882:	4618      	mov	r0, r3
 8008884:	f7ff ff73 	bl	800876e <putc_bfd>
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	781b      	ldrb	r3, [r3, #0]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d1f1      	bne.n	8008874 <f_puts+0x18>
	return putc_flush(&pb);
 8008890:	f107 030c 	add.w	r3, r7, #12
 8008894:	4618      	mov	r0, r3
 8008896:	f7ff ffa7 	bl	80087e8 <putc_flush>
 800889a:	4603      	mov	r3, r0
}
 800889c:	4618      	mov	r0, r3
 800889e:	3758      	adds	r7, #88	; 0x58
 80088a0:	46bd      	mov	sp, r7
 80088a2:	bd80      	pop	{r7, pc}

080088a4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80088a4:	b480      	push	{r7}
 80088a6:	b087      	sub	sp, #28
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	60f8      	str	r0, [r7, #12]
 80088ac:	60b9      	str	r1, [r7, #8]
 80088ae:	4613      	mov	r3, r2
 80088b0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80088b2:	2301      	movs	r3, #1
 80088b4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80088b6:	2300      	movs	r3, #0
 80088b8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80088ba:	4b1f      	ldr	r3, [pc, #124]	; (8008938 <FATFS_LinkDriverEx+0x94>)
 80088bc:	7a5b      	ldrb	r3, [r3, #9]
 80088be:	b2db      	uxtb	r3, r3
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d131      	bne.n	8008928 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80088c4:	4b1c      	ldr	r3, [pc, #112]	; (8008938 <FATFS_LinkDriverEx+0x94>)
 80088c6:	7a5b      	ldrb	r3, [r3, #9]
 80088c8:	b2db      	uxtb	r3, r3
 80088ca:	461a      	mov	r2, r3
 80088cc:	4b1a      	ldr	r3, [pc, #104]	; (8008938 <FATFS_LinkDriverEx+0x94>)
 80088ce:	2100      	movs	r1, #0
 80088d0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80088d2:	4b19      	ldr	r3, [pc, #100]	; (8008938 <FATFS_LinkDriverEx+0x94>)
 80088d4:	7a5b      	ldrb	r3, [r3, #9]
 80088d6:	b2db      	uxtb	r3, r3
 80088d8:	4a17      	ldr	r2, [pc, #92]	; (8008938 <FATFS_LinkDriverEx+0x94>)
 80088da:	009b      	lsls	r3, r3, #2
 80088dc:	4413      	add	r3, r2
 80088de:	68fa      	ldr	r2, [r7, #12]
 80088e0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80088e2:	4b15      	ldr	r3, [pc, #84]	; (8008938 <FATFS_LinkDriverEx+0x94>)
 80088e4:	7a5b      	ldrb	r3, [r3, #9]
 80088e6:	b2db      	uxtb	r3, r3
 80088e8:	461a      	mov	r2, r3
 80088ea:	4b13      	ldr	r3, [pc, #76]	; (8008938 <FATFS_LinkDriverEx+0x94>)
 80088ec:	4413      	add	r3, r2
 80088ee:	79fa      	ldrb	r2, [r7, #7]
 80088f0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80088f2:	4b11      	ldr	r3, [pc, #68]	; (8008938 <FATFS_LinkDriverEx+0x94>)
 80088f4:	7a5b      	ldrb	r3, [r3, #9]
 80088f6:	b2db      	uxtb	r3, r3
 80088f8:	1c5a      	adds	r2, r3, #1
 80088fa:	b2d1      	uxtb	r1, r2
 80088fc:	4a0e      	ldr	r2, [pc, #56]	; (8008938 <FATFS_LinkDriverEx+0x94>)
 80088fe:	7251      	strb	r1, [r2, #9]
 8008900:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008902:	7dbb      	ldrb	r3, [r7, #22]
 8008904:	3330      	adds	r3, #48	; 0x30
 8008906:	b2da      	uxtb	r2, r3
 8008908:	68bb      	ldr	r3, [r7, #8]
 800890a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800890c:	68bb      	ldr	r3, [r7, #8]
 800890e:	3301      	adds	r3, #1
 8008910:	223a      	movs	r2, #58	; 0x3a
 8008912:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008914:	68bb      	ldr	r3, [r7, #8]
 8008916:	3302      	adds	r3, #2
 8008918:	222f      	movs	r2, #47	; 0x2f
 800891a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800891c:	68bb      	ldr	r3, [r7, #8]
 800891e:	3303      	adds	r3, #3
 8008920:	2200      	movs	r2, #0
 8008922:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008924:	2300      	movs	r3, #0
 8008926:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8008928:	7dfb      	ldrb	r3, [r7, #23]
}
 800892a:	4618      	mov	r0, r3
 800892c:	371c      	adds	r7, #28
 800892e:	46bd      	mov	sp, r7
 8008930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008934:	4770      	bx	lr
 8008936:	bf00      	nop
 8008938:	200029a4 	.word	0x200029a4

0800893c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800893c:	b580      	push	{r7, lr}
 800893e:	b082      	sub	sp, #8
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
 8008944:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8008946:	2200      	movs	r2, #0
 8008948:	6839      	ldr	r1, [r7, #0]
 800894a:	6878      	ldr	r0, [r7, #4]
 800894c:	f7ff ffaa 	bl	80088a4 <FATFS_LinkDriverEx>
 8008950:	4603      	mov	r3, r0
}
 8008952:	4618      	mov	r0, r3
 8008954:	3708      	adds	r7, #8
 8008956:	46bd      	mov	sp, r7
 8008958:	bd80      	pop	{r7, pc}
	...

0800895c <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800895c:	b480      	push	{r7}
 800895e:	b085      	sub	sp, #20
 8008960:	af00      	add	r7, sp, #0
 8008962:	4603      	mov	r3, r0
 8008964:	6039      	str	r1, [r7, #0]
 8008966:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8008968:	88fb      	ldrh	r3, [r7, #6]
 800896a:	2b7f      	cmp	r3, #127	; 0x7f
 800896c:	d802      	bhi.n	8008974 <ff_convert+0x18>
		c = chr;
 800896e:	88fb      	ldrh	r3, [r7, #6]
 8008970:	81fb      	strh	r3, [r7, #14]
 8008972:	e025      	b.n	80089c0 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8008974:	683b      	ldr	r3, [r7, #0]
 8008976:	2b00      	cmp	r3, #0
 8008978:	d00b      	beq.n	8008992 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800897a:	88fb      	ldrh	r3, [r7, #6]
 800897c:	2bff      	cmp	r3, #255	; 0xff
 800897e:	d805      	bhi.n	800898c <ff_convert+0x30>
 8008980:	88fb      	ldrh	r3, [r7, #6]
 8008982:	3b80      	subs	r3, #128	; 0x80
 8008984:	4a12      	ldr	r2, [pc, #72]	; (80089d0 <ff_convert+0x74>)
 8008986:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800898a:	e000      	b.n	800898e <ff_convert+0x32>
 800898c:	2300      	movs	r3, #0
 800898e:	81fb      	strh	r3, [r7, #14]
 8008990:	e016      	b.n	80089c0 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8008992:	2300      	movs	r3, #0
 8008994:	81fb      	strh	r3, [r7, #14]
 8008996:	e009      	b.n	80089ac <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8008998:	89fb      	ldrh	r3, [r7, #14]
 800899a:	4a0d      	ldr	r2, [pc, #52]	; (80089d0 <ff_convert+0x74>)
 800899c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80089a0:	88fa      	ldrh	r2, [r7, #6]
 80089a2:	429a      	cmp	r2, r3
 80089a4:	d006      	beq.n	80089b4 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 80089a6:	89fb      	ldrh	r3, [r7, #14]
 80089a8:	3301      	adds	r3, #1
 80089aa:	81fb      	strh	r3, [r7, #14]
 80089ac:	89fb      	ldrh	r3, [r7, #14]
 80089ae:	2b7f      	cmp	r3, #127	; 0x7f
 80089b0:	d9f2      	bls.n	8008998 <ff_convert+0x3c>
 80089b2:	e000      	b.n	80089b6 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 80089b4:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 80089b6:	89fb      	ldrh	r3, [r7, #14]
 80089b8:	3380      	adds	r3, #128	; 0x80
 80089ba:	b29b      	uxth	r3, r3
 80089bc:	b2db      	uxtb	r3, r3
 80089be:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 80089c0:	89fb      	ldrh	r3, [r7, #14]
}
 80089c2:	4618      	mov	r0, r3
 80089c4:	3714      	adds	r7, #20
 80089c6:	46bd      	mov	sp, r7
 80089c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089cc:	4770      	bx	lr
 80089ce:	bf00      	nop
 80089d0:	08009734 	.word	0x08009734

080089d4 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 80089d4:	b480      	push	{r7}
 80089d6:	b087      	sub	sp, #28
 80089d8:	af00      	add	r7, sp, #0
 80089da:	4603      	mov	r3, r0
 80089dc:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 80089de:	88fb      	ldrh	r3, [r7, #6]
 80089e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80089e4:	d201      	bcs.n	80089ea <ff_wtoupper+0x16>
 80089e6:	4b3e      	ldr	r3, [pc, #248]	; (8008ae0 <ff_wtoupper+0x10c>)
 80089e8:	e000      	b.n	80089ec <ff_wtoupper+0x18>
 80089ea:	4b3e      	ldr	r3, [pc, #248]	; (8008ae4 <ff_wtoupper+0x110>)
 80089ec:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 80089ee:	697b      	ldr	r3, [r7, #20]
 80089f0:	1c9a      	adds	r2, r3, #2
 80089f2:	617a      	str	r2, [r7, #20]
 80089f4:	881b      	ldrh	r3, [r3, #0]
 80089f6:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 80089f8:	8a7b      	ldrh	r3, [r7, #18]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d068      	beq.n	8008ad0 <ff_wtoupper+0xfc>
 80089fe:	88fa      	ldrh	r2, [r7, #6]
 8008a00:	8a7b      	ldrh	r3, [r7, #18]
 8008a02:	429a      	cmp	r2, r3
 8008a04:	d364      	bcc.n	8008ad0 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8008a06:	697b      	ldr	r3, [r7, #20]
 8008a08:	1c9a      	adds	r2, r3, #2
 8008a0a:	617a      	str	r2, [r7, #20]
 8008a0c:	881b      	ldrh	r3, [r3, #0]
 8008a0e:	823b      	strh	r3, [r7, #16]
 8008a10:	8a3b      	ldrh	r3, [r7, #16]
 8008a12:	0a1b      	lsrs	r3, r3, #8
 8008a14:	81fb      	strh	r3, [r7, #14]
 8008a16:	8a3b      	ldrh	r3, [r7, #16]
 8008a18:	b2db      	uxtb	r3, r3
 8008a1a:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8008a1c:	88fa      	ldrh	r2, [r7, #6]
 8008a1e:	8a79      	ldrh	r1, [r7, #18]
 8008a20:	8a3b      	ldrh	r3, [r7, #16]
 8008a22:	440b      	add	r3, r1
 8008a24:	429a      	cmp	r2, r3
 8008a26:	da49      	bge.n	8008abc <ff_wtoupper+0xe8>
			switch (cmd) {
 8008a28:	89fb      	ldrh	r3, [r7, #14]
 8008a2a:	2b08      	cmp	r3, #8
 8008a2c:	d84f      	bhi.n	8008ace <ff_wtoupper+0xfa>
 8008a2e:	a201      	add	r2, pc, #4	; (adr r2, 8008a34 <ff_wtoupper+0x60>)
 8008a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a34:	08008a59 	.word	0x08008a59
 8008a38:	08008a6b 	.word	0x08008a6b
 8008a3c:	08008a81 	.word	0x08008a81
 8008a40:	08008a89 	.word	0x08008a89
 8008a44:	08008a91 	.word	0x08008a91
 8008a48:	08008a99 	.word	0x08008a99
 8008a4c:	08008aa1 	.word	0x08008aa1
 8008a50:	08008aa9 	.word	0x08008aa9
 8008a54:	08008ab1 	.word	0x08008ab1
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8008a58:	88fa      	ldrh	r2, [r7, #6]
 8008a5a:	8a7b      	ldrh	r3, [r7, #18]
 8008a5c:	1ad3      	subs	r3, r2, r3
 8008a5e:	005b      	lsls	r3, r3, #1
 8008a60:	697a      	ldr	r2, [r7, #20]
 8008a62:	4413      	add	r3, r2
 8008a64:	881b      	ldrh	r3, [r3, #0]
 8008a66:	80fb      	strh	r3, [r7, #6]
 8008a68:	e027      	b.n	8008aba <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8008a6a:	88fa      	ldrh	r2, [r7, #6]
 8008a6c:	8a7b      	ldrh	r3, [r7, #18]
 8008a6e:	1ad3      	subs	r3, r2, r3
 8008a70:	b29b      	uxth	r3, r3
 8008a72:	f003 0301 	and.w	r3, r3, #1
 8008a76:	b29b      	uxth	r3, r3
 8008a78:	88fa      	ldrh	r2, [r7, #6]
 8008a7a:	1ad3      	subs	r3, r2, r3
 8008a7c:	80fb      	strh	r3, [r7, #6]
 8008a7e:	e01c      	b.n	8008aba <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8008a80:	88fb      	ldrh	r3, [r7, #6]
 8008a82:	3b10      	subs	r3, #16
 8008a84:	80fb      	strh	r3, [r7, #6]
 8008a86:	e018      	b.n	8008aba <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8008a88:	88fb      	ldrh	r3, [r7, #6]
 8008a8a:	3b20      	subs	r3, #32
 8008a8c:	80fb      	strh	r3, [r7, #6]
 8008a8e:	e014      	b.n	8008aba <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8008a90:	88fb      	ldrh	r3, [r7, #6]
 8008a92:	3b30      	subs	r3, #48	; 0x30
 8008a94:	80fb      	strh	r3, [r7, #6]
 8008a96:	e010      	b.n	8008aba <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8008a98:	88fb      	ldrh	r3, [r7, #6]
 8008a9a:	3b1a      	subs	r3, #26
 8008a9c:	80fb      	strh	r3, [r7, #6]
 8008a9e:	e00c      	b.n	8008aba <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8008aa0:	88fb      	ldrh	r3, [r7, #6]
 8008aa2:	3308      	adds	r3, #8
 8008aa4:	80fb      	strh	r3, [r7, #6]
 8008aa6:	e008      	b.n	8008aba <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8008aa8:	88fb      	ldrh	r3, [r7, #6]
 8008aaa:	3b50      	subs	r3, #80	; 0x50
 8008aac:	80fb      	strh	r3, [r7, #6]
 8008aae:	e004      	b.n	8008aba <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8008ab0:	88fb      	ldrh	r3, [r7, #6]
 8008ab2:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8008ab6:	80fb      	strh	r3, [r7, #6]
 8008ab8:	bf00      	nop
			}
			break;
 8008aba:	e008      	b.n	8008ace <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8008abc:	89fb      	ldrh	r3, [r7, #14]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d195      	bne.n	80089ee <ff_wtoupper+0x1a>
 8008ac2:	8a3b      	ldrh	r3, [r7, #16]
 8008ac4:	005b      	lsls	r3, r3, #1
 8008ac6:	697a      	ldr	r2, [r7, #20]
 8008ac8:	4413      	add	r3, r2
 8008aca:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8008acc:	e78f      	b.n	80089ee <ff_wtoupper+0x1a>
			break;
 8008ace:	bf00      	nop
	}

	return chr;
 8008ad0:	88fb      	ldrh	r3, [r7, #6]
}
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	371c      	adds	r7, #28
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008adc:	4770      	bx	lr
 8008ade:	bf00      	nop
 8008ae0:	08009834 	.word	0x08009834
 8008ae4:	08009a28 	.word	0x08009a28

08008ae8 <siprintf>:
 8008ae8:	b40e      	push	{r1, r2, r3}
 8008aea:	b500      	push	{lr}
 8008aec:	b09c      	sub	sp, #112	; 0x70
 8008aee:	ab1d      	add	r3, sp, #116	; 0x74
 8008af0:	9002      	str	r0, [sp, #8]
 8008af2:	9006      	str	r0, [sp, #24]
 8008af4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008af8:	4809      	ldr	r0, [pc, #36]	; (8008b20 <siprintf+0x38>)
 8008afa:	9107      	str	r1, [sp, #28]
 8008afc:	9104      	str	r1, [sp, #16]
 8008afe:	4909      	ldr	r1, [pc, #36]	; (8008b24 <siprintf+0x3c>)
 8008b00:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b04:	9105      	str	r1, [sp, #20]
 8008b06:	6800      	ldr	r0, [r0, #0]
 8008b08:	9301      	str	r3, [sp, #4]
 8008b0a:	a902      	add	r1, sp, #8
 8008b0c:	f000 f992 	bl	8008e34 <_svfiprintf_r>
 8008b10:	9b02      	ldr	r3, [sp, #8]
 8008b12:	2200      	movs	r2, #0
 8008b14:	701a      	strb	r2, [r3, #0]
 8008b16:	b01c      	add	sp, #112	; 0x70
 8008b18:	f85d eb04 	ldr.w	lr, [sp], #4
 8008b1c:	b003      	add	sp, #12
 8008b1e:	4770      	bx	lr
 8008b20:	20000070 	.word	0x20000070
 8008b24:	ffff0208 	.word	0xffff0208

08008b28 <memset>:
 8008b28:	4402      	add	r2, r0
 8008b2a:	4603      	mov	r3, r0
 8008b2c:	4293      	cmp	r3, r2
 8008b2e:	d100      	bne.n	8008b32 <memset+0xa>
 8008b30:	4770      	bx	lr
 8008b32:	f803 1b01 	strb.w	r1, [r3], #1
 8008b36:	e7f9      	b.n	8008b2c <memset+0x4>

08008b38 <__errno>:
 8008b38:	4b01      	ldr	r3, [pc, #4]	; (8008b40 <__errno+0x8>)
 8008b3a:	6818      	ldr	r0, [r3, #0]
 8008b3c:	4770      	bx	lr
 8008b3e:	bf00      	nop
 8008b40:	20000070 	.word	0x20000070

08008b44 <__libc_init_array>:
 8008b44:	b570      	push	{r4, r5, r6, lr}
 8008b46:	4d0d      	ldr	r5, [pc, #52]	; (8008b7c <__libc_init_array+0x38>)
 8008b48:	4c0d      	ldr	r4, [pc, #52]	; (8008b80 <__libc_init_array+0x3c>)
 8008b4a:	1b64      	subs	r4, r4, r5
 8008b4c:	10a4      	asrs	r4, r4, #2
 8008b4e:	2600      	movs	r6, #0
 8008b50:	42a6      	cmp	r6, r4
 8008b52:	d109      	bne.n	8008b68 <__libc_init_array+0x24>
 8008b54:	4d0b      	ldr	r5, [pc, #44]	; (8008b84 <__libc_init_array+0x40>)
 8008b56:	4c0c      	ldr	r4, [pc, #48]	; (8008b88 <__libc_init_array+0x44>)
 8008b58:	f000 fc6a 	bl	8009430 <_init>
 8008b5c:	1b64      	subs	r4, r4, r5
 8008b5e:	10a4      	asrs	r4, r4, #2
 8008b60:	2600      	movs	r6, #0
 8008b62:	42a6      	cmp	r6, r4
 8008b64:	d105      	bne.n	8008b72 <__libc_init_array+0x2e>
 8008b66:	bd70      	pop	{r4, r5, r6, pc}
 8008b68:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b6c:	4798      	blx	r3
 8008b6e:	3601      	adds	r6, #1
 8008b70:	e7ee      	b.n	8008b50 <__libc_init_array+0xc>
 8008b72:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b76:	4798      	blx	r3
 8008b78:	3601      	adds	r6, #1
 8008b7a:	e7f2      	b.n	8008b62 <__libc_init_array+0x1e>
 8008b7c:	08009b20 	.word	0x08009b20
 8008b80:	08009b20 	.word	0x08009b20
 8008b84:	08009b20 	.word	0x08009b20
 8008b88:	08009b24 	.word	0x08009b24

08008b8c <__retarget_lock_acquire_recursive>:
 8008b8c:	4770      	bx	lr

08008b8e <__retarget_lock_release_recursive>:
 8008b8e:	4770      	bx	lr

08008b90 <_free_r>:
 8008b90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008b92:	2900      	cmp	r1, #0
 8008b94:	d044      	beq.n	8008c20 <_free_r+0x90>
 8008b96:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b9a:	9001      	str	r0, [sp, #4]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	f1a1 0404 	sub.w	r4, r1, #4
 8008ba2:	bfb8      	it	lt
 8008ba4:	18e4      	addlt	r4, r4, r3
 8008ba6:	f000 f8df 	bl	8008d68 <__malloc_lock>
 8008baa:	4a1e      	ldr	r2, [pc, #120]	; (8008c24 <_free_r+0x94>)
 8008bac:	9801      	ldr	r0, [sp, #4]
 8008bae:	6813      	ldr	r3, [r2, #0]
 8008bb0:	b933      	cbnz	r3, 8008bc0 <_free_r+0x30>
 8008bb2:	6063      	str	r3, [r4, #4]
 8008bb4:	6014      	str	r4, [r2, #0]
 8008bb6:	b003      	add	sp, #12
 8008bb8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008bbc:	f000 b8da 	b.w	8008d74 <__malloc_unlock>
 8008bc0:	42a3      	cmp	r3, r4
 8008bc2:	d908      	bls.n	8008bd6 <_free_r+0x46>
 8008bc4:	6825      	ldr	r5, [r4, #0]
 8008bc6:	1961      	adds	r1, r4, r5
 8008bc8:	428b      	cmp	r3, r1
 8008bca:	bf01      	itttt	eq
 8008bcc:	6819      	ldreq	r1, [r3, #0]
 8008bce:	685b      	ldreq	r3, [r3, #4]
 8008bd0:	1949      	addeq	r1, r1, r5
 8008bd2:	6021      	streq	r1, [r4, #0]
 8008bd4:	e7ed      	b.n	8008bb2 <_free_r+0x22>
 8008bd6:	461a      	mov	r2, r3
 8008bd8:	685b      	ldr	r3, [r3, #4]
 8008bda:	b10b      	cbz	r3, 8008be0 <_free_r+0x50>
 8008bdc:	42a3      	cmp	r3, r4
 8008bde:	d9fa      	bls.n	8008bd6 <_free_r+0x46>
 8008be0:	6811      	ldr	r1, [r2, #0]
 8008be2:	1855      	adds	r5, r2, r1
 8008be4:	42a5      	cmp	r5, r4
 8008be6:	d10b      	bne.n	8008c00 <_free_r+0x70>
 8008be8:	6824      	ldr	r4, [r4, #0]
 8008bea:	4421      	add	r1, r4
 8008bec:	1854      	adds	r4, r2, r1
 8008bee:	42a3      	cmp	r3, r4
 8008bf0:	6011      	str	r1, [r2, #0]
 8008bf2:	d1e0      	bne.n	8008bb6 <_free_r+0x26>
 8008bf4:	681c      	ldr	r4, [r3, #0]
 8008bf6:	685b      	ldr	r3, [r3, #4]
 8008bf8:	6053      	str	r3, [r2, #4]
 8008bfa:	440c      	add	r4, r1
 8008bfc:	6014      	str	r4, [r2, #0]
 8008bfe:	e7da      	b.n	8008bb6 <_free_r+0x26>
 8008c00:	d902      	bls.n	8008c08 <_free_r+0x78>
 8008c02:	230c      	movs	r3, #12
 8008c04:	6003      	str	r3, [r0, #0]
 8008c06:	e7d6      	b.n	8008bb6 <_free_r+0x26>
 8008c08:	6825      	ldr	r5, [r4, #0]
 8008c0a:	1961      	adds	r1, r4, r5
 8008c0c:	428b      	cmp	r3, r1
 8008c0e:	bf04      	itt	eq
 8008c10:	6819      	ldreq	r1, [r3, #0]
 8008c12:	685b      	ldreq	r3, [r3, #4]
 8008c14:	6063      	str	r3, [r4, #4]
 8008c16:	bf04      	itt	eq
 8008c18:	1949      	addeq	r1, r1, r5
 8008c1a:	6021      	streq	r1, [r4, #0]
 8008c1c:	6054      	str	r4, [r2, #4]
 8008c1e:	e7ca      	b.n	8008bb6 <_free_r+0x26>
 8008c20:	b003      	add	sp, #12
 8008c22:	bd30      	pop	{r4, r5, pc}
 8008c24:	20002af0 	.word	0x20002af0

08008c28 <sbrk_aligned>:
 8008c28:	b570      	push	{r4, r5, r6, lr}
 8008c2a:	4e0e      	ldr	r6, [pc, #56]	; (8008c64 <sbrk_aligned+0x3c>)
 8008c2c:	460c      	mov	r4, r1
 8008c2e:	6831      	ldr	r1, [r6, #0]
 8008c30:	4605      	mov	r5, r0
 8008c32:	b911      	cbnz	r1, 8008c3a <sbrk_aligned+0x12>
 8008c34:	f000 fba6 	bl	8009384 <_sbrk_r>
 8008c38:	6030      	str	r0, [r6, #0]
 8008c3a:	4621      	mov	r1, r4
 8008c3c:	4628      	mov	r0, r5
 8008c3e:	f000 fba1 	bl	8009384 <_sbrk_r>
 8008c42:	1c43      	adds	r3, r0, #1
 8008c44:	d00a      	beq.n	8008c5c <sbrk_aligned+0x34>
 8008c46:	1cc4      	adds	r4, r0, #3
 8008c48:	f024 0403 	bic.w	r4, r4, #3
 8008c4c:	42a0      	cmp	r0, r4
 8008c4e:	d007      	beq.n	8008c60 <sbrk_aligned+0x38>
 8008c50:	1a21      	subs	r1, r4, r0
 8008c52:	4628      	mov	r0, r5
 8008c54:	f000 fb96 	bl	8009384 <_sbrk_r>
 8008c58:	3001      	adds	r0, #1
 8008c5a:	d101      	bne.n	8008c60 <sbrk_aligned+0x38>
 8008c5c:	f04f 34ff 	mov.w	r4, #4294967295
 8008c60:	4620      	mov	r0, r4
 8008c62:	bd70      	pop	{r4, r5, r6, pc}
 8008c64:	20002af4 	.word	0x20002af4

08008c68 <_malloc_r>:
 8008c68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c6c:	1ccd      	adds	r5, r1, #3
 8008c6e:	f025 0503 	bic.w	r5, r5, #3
 8008c72:	3508      	adds	r5, #8
 8008c74:	2d0c      	cmp	r5, #12
 8008c76:	bf38      	it	cc
 8008c78:	250c      	movcc	r5, #12
 8008c7a:	2d00      	cmp	r5, #0
 8008c7c:	4607      	mov	r7, r0
 8008c7e:	db01      	blt.n	8008c84 <_malloc_r+0x1c>
 8008c80:	42a9      	cmp	r1, r5
 8008c82:	d905      	bls.n	8008c90 <_malloc_r+0x28>
 8008c84:	230c      	movs	r3, #12
 8008c86:	603b      	str	r3, [r7, #0]
 8008c88:	2600      	movs	r6, #0
 8008c8a:	4630      	mov	r0, r6
 8008c8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c90:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008d64 <_malloc_r+0xfc>
 8008c94:	f000 f868 	bl	8008d68 <__malloc_lock>
 8008c98:	f8d8 3000 	ldr.w	r3, [r8]
 8008c9c:	461c      	mov	r4, r3
 8008c9e:	bb5c      	cbnz	r4, 8008cf8 <_malloc_r+0x90>
 8008ca0:	4629      	mov	r1, r5
 8008ca2:	4638      	mov	r0, r7
 8008ca4:	f7ff ffc0 	bl	8008c28 <sbrk_aligned>
 8008ca8:	1c43      	adds	r3, r0, #1
 8008caa:	4604      	mov	r4, r0
 8008cac:	d155      	bne.n	8008d5a <_malloc_r+0xf2>
 8008cae:	f8d8 4000 	ldr.w	r4, [r8]
 8008cb2:	4626      	mov	r6, r4
 8008cb4:	2e00      	cmp	r6, #0
 8008cb6:	d145      	bne.n	8008d44 <_malloc_r+0xdc>
 8008cb8:	2c00      	cmp	r4, #0
 8008cba:	d048      	beq.n	8008d4e <_malloc_r+0xe6>
 8008cbc:	6823      	ldr	r3, [r4, #0]
 8008cbe:	4631      	mov	r1, r6
 8008cc0:	4638      	mov	r0, r7
 8008cc2:	eb04 0903 	add.w	r9, r4, r3
 8008cc6:	f000 fb5d 	bl	8009384 <_sbrk_r>
 8008cca:	4581      	cmp	r9, r0
 8008ccc:	d13f      	bne.n	8008d4e <_malloc_r+0xe6>
 8008cce:	6821      	ldr	r1, [r4, #0]
 8008cd0:	1a6d      	subs	r5, r5, r1
 8008cd2:	4629      	mov	r1, r5
 8008cd4:	4638      	mov	r0, r7
 8008cd6:	f7ff ffa7 	bl	8008c28 <sbrk_aligned>
 8008cda:	3001      	adds	r0, #1
 8008cdc:	d037      	beq.n	8008d4e <_malloc_r+0xe6>
 8008cde:	6823      	ldr	r3, [r4, #0]
 8008ce0:	442b      	add	r3, r5
 8008ce2:	6023      	str	r3, [r4, #0]
 8008ce4:	f8d8 3000 	ldr.w	r3, [r8]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d038      	beq.n	8008d5e <_malloc_r+0xf6>
 8008cec:	685a      	ldr	r2, [r3, #4]
 8008cee:	42a2      	cmp	r2, r4
 8008cf0:	d12b      	bne.n	8008d4a <_malloc_r+0xe2>
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	605a      	str	r2, [r3, #4]
 8008cf6:	e00f      	b.n	8008d18 <_malloc_r+0xb0>
 8008cf8:	6822      	ldr	r2, [r4, #0]
 8008cfa:	1b52      	subs	r2, r2, r5
 8008cfc:	d41f      	bmi.n	8008d3e <_malloc_r+0xd6>
 8008cfe:	2a0b      	cmp	r2, #11
 8008d00:	d917      	bls.n	8008d32 <_malloc_r+0xca>
 8008d02:	1961      	adds	r1, r4, r5
 8008d04:	42a3      	cmp	r3, r4
 8008d06:	6025      	str	r5, [r4, #0]
 8008d08:	bf18      	it	ne
 8008d0a:	6059      	strne	r1, [r3, #4]
 8008d0c:	6863      	ldr	r3, [r4, #4]
 8008d0e:	bf08      	it	eq
 8008d10:	f8c8 1000 	streq.w	r1, [r8]
 8008d14:	5162      	str	r2, [r4, r5]
 8008d16:	604b      	str	r3, [r1, #4]
 8008d18:	4638      	mov	r0, r7
 8008d1a:	f104 060b 	add.w	r6, r4, #11
 8008d1e:	f000 f829 	bl	8008d74 <__malloc_unlock>
 8008d22:	f026 0607 	bic.w	r6, r6, #7
 8008d26:	1d23      	adds	r3, r4, #4
 8008d28:	1af2      	subs	r2, r6, r3
 8008d2a:	d0ae      	beq.n	8008c8a <_malloc_r+0x22>
 8008d2c:	1b9b      	subs	r3, r3, r6
 8008d2e:	50a3      	str	r3, [r4, r2]
 8008d30:	e7ab      	b.n	8008c8a <_malloc_r+0x22>
 8008d32:	42a3      	cmp	r3, r4
 8008d34:	6862      	ldr	r2, [r4, #4]
 8008d36:	d1dd      	bne.n	8008cf4 <_malloc_r+0x8c>
 8008d38:	f8c8 2000 	str.w	r2, [r8]
 8008d3c:	e7ec      	b.n	8008d18 <_malloc_r+0xb0>
 8008d3e:	4623      	mov	r3, r4
 8008d40:	6864      	ldr	r4, [r4, #4]
 8008d42:	e7ac      	b.n	8008c9e <_malloc_r+0x36>
 8008d44:	4634      	mov	r4, r6
 8008d46:	6876      	ldr	r6, [r6, #4]
 8008d48:	e7b4      	b.n	8008cb4 <_malloc_r+0x4c>
 8008d4a:	4613      	mov	r3, r2
 8008d4c:	e7cc      	b.n	8008ce8 <_malloc_r+0x80>
 8008d4e:	230c      	movs	r3, #12
 8008d50:	603b      	str	r3, [r7, #0]
 8008d52:	4638      	mov	r0, r7
 8008d54:	f000 f80e 	bl	8008d74 <__malloc_unlock>
 8008d58:	e797      	b.n	8008c8a <_malloc_r+0x22>
 8008d5a:	6025      	str	r5, [r4, #0]
 8008d5c:	e7dc      	b.n	8008d18 <_malloc_r+0xb0>
 8008d5e:	605b      	str	r3, [r3, #4]
 8008d60:	deff      	udf	#255	; 0xff
 8008d62:	bf00      	nop
 8008d64:	20002af0 	.word	0x20002af0

08008d68 <__malloc_lock>:
 8008d68:	4801      	ldr	r0, [pc, #4]	; (8008d70 <__malloc_lock+0x8>)
 8008d6a:	f7ff bf0f 	b.w	8008b8c <__retarget_lock_acquire_recursive>
 8008d6e:	bf00      	nop
 8008d70:	20002aec 	.word	0x20002aec

08008d74 <__malloc_unlock>:
 8008d74:	4801      	ldr	r0, [pc, #4]	; (8008d7c <__malloc_unlock+0x8>)
 8008d76:	f7ff bf0a 	b.w	8008b8e <__retarget_lock_release_recursive>
 8008d7a:	bf00      	nop
 8008d7c:	20002aec 	.word	0x20002aec

08008d80 <__ssputs_r>:
 8008d80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d84:	688e      	ldr	r6, [r1, #8]
 8008d86:	461f      	mov	r7, r3
 8008d88:	42be      	cmp	r6, r7
 8008d8a:	680b      	ldr	r3, [r1, #0]
 8008d8c:	4682      	mov	sl, r0
 8008d8e:	460c      	mov	r4, r1
 8008d90:	4690      	mov	r8, r2
 8008d92:	d82c      	bhi.n	8008dee <__ssputs_r+0x6e>
 8008d94:	898a      	ldrh	r2, [r1, #12]
 8008d96:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008d9a:	d026      	beq.n	8008dea <__ssputs_r+0x6a>
 8008d9c:	6965      	ldr	r5, [r4, #20]
 8008d9e:	6909      	ldr	r1, [r1, #16]
 8008da0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008da4:	eba3 0901 	sub.w	r9, r3, r1
 8008da8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008dac:	1c7b      	adds	r3, r7, #1
 8008dae:	444b      	add	r3, r9
 8008db0:	106d      	asrs	r5, r5, #1
 8008db2:	429d      	cmp	r5, r3
 8008db4:	bf38      	it	cc
 8008db6:	461d      	movcc	r5, r3
 8008db8:	0553      	lsls	r3, r2, #21
 8008dba:	d527      	bpl.n	8008e0c <__ssputs_r+0x8c>
 8008dbc:	4629      	mov	r1, r5
 8008dbe:	f7ff ff53 	bl	8008c68 <_malloc_r>
 8008dc2:	4606      	mov	r6, r0
 8008dc4:	b360      	cbz	r0, 8008e20 <__ssputs_r+0xa0>
 8008dc6:	6921      	ldr	r1, [r4, #16]
 8008dc8:	464a      	mov	r2, r9
 8008dca:	f000 faeb 	bl	80093a4 <memcpy>
 8008dce:	89a3      	ldrh	r3, [r4, #12]
 8008dd0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008dd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008dd8:	81a3      	strh	r3, [r4, #12]
 8008dda:	6126      	str	r6, [r4, #16]
 8008ddc:	6165      	str	r5, [r4, #20]
 8008dde:	444e      	add	r6, r9
 8008de0:	eba5 0509 	sub.w	r5, r5, r9
 8008de4:	6026      	str	r6, [r4, #0]
 8008de6:	60a5      	str	r5, [r4, #8]
 8008de8:	463e      	mov	r6, r7
 8008dea:	42be      	cmp	r6, r7
 8008dec:	d900      	bls.n	8008df0 <__ssputs_r+0x70>
 8008dee:	463e      	mov	r6, r7
 8008df0:	6820      	ldr	r0, [r4, #0]
 8008df2:	4632      	mov	r2, r6
 8008df4:	4641      	mov	r1, r8
 8008df6:	f000 faab 	bl	8009350 <memmove>
 8008dfa:	68a3      	ldr	r3, [r4, #8]
 8008dfc:	1b9b      	subs	r3, r3, r6
 8008dfe:	60a3      	str	r3, [r4, #8]
 8008e00:	6823      	ldr	r3, [r4, #0]
 8008e02:	4433      	add	r3, r6
 8008e04:	6023      	str	r3, [r4, #0]
 8008e06:	2000      	movs	r0, #0
 8008e08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e0c:	462a      	mov	r2, r5
 8008e0e:	f000 fad7 	bl	80093c0 <_realloc_r>
 8008e12:	4606      	mov	r6, r0
 8008e14:	2800      	cmp	r0, #0
 8008e16:	d1e0      	bne.n	8008dda <__ssputs_r+0x5a>
 8008e18:	6921      	ldr	r1, [r4, #16]
 8008e1a:	4650      	mov	r0, sl
 8008e1c:	f7ff feb8 	bl	8008b90 <_free_r>
 8008e20:	230c      	movs	r3, #12
 8008e22:	f8ca 3000 	str.w	r3, [sl]
 8008e26:	89a3      	ldrh	r3, [r4, #12]
 8008e28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e2c:	81a3      	strh	r3, [r4, #12]
 8008e2e:	f04f 30ff 	mov.w	r0, #4294967295
 8008e32:	e7e9      	b.n	8008e08 <__ssputs_r+0x88>

08008e34 <_svfiprintf_r>:
 8008e34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e38:	4698      	mov	r8, r3
 8008e3a:	898b      	ldrh	r3, [r1, #12]
 8008e3c:	061b      	lsls	r3, r3, #24
 8008e3e:	b09d      	sub	sp, #116	; 0x74
 8008e40:	4607      	mov	r7, r0
 8008e42:	460d      	mov	r5, r1
 8008e44:	4614      	mov	r4, r2
 8008e46:	d50e      	bpl.n	8008e66 <_svfiprintf_r+0x32>
 8008e48:	690b      	ldr	r3, [r1, #16]
 8008e4a:	b963      	cbnz	r3, 8008e66 <_svfiprintf_r+0x32>
 8008e4c:	2140      	movs	r1, #64	; 0x40
 8008e4e:	f7ff ff0b 	bl	8008c68 <_malloc_r>
 8008e52:	6028      	str	r0, [r5, #0]
 8008e54:	6128      	str	r0, [r5, #16]
 8008e56:	b920      	cbnz	r0, 8008e62 <_svfiprintf_r+0x2e>
 8008e58:	230c      	movs	r3, #12
 8008e5a:	603b      	str	r3, [r7, #0]
 8008e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8008e60:	e0d0      	b.n	8009004 <_svfiprintf_r+0x1d0>
 8008e62:	2340      	movs	r3, #64	; 0x40
 8008e64:	616b      	str	r3, [r5, #20]
 8008e66:	2300      	movs	r3, #0
 8008e68:	9309      	str	r3, [sp, #36]	; 0x24
 8008e6a:	2320      	movs	r3, #32
 8008e6c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008e70:	f8cd 800c 	str.w	r8, [sp, #12]
 8008e74:	2330      	movs	r3, #48	; 0x30
 8008e76:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800901c <_svfiprintf_r+0x1e8>
 8008e7a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008e7e:	f04f 0901 	mov.w	r9, #1
 8008e82:	4623      	mov	r3, r4
 8008e84:	469a      	mov	sl, r3
 8008e86:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008e8a:	b10a      	cbz	r2, 8008e90 <_svfiprintf_r+0x5c>
 8008e8c:	2a25      	cmp	r2, #37	; 0x25
 8008e8e:	d1f9      	bne.n	8008e84 <_svfiprintf_r+0x50>
 8008e90:	ebba 0b04 	subs.w	fp, sl, r4
 8008e94:	d00b      	beq.n	8008eae <_svfiprintf_r+0x7a>
 8008e96:	465b      	mov	r3, fp
 8008e98:	4622      	mov	r2, r4
 8008e9a:	4629      	mov	r1, r5
 8008e9c:	4638      	mov	r0, r7
 8008e9e:	f7ff ff6f 	bl	8008d80 <__ssputs_r>
 8008ea2:	3001      	adds	r0, #1
 8008ea4:	f000 80a9 	beq.w	8008ffa <_svfiprintf_r+0x1c6>
 8008ea8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008eaa:	445a      	add	r2, fp
 8008eac:	9209      	str	r2, [sp, #36]	; 0x24
 8008eae:	f89a 3000 	ldrb.w	r3, [sl]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	f000 80a1 	beq.w	8008ffa <_svfiprintf_r+0x1c6>
 8008eb8:	2300      	movs	r3, #0
 8008eba:	f04f 32ff 	mov.w	r2, #4294967295
 8008ebe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008ec2:	f10a 0a01 	add.w	sl, sl, #1
 8008ec6:	9304      	str	r3, [sp, #16]
 8008ec8:	9307      	str	r3, [sp, #28]
 8008eca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008ece:	931a      	str	r3, [sp, #104]	; 0x68
 8008ed0:	4654      	mov	r4, sl
 8008ed2:	2205      	movs	r2, #5
 8008ed4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ed8:	4850      	ldr	r0, [pc, #320]	; (800901c <_svfiprintf_r+0x1e8>)
 8008eda:	f7f7 f9a1 	bl	8000220 <memchr>
 8008ede:	9a04      	ldr	r2, [sp, #16]
 8008ee0:	b9d8      	cbnz	r0, 8008f1a <_svfiprintf_r+0xe6>
 8008ee2:	06d0      	lsls	r0, r2, #27
 8008ee4:	bf44      	itt	mi
 8008ee6:	2320      	movmi	r3, #32
 8008ee8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008eec:	0711      	lsls	r1, r2, #28
 8008eee:	bf44      	itt	mi
 8008ef0:	232b      	movmi	r3, #43	; 0x2b
 8008ef2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008ef6:	f89a 3000 	ldrb.w	r3, [sl]
 8008efa:	2b2a      	cmp	r3, #42	; 0x2a
 8008efc:	d015      	beq.n	8008f2a <_svfiprintf_r+0xf6>
 8008efe:	9a07      	ldr	r2, [sp, #28]
 8008f00:	4654      	mov	r4, sl
 8008f02:	2000      	movs	r0, #0
 8008f04:	f04f 0c0a 	mov.w	ip, #10
 8008f08:	4621      	mov	r1, r4
 8008f0a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008f0e:	3b30      	subs	r3, #48	; 0x30
 8008f10:	2b09      	cmp	r3, #9
 8008f12:	d94d      	bls.n	8008fb0 <_svfiprintf_r+0x17c>
 8008f14:	b1b0      	cbz	r0, 8008f44 <_svfiprintf_r+0x110>
 8008f16:	9207      	str	r2, [sp, #28]
 8008f18:	e014      	b.n	8008f44 <_svfiprintf_r+0x110>
 8008f1a:	eba0 0308 	sub.w	r3, r0, r8
 8008f1e:	fa09 f303 	lsl.w	r3, r9, r3
 8008f22:	4313      	orrs	r3, r2
 8008f24:	9304      	str	r3, [sp, #16]
 8008f26:	46a2      	mov	sl, r4
 8008f28:	e7d2      	b.n	8008ed0 <_svfiprintf_r+0x9c>
 8008f2a:	9b03      	ldr	r3, [sp, #12]
 8008f2c:	1d19      	adds	r1, r3, #4
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	9103      	str	r1, [sp, #12]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	bfbb      	ittet	lt
 8008f36:	425b      	neglt	r3, r3
 8008f38:	f042 0202 	orrlt.w	r2, r2, #2
 8008f3c:	9307      	strge	r3, [sp, #28]
 8008f3e:	9307      	strlt	r3, [sp, #28]
 8008f40:	bfb8      	it	lt
 8008f42:	9204      	strlt	r2, [sp, #16]
 8008f44:	7823      	ldrb	r3, [r4, #0]
 8008f46:	2b2e      	cmp	r3, #46	; 0x2e
 8008f48:	d10c      	bne.n	8008f64 <_svfiprintf_r+0x130>
 8008f4a:	7863      	ldrb	r3, [r4, #1]
 8008f4c:	2b2a      	cmp	r3, #42	; 0x2a
 8008f4e:	d134      	bne.n	8008fba <_svfiprintf_r+0x186>
 8008f50:	9b03      	ldr	r3, [sp, #12]
 8008f52:	1d1a      	adds	r2, r3, #4
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	9203      	str	r2, [sp, #12]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	bfb8      	it	lt
 8008f5c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008f60:	3402      	adds	r4, #2
 8008f62:	9305      	str	r3, [sp, #20]
 8008f64:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800902c <_svfiprintf_r+0x1f8>
 8008f68:	7821      	ldrb	r1, [r4, #0]
 8008f6a:	2203      	movs	r2, #3
 8008f6c:	4650      	mov	r0, sl
 8008f6e:	f7f7 f957 	bl	8000220 <memchr>
 8008f72:	b138      	cbz	r0, 8008f84 <_svfiprintf_r+0x150>
 8008f74:	9b04      	ldr	r3, [sp, #16]
 8008f76:	eba0 000a 	sub.w	r0, r0, sl
 8008f7a:	2240      	movs	r2, #64	; 0x40
 8008f7c:	4082      	lsls	r2, r0
 8008f7e:	4313      	orrs	r3, r2
 8008f80:	3401      	adds	r4, #1
 8008f82:	9304      	str	r3, [sp, #16]
 8008f84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f88:	4825      	ldr	r0, [pc, #148]	; (8009020 <_svfiprintf_r+0x1ec>)
 8008f8a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008f8e:	2206      	movs	r2, #6
 8008f90:	f7f7 f946 	bl	8000220 <memchr>
 8008f94:	2800      	cmp	r0, #0
 8008f96:	d038      	beq.n	800900a <_svfiprintf_r+0x1d6>
 8008f98:	4b22      	ldr	r3, [pc, #136]	; (8009024 <_svfiprintf_r+0x1f0>)
 8008f9a:	bb1b      	cbnz	r3, 8008fe4 <_svfiprintf_r+0x1b0>
 8008f9c:	9b03      	ldr	r3, [sp, #12]
 8008f9e:	3307      	adds	r3, #7
 8008fa0:	f023 0307 	bic.w	r3, r3, #7
 8008fa4:	3308      	adds	r3, #8
 8008fa6:	9303      	str	r3, [sp, #12]
 8008fa8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008faa:	4433      	add	r3, r6
 8008fac:	9309      	str	r3, [sp, #36]	; 0x24
 8008fae:	e768      	b.n	8008e82 <_svfiprintf_r+0x4e>
 8008fb0:	fb0c 3202 	mla	r2, ip, r2, r3
 8008fb4:	460c      	mov	r4, r1
 8008fb6:	2001      	movs	r0, #1
 8008fb8:	e7a6      	b.n	8008f08 <_svfiprintf_r+0xd4>
 8008fba:	2300      	movs	r3, #0
 8008fbc:	3401      	adds	r4, #1
 8008fbe:	9305      	str	r3, [sp, #20]
 8008fc0:	4619      	mov	r1, r3
 8008fc2:	f04f 0c0a 	mov.w	ip, #10
 8008fc6:	4620      	mov	r0, r4
 8008fc8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008fcc:	3a30      	subs	r2, #48	; 0x30
 8008fce:	2a09      	cmp	r2, #9
 8008fd0:	d903      	bls.n	8008fda <_svfiprintf_r+0x1a6>
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d0c6      	beq.n	8008f64 <_svfiprintf_r+0x130>
 8008fd6:	9105      	str	r1, [sp, #20]
 8008fd8:	e7c4      	b.n	8008f64 <_svfiprintf_r+0x130>
 8008fda:	fb0c 2101 	mla	r1, ip, r1, r2
 8008fde:	4604      	mov	r4, r0
 8008fe0:	2301      	movs	r3, #1
 8008fe2:	e7f0      	b.n	8008fc6 <_svfiprintf_r+0x192>
 8008fe4:	ab03      	add	r3, sp, #12
 8008fe6:	9300      	str	r3, [sp, #0]
 8008fe8:	462a      	mov	r2, r5
 8008fea:	4b0f      	ldr	r3, [pc, #60]	; (8009028 <_svfiprintf_r+0x1f4>)
 8008fec:	a904      	add	r1, sp, #16
 8008fee:	4638      	mov	r0, r7
 8008ff0:	f3af 8000 	nop.w
 8008ff4:	1c42      	adds	r2, r0, #1
 8008ff6:	4606      	mov	r6, r0
 8008ff8:	d1d6      	bne.n	8008fa8 <_svfiprintf_r+0x174>
 8008ffa:	89ab      	ldrh	r3, [r5, #12]
 8008ffc:	065b      	lsls	r3, r3, #25
 8008ffe:	f53f af2d 	bmi.w	8008e5c <_svfiprintf_r+0x28>
 8009002:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009004:	b01d      	add	sp, #116	; 0x74
 8009006:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800900a:	ab03      	add	r3, sp, #12
 800900c:	9300      	str	r3, [sp, #0]
 800900e:	462a      	mov	r2, r5
 8009010:	4b05      	ldr	r3, [pc, #20]	; (8009028 <_svfiprintf_r+0x1f4>)
 8009012:	a904      	add	r1, sp, #16
 8009014:	4638      	mov	r0, r7
 8009016:	f000 f879 	bl	800910c <_printf_i>
 800901a:	e7eb      	b.n	8008ff4 <_svfiprintf_r+0x1c0>
 800901c:	08009ae4 	.word	0x08009ae4
 8009020:	08009aee 	.word	0x08009aee
 8009024:	00000000 	.word	0x00000000
 8009028:	08008d81 	.word	0x08008d81
 800902c:	08009aea 	.word	0x08009aea

08009030 <_printf_common>:
 8009030:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009034:	4616      	mov	r6, r2
 8009036:	4699      	mov	r9, r3
 8009038:	688a      	ldr	r2, [r1, #8]
 800903a:	690b      	ldr	r3, [r1, #16]
 800903c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009040:	4293      	cmp	r3, r2
 8009042:	bfb8      	it	lt
 8009044:	4613      	movlt	r3, r2
 8009046:	6033      	str	r3, [r6, #0]
 8009048:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800904c:	4607      	mov	r7, r0
 800904e:	460c      	mov	r4, r1
 8009050:	b10a      	cbz	r2, 8009056 <_printf_common+0x26>
 8009052:	3301      	adds	r3, #1
 8009054:	6033      	str	r3, [r6, #0]
 8009056:	6823      	ldr	r3, [r4, #0]
 8009058:	0699      	lsls	r1, r3, #26
 800905a:	bf42      	ittt	mi
 800905c:	6833      	ldrmi	r3, [r6, #0]
 800905e:	3302      	addmi	r3, #2
 8009060:	6033      	strmi	r3, [r6, #0]
 8009062:	6825      	ldr	r5, [r4, #0]
 8009064:	f015 0506 	ands.w	r5, r5, #6
 8009068:	d106      	bne.n	8009078 <_printf_common+0x48>
 800906a:	f104 0a19 	add.w	sl, r4, #25
 800906e:	68e3      	ldr	r3, [r4, #12]
 8009070:	6832      	ldr	r2, [r6, #0]
 8009072:	1a9b      	subs	r3, r3, r2
 8009074:	42ab      	cmp	r3, r5
 8009076:	dc26      	bgt.n	80090c6 <_printf_common+0x96>
 8009078:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800907c:	1e13      	subs	r3, r2, #0
 800907e:	6822      	ldr	r2, [r4, #0]
 8009080:	bf18      	it	ne
 8009082:	2301      	movne	r3, #1
 8009084:	0692      	lsls	r2, r2, #26
 8009086:	d42b      	bmi.n	80090e0 <_printf_common+0xb0>
 8009088:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800908c:	4649      	mov	r1, r9
 800908e:	4638      	mov	r0, r7
 8009090:	47c0      	blx	r8
 8009092:	3001      	adds	r0, #1
 8009094:	d01e      	beq.n	80090d4 <_printf_common+0xa4>
 8009096:	6823      	ldr	r3, [r4, #0]
 8009098:	6922      	ldr	r2, [r4, #16]
 800909a:	f003 0306 	and.w	r3, r3, #6
 800909e:	2b04      	cmp	r3, #4
 80090a0:	bf02      	ittt	eq
 80090a2:	68e5      	ldreq	r5, [r4, #12]
 80090a4:	6833      	ldreq	r3, [r6, #0]
 80090a6:	1aed      	subeq	r5, r5, r3
 80090a8:	68a3      	ldr	r3, [r4, #8]
 80090aa:	bf0c      	ite	eq
 80090ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80090b0:	2500      	movne	r5, #0
 80090b2:	4293      	cmp	r3, r2
 80090b4:	bfc4      	itt	gt
 80090b6:	1a9b      	subgt	r3, r3, r2
 80090b8:	18ed      	addgt	r5, r5, r3
 80090ba:	2600      	movs	r6, #0
 80090bc:	341a      	adds	r4, #26
 80090be:	42b5      	cmp	r5, r6
 80090c0:	d11a      	bne.n	80090f8 <_printf_common+0xc8>
 80090c2:	2000      	movs	r0, #0
 80090c4:	e008      	b.n	80090d8 <_printf_common+0xa8>
 80090c6:	2301      	movs	r3, #1
 80090c8:	4652      	mov	r2, sl
 80090ca:	4649      	mov	r1, r9
 80090cc:	4638      	mov	r0, r7
 80090ce:	47c0      	blx	r8
 80090d0:	3001      	adds	r0, #1
 80090d2:	d103      	bne.n	80090dc <_printf_common+0xac>
 80090d4:	f04f 30ff 	mov.w	r0, #4294967295
 80090d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090dc:	3501      	adds	r5, #1
 80090de:	e7c6      	b.n	800906e <_printf_common+0x3e>
 80090e0:	18e1      	adds	r1, r4, r3
 80090e2:	1c5a      	adds	r2, r3, #1
 80090e4:	2030      	movs	r0, #48	; 0x30
 80090e6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80090ea:	4422      	add	r2, r4
 80090ec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80090f0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80090f4:	3302      	adds	r3, #2
 80090f6:	e7c7      	b.n	8009088 <_printf_common+0x58>
 80090f8:	2301      	movs	r3, #1
 80090fa:	4622      	mov	r2, r4
 80090fc:	4649      	mov	r1, r9
 80090fe:	4638      	mov	r0, r7
 8009100:	47c0      	blx	r8
 8009102:	3001      	adds	r0, #1
 8009104:	d0e6      	beq.n	80090d4 <_printf_common+0xa4>
 8009106:	3601      	adds	r6, #1
 8009108:	e7d9      	b.n	80090be <_printf_common+0x8e>
	...

0800910c <_printf_i>:
 800910c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009110:	7e0f      	ldrb	r7, [r1, #24]
 8009112:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009114:	2f78      	cmp	r7, #120	; 0x78
 8009116:	4691      	mov	r9, r2
 8009118:	4680      	mov	r8, r0
 800911a:	460c      	mov	r4, r1
 800911c:	469a      	mov	sl, r3
 800911e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009122:	d807      	bhi.n	8009134 <_printf_i+0x28>
 8009124:	2f62      	cmp	r7, #98	; 0x62
 8009126:	d80a      	bhi.n	800913e <_printf_i+0x32>
 8009128:	2f00      	cmp	r7, #0
 800912a:	f000 80d4 	beq.w	80092d6 <_printf_i+0x1ca>
 800912e:	2f58      	cmp	r7, #88	; 0x58
 8009130:	f000 80c0 	beq.w	80092b4 <_printf_i+0x1a8>
 8009134:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009138:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800913c:	e03a      	b.n	80091b4 <_printf_i+0xa8>
 800913e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009142:	2b15      	cmp	r3, #21
 8009144:	d8f6      	bhi.n	8009134 <_printf_i+0x28>
 8009146:	a101      	add	r1, pc, #4	; (adr r1, 800914c <_printf_i+0x40>)
 8009148:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800914c:	080091a5 	.word	0x080091a5
 8009150:	080091b9 	.word	0x080091b9
 8009154:	08009135 	.word	0x08009135
 8009158:	08009135 	.word	0x08009135
 800915c:	08009135 	.word	0x08009135
 8009160:	08009135 	.word	0x08009135
 8009164:	080091b9 	.word	0x080091b9
 8009168:	08009135 	.word	0x08009135
 800916c:	08009135 	.word	0x08009135
 8009170:	08009135 	.word	0x08009135
 8009174:	08009135 	.word	0x08009135
 8009178:	080092bd 	.word	0x080092bd
 800917c:	080091e5 	.word	0x080091e5
 8009180:	08009277 	.word	0x08009277
 8009184:	08009135 	.word	0x08009135
 8009188:	08009135 	.word	0x08009135
 800918c:	080092df 	.word	0x080092df
 8009190:	08009135 	.word	0x08009135
 8009194:	080091e5 	.word	0x080091e5
 8009198:	08009135 	.word	0x08009135
 800919c:	08009135 	.word	0x08009135
 80091a0:	0800927f 	.word	0x0800927f
 80091a4:	682b      	ldr	r3, [r5, #0]
 80091a6:	1d1a      	adds	r2, r3, #4
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	602a      	str	r2, [r5, #0]
 80091ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80091b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80091b4:	2301      	movs	r3, #1
 80091b6:	e09f      	b.n	80092f8 <_printf_i+0x1ec>
 80091b8:	6820      	ldr	r0, [r4, #0]
 80091ba:	682b      	ldr	r3, [r5, #0]
 80091bc:	0607      	lsls	r7, r0, #24
 80091be:	f103 0104 	add.w	r1, r3, #4
 80091c2:	6029      	str	r1, [r5, #0]
 80091c4:	d501      	bpl.n	80091ca <_printf_i+0xbe>
 80091c6:	681e      	ldr	r6, [r3, #0]
 80091c8:	e003      	b.n	80091d2 <_printf_i+0xc6>
 80091ca:	0646      	lsls	r6, r0, #25
 80091cc:	d5fb      	bpl.n	80091c6 <_printf_i+0xba>
 80091ce:	f9b3 6000 	ldrsh.w	r6, [r3]
 80091d2:	2e00      	cmp	r6, #0
 80091d4:	da03      	bge.n	80091de <_printf_i+0xd2>
 80091d6:	232d      	movs	r3, #45	; 0x2d
 80091d8:	4276      	negs	r6, r6
 80091da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80091de:	485a      	ldr	r0, [pc, #360]	; (8009348 <_printf_i+0x23c>)
 80091e0:	230a      	movs	r3, #10
 80091e2:	e012      	b.n	800920a <_printf_i+0xfe>
 80091e4:	682b      	ldr	r3, [r5, #0]
 80091e6:	6820      	ldr	r0, [r4, #0]
 80091e8:	1d19      	adds	r1, r3, #4
 80091ea:	6029      	str	r1, [r5, #0]
 80091ec:	0605      	lsls	r5, r0, #24
 80091ee:	d501      	bpl.n	80091f4 <_printf_i+0xe8>
 80091f0:	681e      	ldr	r6, [r3, #0]
 80091f2:	e002      	b.n	80091fa <_printf_i+0xee>
 80091f4:	0641      	lsls	r1, r0, #25
 80091f6:	d5fb      	bpl.n	80091f0 <_printf_i+0xe4>
 80091f8:	881e      	ldrh	r6, [r3, #0]
 80091fa:	4853      	ldr	r0, [pc, #332]	; (8009348 <_printf_i+0x23c>)
 80091fc:	2f6f      	cmp	r7, #111	; 0x6f
 80091fe:	bf0c      	ite	eq
 8009200:	2308      	moveq	r3, #8
 8009202:	230a      	movne	r3, #10
 8009204:	2100      	movs	r1, #0
 8009206:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800920a:	6865      	ldr	r5, [r4, #4]
 800920c:	60a5      	str	r5, [r4, #8]
 800920e:	2d00      	cmp	r5, #0
 8009210:	bfa2      	ittt	ge
 8009212:	6821      	ldrge	r1, [r4, #0]
 8009214:	f021 0104 	bicge.w	r1, r1, #4
 8009218:	6021      	strge	r1, [r4, #0]
 800921a:	b90e      	cbnz	r6, 8009220 <_printf_i+0x114>
 800921c:	2d00      	cmp	r5, #0
 800921e:	d04b      	beq.n	80092b8 <_printf_i+0x1ac>
 8009220:	4615      	mov	r5, r2
 8009222:	fbb6 f1f3 	udiv	r1, r6, r3
 8009226:	fb03 6711 	mls	r7, r3, r1, r6
 800922a:	5dc7      	ldrb	r7, [r0, r7]
 800922c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009230:	4637      	mov	r7, r6
 8009232:	42bb      	cmp	r3, r7
 8009234:	460e      	mov	r6, r1
 8009236:	d9f4      	bls.n	8009222 <_printf_i+0x116>
 8009238:	2b08      	cmp	r3, #8
 800923a:	d10b      	bne.n	8009254 <_printf_i+0x148>
 800923c:	6823      	ldr	r3, [r4, #0]
 800923e:	07de      	lsls	r6, r3, #31
 8009240:	d508      	bpl.n	8009254 <_printf_i+0x148>
 8009242:	6923      	ldr	r3, [r4, #16]
 8009244:	6861      	ldr	r1, [r4, #4]
 8009246:	4299      	cmp	r1, r3
 8009248:	bfde      	ittt	le
 800924a:	2330      	movle	r3, #48	; 0x30
 800924c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009250:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009254:	1b52      	subs	r2, r2, r5
 8009256:	6122      	str	r2, [r4, #16]
 8009258:	f8cd a000 	str.w	sl, [sp]
 800925c:	464b      	mov	r3, r9
 800925e:	aa03      	add	r2, sp, #12
 8009260:	4621      	mov	r1, r4
 8009262:	4640      	mov	r0, r8
 8009264:	f7ff fee4 	bl	8009030 <_printf_common>
 8009268:	3001      	adds	r0, #1
 800926a:	d14a      	bne.n	8009302 <_printf_i+0x1f6>
 800926c:	f04f 30ff 	mov.w	r0, #4294967295
 8009270:	b004      	add	sp, #16
 8009272:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009276:	6823      	ldr	r3, [r4, #0]
 8009278:	f043 0320 	orr.w	r3, r3, #32
 800927c:	6023      	str	r3, [r4, #0]
 800927e:	4833      	ldr	r0, [pc, #204]	; (800934c <_printf_i+0x240>)
 8009280:	2778      	movs	r7, #120	; 0x78
 8009282:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009286:	6823      	ldr	r3, [r4, #0]
 8009288:	6829      	ldr	r1, [r5, #0]
 800928a:	061f      	lsls	r7, r3, #24
 800928c:	f851 6b04 	ldr.w	r6, [r1], #4
 8009290:	d402      	bmi.n	8009298 <_printf_i+0x18c>
 8009292:	065f      	lsls	r7, r3, #25
 8009294:	bf48      	it	mi
 8009296:	b2b6      	uxthmi	r6, r6
 8009298:	07df      	lsls	r7, r3, #31
 800929a:	bf48      	it	mi
 800929c:	f043 0320 	orrmi.w	r3, r3, #32
 80092a0:	6029      	str	r1, [r5, #0]
 80092a2:	bf48      	it	mi
 80092a4:	6023      	strmi	r3, [r4, #0]
 80092a6:	b91e      	cbnz	r6, 80092b0 <_printf_i+0x1a4>
 80092a8:	6823      	ldr	r3, [r4, #0]
 80092aa:	f023 0320 	bic.w	r3, r3, #32
 80092ae:	6023      	str	r3, [r4, #0]
 80092b0:	2310      	movs	r3, #16
 80092b2:	e7a7      	b.n	8009204 <_printf_i+0xf8>
 80092b4:	4824      	ldr	r0, [pc, #144]	; (8009348 <_printf_i+0x23c>)
 80092b6:	e7e4      	b.n	8009282 <_printf_i+0x176>
 80092b8:	4615      	mov	r5, r2
 80092ba:	e7bd      	b.n	8009238 <_printf_i+0x12c>
 80092bc:	682b      	ldr	r3, [r5, #0]
 80092be:	6826      	ldr	r6, [r4, #0]
 80092c0:	6961      	ldr	r1, [r4, #20]
 80092c2:	1d18      	adds	r0, r3, #4
 80092c4:	6028      	str	r0, [r5, #0]
 80092c6:	0635      	lsls	r5, r6, #24
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	d501      	bpl.n	80092d0 <_printf_i+0x1c4>
 80092cc:	6019      	str	r1, [r3, #0]
 80092ce:	e002      	b.n	80092d6 <_printf_i+0x1ca>
 80092d0:	0670      	lsls	r0, r6, #25
 80092d2:	d5fb      	bpl.n	80092cc <_printf_i+0x1c0>
 80092d4:	8019      	strh	r1, [r3, #0]
 80092d6:	2300      	movs	r3, #0
 80092d8:	6123      	str	r3, [r4, #16]
 80092da:	4615      	mov	r5, r2
 80092dc:	e7bc      	b.n	8009258 <_printf_i+0x14c>
 80092de:	682b      	ldr	r3, [r5, #0]
 80092e0:	1d1a      	adds	r2, r3, #4
 80092e2:	602a      	str	r2, [r5, #0]
 80092e4:	681d      	ldr	r5, [r3, #0]
 80092e6:	6862      	ldr	r2, [r4, #4]
 80092e8:	2100      	movs	r1, #0
 80092ea:	4628      	mov	r0, r5
 80092ec:	f7f6 ff98 	bl	8000220 <memchr>
 80092f0:	b108      	cbz	r0, 80092f6 <_printf_i+0x1ea>
 80092f2:	1b40      	subs	r0, r0, r5
 80092f4:	6060      	str	r0, [r4, #4]
 80092f6:	6863      	ldr	r3, [r4, #4]
 80092f8:	6123      	str	r3, [r4, #16]
 80092fa:	2300      	movs	r3, #0
 80092fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009300:	e7aa      	b.n	8009258 <_printf_i+0x14c>
 8009302:	6923      	ldr	r3, [r4, #16]
 8009304:	462a      	mov	r2, r5
 8009306:	4649      	mov	r1, r9
 8009308:	4640      	mov	r0, r8
 800930a:	47d0      	blx	sl
 800930c:	3001      	adds	r0, #1
 800930e:	d0ad      	beq.n	800926c <_printf_i+0x160>
 8009310:	6823      	ldr	r3, [r4, #0]
 8009312:	079b      	lsls	r3, r3, #30
 8009314:	d413      	bmi.n	800933e <_printf_i+0x232>
 8009316:	68e0      	ldr	r0, [r4, #12]
 8009318:	9b03      	ldr	r3, [sp, #12]
 800931a:	4298      	cmp	r0, r3
 800931c:	bfb8      	it	lt
 800931e:	4618      	movlt	r0, r3
 8009320:	e7a6      	b.n	8009270 <_printf_i+0x164>
 8009322:	2301      	movs	r3, #1
 8009324:	4632      	mov	r2, r6
 8009326:	4649      	mov	r1, r9
 8009328:	4640      	mov	r0, r8
 800932a:	47d0      	blx	sl
 800932c:	3001      	adds	r0, #1
 800932e:	d09d      	beq.n	800926c <_printf_i+0x160>
 8009330:	3501      	adds	r5, #1
 8009332:	68e3      	ldr	r3, [r4, #12]
 8009334:	9903      	ldr	r1, [sp, #12]
 8009336:	1a5b      	subs	r3, r3, r1
 8009338:	42ab      	cmp	r3, r5
 800933a:	dcf2      	bgt.n	8009322 <_printf_i+0x216>
 800933c:	e7eb      	b.n	8009316 <_printf_i+0x20a>
 800933e:	2500      	movs	r5, #0
 8009340:	f104 0619 	add.w	r6, r4, #25
 8009344:	e7f5      	b.n	8009332 <_printf_i+0x226>
 8009346:	bf00      	nop
 8009348:	08009af5 	.word	0x08009af5
 800934c:	08009b06 	.word	0x08009b06

08009350 <memmove>:
 8009350:	4288      	cmp	r0, r1
 8009352:	b510      	push	{r4, lr}
 8009354:	eb01 0402 	add.w	r4, r1, r2
 8009358:	d902      	bls.n	8009360 <memmove+0x10>
 800935a:	4284      	cmp	r4, r0
 800935c:	4623      	mov	r3, r4
 800935e:	d807      	bhi.n	8009370 <memmove+0x20>
 8009360:	1e43      	subs	r3, r0, #1
 8009362:	42a1      	cmp	r1, r4
 8009364:	d008      	beq.n	8009378 <memmove+0x28>
 8009366:	f811 2b01 	ldrb.w	r2, [r1], #1
 800936a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800936e:	e7f8      	b.n	8009362 <memmove+0x12>
 8009370:	4402      	add	r2, r0
 8009372:	4601      	mov	r1, r0
 8009374:	428a      	cmp	r2, r1
 8009376:	d100      	bne.n	800937a <memmove+0x2a>
 8009378:	bd10      	pop	{r4, pc}
 800937a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800937e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009382:	e7f7      	b.n	8009374 <memmove+0x24>

08009384 <_sbrk_r>:
 8009384:	b538      	push	{r3, r4, r5, lr}
 8009386:	4d06      	ldr	r5, [pc, #24]	; (80093a0 <_sbrk_r+0x1c>)
 8009388:	2300      	movs	r3, #0
 800938a:	4604      	mov	r4, r0
 800938c:	4608      	mov	r0, r1
 800938e:	602b      	str	r3, [r5, #0]
 8009390:	f7f8 fdcc 	bl	8001f2c <_sbrk>
 8009394:	1c43      	adds	r3, r0, #1
 8009396:	d102      	bne.n	800939e <_sbrk_r+0x1a>
 8009398:	682b      	ldr	r3, [r5, #0]
 800939a:	b103      	cbz	r3, 800939e <_sbrk_r+0x1a>
 800939c:	6023      	str	r3, [r4, #0]
 800939e:	bd38      	pop	{r3, r4, r5, pc}
 80093a0:	20002ae8 	.word	0x20002ae8

080093a4 <memcpy>:
 80093a4:	440a      	add	r2, r1
 80093a6:	4291      	cmp	r1, r2
 80093a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80093ac:	d100      	bne.n	80093b0 <memcpy+0xc>
 80093ae:	4770      	bx	lr
 80093b0:	b510      	push	{r4, lr}
 80093b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80093b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80093ba:	4291      	cmp	r1, r2
 80093bc:	d1f9      	bne.n	80093b2 <memcpy+0xe>
 80093be:	bd10      	pop	{r4, pc}

080093c0 <_realloc_r>:
 80093c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093c4:	4680      	mov	r8, r0
 80093c6:	4614      	mov	r4, r2
 80093c8:	460e      	mov	r6, r1
 80093ca:	b921      	cbnz	r1, 80093d6 <_realloc_r+0x16>
 80093cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80093d0:	4611      	mov	r1, r2
 80093d2:	f7ff bc49 	b.w	8008c68 <_malloc_r>
 80093d6:	b92a      	cbnz	r2, 80093e4 <_realloc_r+0x24>
 80093d8:	f7ff fbda 	bl	8008b90 <_free_r>
 80093dc:	4625      	mov	r5, r4
 80093de:	4628      	mov	r0, r5
 80093e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093e4:	f000 f81b 	bl	800941e <_malloc_usable_size_r>
 80093e8:	4284      	cmp	r4, r0
 80093ea:	4607      	mov	r7, r0
 80093ec:	d802      	bhi.n	80093f4 <_realloc_r+0x34>
 80093ee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80093f2:	d812      	bhi.n	800941a <_realloc_r+0x5a>
 80093f4:	4621      	mov	r1, r4
 80093f6:	4640      	mov	r0, r8
 80093f8:	f7ff fc36 	bl	8008c68 <_malloc_r>
 80093fc:	4605      	mov	r5, r0
 80093fe:	2800      	cmp	r0, #0
 8009400:	d0ed      	beq.n	80093de <_realloc_r+0x1e>
 8009402:	42bc      	cmp	r4, r7
 8009404:	4622      	mov	r2, r4
 8009406:	4631      	mov	r1, r6
 8009408:	bf28      	it	cs
 800940a:	463a      	movcs	r2, r7
 800940c:	f7ff ffca 	bl	80093a4 <memcpy>
 8009410:	4631      	mov	r1, r6
 8009412:	4640      	mov	r0, r8
 8009414:	f7ff fbbc 	bl	8008b90 <_free_r>
 8009418:	e7e1      	b.n	80093de <_realloc_r+0x1e>
 800941a:	4635      	mov	r5, r6
 800941c:	e7df      	b.n	80093de <_realloc_r+0x1e>

0800941e <_malloc_usable_size_r>:
 800941e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009422:	1f18      	subs	r0, r3, #4
 8009424:	2b00      	cmp	r3, #0
 8009426:	bfbc      	itt	lt
 8009428:	580b      	ldrlt	r3, [r1, r0]
 800942a:	18c0      	addlt	r0, r0, r3
 800942c:	4770      	bx	lr
	...

08009430 <_init>:
 8009430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009432:	bf00      	nop
 8009434:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009436:	bc08      	pop	{r3}
 8009438:	469e      	mov	lr, r3
 800943a:	4770      	bx	lr

0800943c <_fini>:
 800943c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800943e:	bf00      	nop
 8009440:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009442:	bc08      	pop	{r3}
 8009444:	469e      	mov	lr, r3
 8009446:	4770      	bx	lr
